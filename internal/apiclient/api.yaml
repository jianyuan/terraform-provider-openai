openapi: "3.0.3"
info:
  title: OpenAI API
servers:
  - url: https://api.openai.com
paths:
  /v1/organizations:
    get:
      operationId: getOrganizations
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Organization"
        401:
          $ref: "#/components/responses/Unauthorized"
  /v1/organizations/{organizationId}:
    get:
      operationId: getOrganization
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        401:
          $ref: "#/components/responses/Unauthorized"
  /v1/organizations/{organizationId}/users:
    get:
      operationId: getOrganizationUsers
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - can_invite
                  - invited
                  - members
                properties:
                  can_invite:
                    type: boolean
                  invited:
                    type: array
                    items:
                      $ref: "#/components/schemas/InvitedUser"
                  members:
                    type: object
                    required:
                      - data
                      - object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/OrganizationUser"
                      object:
                        $ref: "#/components/schemas/ObjectList"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/organizations/{organizationId}/api_keys:
    get:
      operationId: getOrganizationApiKeys
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
        - name: exclude_project_api_keys
          in: query
          schema:
            type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - can_skip_phone_verification
                  - data
                  - object
                properties:
                  can_skip_phone_verification:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiKey"
                  object:
                    $ref: "#/components/schemas/ObjectList"
        401:
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: updateOrganizationApiKey
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - created_at
                - redacted_key
              properties:
                action:
                  type: string
                  enum:
                    - delete
                    - update
                created_at:
                  type: integer
                  x-go-type: int64
                name:
                  type: string
                redacted_key:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                properties:
                  result:
                    type: string
                    # enum:
                    #   - success
                  key:
                    $ref: "#/components/schemas/ApiKey"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/organizations/{organizationId}/projects:
    get:
      operationId: getOrganizationProjects
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
                  object:
                    $ref: "#/components/schemas/ObjectList"
        401:
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: createOrganizationProject
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - geography
              properties:
                title:
                  type: string
                geography:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/organizations/{organizationId}/projects/{projectId}:
    get:
      operationId: getOrganizationProject
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
        - $ref: "#/components/parameters/ProjectPath"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: updateOrganizationProject
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
        - $ref: "#/components/parameters/ProjectPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                archive:
                  type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/organizations/{organizationId}/projects/{projectId}/api_keys:
    get:
      operationId: getProjectApiKeys
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
        - $ref: "#/components/parameters/ProjectPath"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - can_skip_phone_verification
                  - data
                  - object
                properties:
                  can_skip_phone_verification:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiKey"
                  object:
                    $ref: "#/components/schemas/ObjectList"
        401:
          $ref: "#/components/responses/Unauthorized"
    post:
      operationId: updateProjectApiKey
      parameters:
        - $ref: "#/components/parameters/OrganizationPath"
        - $ref: "#/components/parameters/ProjectPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
                - created_at
                - redacted_key
              properties:
                action:
                  type: string
                  enum:
                    - delete
                    - update
                created_at:
                  type: integer
                  x-go-type: int64
                name:
                  type: string
                redacted_key:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - result
                properties:
                  result:
                    type: string
                    # enum:
                    #   - success
                  key:
                    $ref: "#/components/schemas/ApiKey"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/service_accounts:
    post:
      operationId: createServiceAccountKey
      parameters:
        - $ref: "#/components/parameters/OrganizationHeader"
        - $ref: "#/components/parameters/ProjectHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - object
                  - secret
                properties:
                  id:
                    type: string
                  object:
                    type: string
                    # enum:
                    #   - service_account
                  secret:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApiKey"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /dashboard/user/api_keys/scopes:
    get:
      operationId: getApiKeyScopes
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - description
                    - name
                    - permissions_to_scopes
                    - endpoints
                  properties:
                    name:
                      type: string
                    description:
                      type: string
                    permissions_to_scopes:
                      type: object
                      properties:
                        read:
                          type: array
                          items:
                            type: string
                        write:
                          type: array
                          items:
                            type: string
                    endpoints:
                      type: array
                      items:
                        type: string
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    ProjectHeader:
      name: Openai-Project
      in: header
      schema:
        type: string
    ProjectPath:
      name: projectId
      in: path
      required: true
      schema:
        type: string
    OrganizationHeader:
      name: Openai-Organization
      in: header
      schema:
        type: string
    OrganizationPath:
      name: organizationId
      in: path
      required: true
      schema:
        type: string
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    ApiKey:
      type: object
      required:
        - created
        - last_use
        - name
        - object
        - organization
        - project
        - publishable
        - scopes
        - sensitive_id
        - tracking_id
        - user
      properties:
        created:
          type: integer
          x-go-type: int64
        last_use:
          type: integer
          x-go-type: int64
          nullable: true
        name:
          type: string
          nullable: true
        object:
          type: string
          enum:
            - api_key
        organization:
          type: object
          required:
            - id
            - title
          properties:
            id:
              type: string
            title:
              type: string
        project:
          type: object
          nullable: true
          required:
            - id
            - title
          properties:
            id:
              type: string
            title:
              type: string
        publishable:
          type: boolean
        scopes:
          type: array
          items:
            type: string
        sensitive_id:
          type: string
        tracking_id:
          type: string
        user:
          type: object
          required:
            - id
            - is_service_account
            - name
          properties:
            id:
              type: string
            is_service_account:
              type: boolean
            name:
              type: string
              nullable: true
    Organization:
      type: object
      required:
        - created
        - description
        - id
        - is_default
        - name
        - object
        - personal
        - projects
        - settings
        - title
      properties:
        created:
          type: integer
          x-go-type: int64
        description:
          type: string
        id:
          type: string
        is_default:
          type: boolean
        name:
          type: string
        object:
          type: string
          enum:
            - organization
        parent_org_id:
          type: string
        personal:
          type: boolean
        projects:
          type: object
          required:
            - data
            - object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Project"
            object:
              $ref: "#/components/schemas/ObjectList"
        role:
          $ref: "#/components/schemas/Role"
        settings:
          type: object
          required:
            - threads_ui_visibility
            - usage_dashboard_visibility
          properties:
            threads_ui_visibility:
              type: string
              enum:
                - NONE
                - OWNERS
                - ANY_ROLE
            usage_dashboard_visibility:
              type: string
              enum:
                - OWNERS
                - ANY_ROLE
        title:
          type: string
    OrganizationUser:
      type: object
      required:
        - created
        - is_default
        - is_service_account
        - object
        - role
        - user
      properties:
        created:
          type: integer
          x-go-type: int64
        id:
          type: string
        is_default:
          type: boolean
        is_service_account:
          type: boolean
        object:
          type: string
          enum:
            - organization_user
        role:
          $ref: "#/components/schemas/Role"
        user:
          $ref: "#/components/schemas/User"
    Project:
      type: object
      required:
        - created
        - id
        - is_initial
        - object
        - organization_id
        - title
      properties:
        created:
          type: integer
          x-go-type: int64
        geography: {}
        id:
          type: string
        is_initial:
          type: boolean
        object:
          type: string
          enum:
            - project
        organization_id:
          type: string
        role:
          type: string
        title:
          type: string
    User:
      type: object
      required:
        - email
        - id
        - name
        - object
      properties:
        email:
          type: string
        id:
          type: string
        name:
          type: string
        object:
          type: string
          enum:
            - user
        picture:
          type: string
    InvitedUser:
      type: object
      required:
        - email
        - id
        - is_expired
        - role
      properties:
        email:
          type: string
        id:
          type: string
        is_expired:
          type: boolean
        role:
          $ref: "#/components/schemas/Role"
    ObjectList:
      type: string
      enum:
        - list
    Role:
      type: string
      enum:
        - reader
        - owner
    Error:
      type: object
      required:
        - code
        - message
        - param
        - type
      properties:
        code:
          nullable: true
        message:
          type: string
        param:
          nullable: true
        type:
          type: string
security:
  - bearerAuth: []
