components:
  schemas:
    AddUploadPartRequest:
      additionalProperties: false
      properties:
        data:
          description: 'The chunk of bytes for this Part.

            '
          format: binary
          type: string
      required:
      - data
      type: object
    AdminApiKey:
      description: Represents an individual Admin API key in an org.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) of when the API key was created
          example: 1711471533
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          example: key_abc
          type: string
        last_used_at:
          description: The Unix timestamp (in seconds) of when the API key was last
            used
          example: 1711471534
          format: int64
          nullable: true
          type: integer
        name:
          description: The name of the API key
          example: Administration Key
          type: string
        object:
          description: The object type, which is always `organization.admin_api_key`
          example: organization.admin_api_key
          type: string
          x-stainless-const: true
        owner:
          properties:
            created_at:
              description: The Unix timestamp (in seconds) of when the user was created
              example: 1711471533
              format: int64
              type: integer
            id:
              description: The identifier, which can be referenced in API endpoints
              example: sa_456
              type: string
            name:
              description: The name of the user
              example: My Service Account
              type: string
            object:
              description: The object type, which is always organization.user
              example: organization.user
              type: string
            role:
              description: Always `owner`
              example: owner
              type: string
            type:
              description: Always `user`
              example: user
              type: string
          type: object
        redacted_value:
          description: The redacted value of the API key
          example: sk-admin...def
          type: string
        value:
          description: The value of the API key. Only shown on create.
          example: sk-admin-1234abcd
          type: string
      required:
      - object
      - redacted_value
      - name
      - created_at
      - last_used_at
      - id
      - owner
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"organization.admin_api_key\",\n  \"id\": \"key_abc\"\
          ,\n  \"name\": \"Main Admin Key\",\n  \"redacted_value\": \"sk-admin...xyz\"\
          ,\n  \"created_at\": 1711471533,\n  \"last_used_at\": 1711471534,\n  \"\
          owner\": {\n    \"type\": \"user\",\n    \"object\": \"organization.user\"\
          ,\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"created_at\"\
          : 1711471533,\n    \"role\": \"owner\"\n  }\n}\n"
        name: The admin API key object
    Annotation:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/FileCitationBody'
      - $ref: '#/components/schemas/UrlCitationBody'
      - $ref: '#/components/schemas/ContainerFileCitationBody'
      - $ref: '#/components/schemas/FilePath'
    ApiKeyList:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AdminApiKey'
          type: array
        first_id:
          example: key_abc
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: key_xyz
          type: string
        object:
          example: list
          type: string
      type: object
    ApproximateLocation:
      properties:
        city:
          description: Free text input for the city of the user, e.g. `San Francisco`.
          nullable: true
          type: string
        country:
          description: The two-letter [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)
            of the user, e.g. `US`.
          nullable: true
          type: string
        region:
          description: Free text input for the region of the user, e.g. `California`.
          nullable: true
          type: string
        timezone:
          description: The [IANA timezone](https://timeapi.io/documentation/iana-timezones)
            of the user, e.g. `America/Los_Angeles`.
          nullable: true
          type: string
        type:
          default: approximate
          description: The type of location approximation. Always `approximate`.
          enum:
          - approximate
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
    AssistantObject:
      description: Represents an `assistant` that can call the model and use tools.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the assistant was
            created.
          format: int64
          type: integer
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          maxLength: 512
          nullable: true
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          type: string
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          maxLength: 256
          nullable: true
          type: string
        object:
          description: The object type, which is always `assistant`.
          enum:
          - assistant
          type: string
          x-stainless-const: true
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter`` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: 'The ID of the [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      required:
      - id
      - object
      - created_at
      - name
      - description
      - model
      - instructions
      - tools
      - metadata
      title: Assistant
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"asst_abc123\",\n  \"object\": \"assistant\",\n  \"\
          created_at\": 1698984975,\n  \"name\": \"Math Tutor\",\n  \"description\"\
          : null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are a personal\
          \ math tutor. When asked a question, write and run Python code to answer\
          \ the question.\",\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\
          \n    }\n  ],\n  \"metadata\": {},\n  \"top_p\": 1.0,\n  \"temperature\"\
          : 1.0,\n  \"response_format\": \"auto\"\n}\n"
        name: The assistant object
    AssistantStreamEvent:
      description: 'Represents an event emitted when streaming a Run.


        Each event in a server-sent events stream has an `event` and `data` property:


        ```

        event: thread.created

        data: {"id": "thread_123", "object": "thread", ...}

        ```


        We emit events whenever a new object is created, transitions to a new state,
        or is being

        streamed in parts (deltas). For example, we emit `thread.run.created` when
        a new run

        is created, `thread.run.completed` when a run completes, and so on. When an
        Assistant chooses

        to create a message during a run, we emit a `thread.message.created event`,
        a

        `thread.message.in_progress` event, many `thread.message.delta` events, and
        finally a

        `thread.message.completed` event.


        We may add additional events over time, so we recommend handling unknown events
        gracefully

        in your code. See the [Assistants API quickstart](/docs/assistants/overview)
        to learn how to

        integrate the Assistants API with streaming.

        '
      oneOf:
      - $ref: '#/components/schemas/ThreadStreamEvent'
      - $ref: '#/components/schemas/RunStreamEvent'
      - $ref: '#/components/schemas/RunStepStreamEvent'
      - $ref: '#/components/schemas/MessageStreamEvent'
      - $ref: '#/components/schemas/ErrorEvent'
      - $ref: '#/components/schemas/DoneEvent'
      x-oaiMeta:
        beta: true
        name: Assistant stream events
    AssistantSupportedModels:
      enum:
      - gpt-4.1
      - gpt-4.1-mini
      - gpt-4.1-nano
      - gpt-4.1-2025-04-14
      - gpt-4.1-mini-2025-04-14
      - gpt-4.1-nano-2025-04-14
      - o3-mini
      - o3-mini-2025-01-31
      - o1
      - o1-2024-12-17
      - gpt-4o
      - gpt-4o-2024-11-20
      - gpt-4o-2024-08-06
      - gpt-4o-2024-05-13
      - gpt-4o-mini
      - gpt-4o-mini-2024-07-18
      - gpt-4.5-preview
      - gpt-4.5-preview-2025-02-27
      - gpt-4-turbo
      - gpt-4-turbo-2024-04-09
      - gpt-4-0125-preview
      - gpt-4-turbo-preview
      - gpt-4-1106-preview
      - gpt-4-vision-preview
      - gpt-4
      - gpt-4-0314
      - gpt-4-0613
      - gpt-4-32k
      - gpt-4-32k-0314
      - gpt-4-32k-0613
      - gpt-3.5-turbo
      - gpt-3.5-turbo-16k
      - gpt-3.5-turbo-0613
      - gpt-3.5-turbo-1106
      - gpt-3.5-turbo-0125
      - gpt-3.5-turbo-16k-0613
      type: string
    AssistantToolsCode:
      properties:
        type:
          description: 'The type of tool being defined: `code_interpreter`'
          enum:
          - code_interpreter
          type: string
          x-stainless-const: true
      required:
      - type
      title: Code interpreter tool
      type: object
    AssistantToolsFileSearch:
      properties:
        file_search:
          description: Overrides for the file search tool.
          properties:
            max_num_results:
              description: 'The maximum number of results the file search tool should
                output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`.
                This number should be between 1 and 50 inclusive.


                Note that the file search tool may output fewer than `max_num_results`
                results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings)
                for more information.

                '
              format: int64
              maximum: 50
              minimum: 1
              type: integer
            ranking_options:
              $ref: '#/components/schemas/FileSearchRankingOptions'
          type: object
        type:
          description: 'The type of tool being defined: `file_search`'
          enum:
          - file_search
          type: string
          x-stainless-const: true
      required:
      - type
      title: FileSearch tool
      type: object
    AssistantToolsFileSearchTypeOnly:
      properties:
        type:
          description: 'The type of tool being defined: `file_search`'
          enum:
          - file_search
          type: string
          x-stainless-const: true
      required:
      - type
      title: FileSearch tool
      type: object
    AssistantToolsFunction:
      properties:
        function:
          $ref: '#/components/schemas/FunctionObject'
        type:
          description: 'The type of tool being defined: `function`'
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - type
      - function
      title: Function tool
      type: object
    AssistantsApiResponseFormatOption:
      description: 'Specifies the format that the model must output. Compatible with
        [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4),
        and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.


        Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured
        Outputs which ensures the model will match your supplied JSON schema. Learn
        more in the [Structured Outputs guide](/docs/guides/structured-outputs).


        Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the
        message the model generates is valid JSON.


        **Important:** when using JSON mode, you **must** also instruct the model
        to produce JSON yourself via a system or user message. Without this, the model
        may generate an unending stream of whitespace until the generation reaches
        the token limit, resulting in a long-running and seemingly "stuck" request.
        Also note that the message content may be partially cut off if `finish_reason="length"`,
        which indicates the generation exceeded `max_tokens` or the conversation exceeded
        the max context length.

        '
      oneOf:
      - description: '`auto` is the default value

          '
        enum:
        - auto
        type: string
        x-stainless-const: true
      - $ref: '#/components/schemas/ResponseFormatText'
      - $ref: '#/components/schemas/ResponseFormatJsonObject'
      - $ref: '#/components/schemas/ResponseFormatJsonSchema'
    AssistantsApiToolChoiceOption:
      description: 'Controls which (if any) tool is called by the model.

        `none` means the model will not call any tools and instead generates a message.

        `auto` is the default value and means the model can pick between generating
        a message or calling one or more tools.

        `required` means the model must call one or more tools before responding to
        the user.

        Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function",
        "function": {"name": "my_function"}}` forces the model to call that tool.

        '
      oneOf:
      - description: '`none` means the model will not call any tools and instead generates
          a message. `auto` means the model can pick between generating a message
          or calling one or more tools. `required` means the model must call one or
          more tools before responding to the user.

          '
        enum:
        - none
        - auto
        - required
        type: string
      - $ref: '#/components/schemas/AssistantsNamedToolChoice'
    AssistantsNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to
        call a specific tool.
      properties:
        function:
          properties:
            name:
              description: The name of the function to call.
              type: string
          required:
          - name
          type: object
        type:
          description: The type of the tool. If type is `function`, the function name
            must be set
          enum:
          - function
          - code_interpreter
          - file_search
          type: string
      required:
      - type
      type: object
    AudioResponseFormat:
      default: json
      description: 'The format of the output, in one of these options: `json`, `text`,
        `srt`, `verbose_json`, or `vtt`. For `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`,
        the only supported format is `json`.

        '
      enum:
      - json
      - text
      - srt
      - verbose_json
      - vtt
      type: string
    AuditLog:
      description: A log of a user action or configuration change within this organization.
      properties:
        actor:
          $ref: '#/components/schemas/AuditLogActor'
        api_key.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the API key.
              properties:
                scopes:
                  description: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                  items:
                    type: string
                  type: array
              type: object
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        api_key.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        api_key.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the API key.
              properties:
                scopes:
                  description: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                  items:
                    type: string
                  type: array
              type: object
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        certificate.created:
          description: The details for events with this `type`.
          properties:
            id:
              description: The certificate ID.
              type: string
            name:
              description: The name of the certificate.
              type: string
          type: object
        certificate.deleted:
          description: The details for events with this `type`.
          properties:
            certificate:
              description: The certificate content in PEM format.
              type: string
            id:
              description: The certificate ID.
              type: string
            name:
              description: The name of the certificate.
              type: string
          type: object
        certificate.updated:
          description: The details for events with this `type`.
          properties:
            id:
              description: The certificate ID.
              type: string
            name:
              description: The name of the certificate.
              type: string
          type: object
        certificates.activated:
          description: The details for events with this `type`.
          properties:
            certificates:
              items:
                properties:
                  id:
                    description: The certificate ID.
                    type: string
                  name:
                    description: The name of the certificate.
                    type: string
                type: object
              type: array
          type: object
        certificates.deactivated:
          description: The details for events with this `type`.
          properties:
            certificates:
              items:
                properties:
                  id:
                    description: The certificate ID.
                    type: string
                  name:
                    description: The name of the certificate.
                    type: string
                type: object
              type: array
          type: object
        checkpoint_permission.created:
          description: The project and fine-tuned model checkpoint that the checkpoint
            permission was created for.
          properties:
            data:
              description: The payload used to create the checkpoint permission.
              properties:
                fine_tuned_model_checkpoint:
                  description: The ID of the fine-tuned model checkpoint.
                  type: string
                project_id:
                  description: The ID of the project that the checkpoint permission
                    was created for.
                  type: string
              type: object
            id:
              description: The ID of the checkpoint permission.
              type: string
          type: object
        checkpoint_permission.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The ID of the checkpoint permission.
              type: string
          type: object
        effective_at:
          description: The Unix timestamp (in seconds) of the event.
          format: int64
          type: integer
        id:
          description: The ID of this log.
          type: string
        invite.accepted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The ID of the invite.
              type: string
          type: object
        invite.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The ID of the invite.
              type: string
          type: object
        invite.sent:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the invite.
              properties:
                email:
                  description: The email invited to the organization.
                  type: string
                role:
                  description: The role the email was invited to be. Is either `owner`
                    or `member`.
                  type: string
              type: object
            id:
              description: The ID of the invite.
              type: string
          type: object
        login.failed:
          description: The details for events with this `type`.
          properties:
            error_code:
              description: The error code of the failure.
              type: string
            error_message:
              description: The error message of the failure.
              type: string
          type: object
        logout.failed:
          description: The details for events with this `type`.
          properties:
            error_code:
              description: The error code of the failure.
              type: string
            error_message:
              description: The error message of the failure.
              type: string
          type: object
        organization.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the organization settings.
              properties:
                api_call_logging:
                  description: How your organization logs data from supported API
                    calls. One of `disabled`, `enabled_per_call`, `enabled_for_all_projects`,
                    or `enabled_for_selected_projects`
                  type: string
                api_call_logging_project_ids:
                  description: The list of project ids if api_call_logging is set
                    to `enabled_for_selected_projects`
                  type: string
                description:
                  description: The organization description.
                  type: string
                name:
                  description: The organization name.
                  type: string
                threads_ui_visibility:
                  description: Visibility of the threads page which shows messages
                    created with the Assistants API and Playground. One of `ANY_ROLE`,
                    `OWNERS`, or `NONE`.
                  type: string
                title:
                  description: The organization title.
                  type: string
                usage_dashboard_visibility:
                  description: Visibility of the usage dashboard which shows activity
                    and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                  type: string
              type: object
            id:
              description: The organization ID.
              type: string
          type: object
        project:
          description: The project that the action was scoped to. Absent for actions
            not scoped to projects.
          properties:
            id:
              description: The project ID.
              type: string
            name:
              description: The project title.
              type: string
          type: object
        project.archived:
          description: The details for events with this `type`.
          properties:
            id:
              description: The project ID.
              type: string
          type: object
        project.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the project.
              properties:
                name:
                  description: The project name.
                  type: string
                title:
                  description: The title of the project as seen on the dashboard.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
        project.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the project.
              properties:
                title:
                  description: The title of the project as seen on the dashboard.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
        rate_limit.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The rate limit ID
              type: string
          type: object
        rate_limit.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the rate limits.
              properties:
                batch_1_day_max_input_tokens:
                  description: The maximum batch input tokens per day. Only relevant
                    for certain models.
                  format: int64
                  type: integer
                max_audio_megabytes_per_1_minute:
                  description: The maximum audio megabytes per minute. Only relevant
                    for certain models.
                  format: int64
                  type: integer
                max_images_per_1_minute:
                  description: The maximum images per minute. Only relevant for certain
                    models.
                  format: int64
                  type: integer
                max_requests_per_1_day:
                  description: The maximum requests per day. Only relevant for certain
                    models.
                  format: int64
                  type: integer
                max_requests_per_1_minute:
                  description: The maximum requests per minute.
                  format: int64
                  type: integer
                max_tokens_per_1_minute:
                  description: The maximum tokens per minute.
                  format: int64
                  type: integer
              type: object
            id:
              description: The rate limit ID
              type: string
          type: object
        service_account.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the service account.
              properties:
                role:
                  description: The role of the service account. Is either `owner`
                    or `member`.
                  type: string
              type: object
            id:
              description: The service account ID.
              type: string
          type: object
        service_account.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The service account ID.
              type: string
          type: object
        service_account.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to updated the service account.
              properties:
                role:
                  description: The role of the service account. Is either `owner`
                    or `member`.
                  type: string
              type: object
            id:
              description: The service account ID.
              type: string
          type: object
        type:
          $ref: '#/components/schemas/AuditLogEventType'
        user.added:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to add the user to the project.
              properties:
                role:
                  description: The role of the user. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The user ID.
              type: string
          type: object
        user.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The user ID.
              type: string
          type: object
        user.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the user.
              properties:
                role:
                  description: The role of the user. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
      required:
      - id
      - type
      - effective_at
      - actor
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"req_xxx_20240101\",\n    \"type\": \"api_key.created\"\
          ,\n    \"effective_at\": 1720804090,\n    \"actor\": {\n        \"type\"\
          : \"session\",\n        \"session\": {\n            \"user\": {\n      \
          \          \"id\": \"user-xxx\",\n                \"email\": \"user@example.com\"\
          \n            },\n            \"ip_address\": \"127.0.0.1\",\n         \
          \   \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\
          \ (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n        }\n\
          \    },\n    \"api_key.created\": {\n        \"id\": \"key_xxxx\",\n   \
          \     \"data\": {\n            \"scopes\": [\"resource.operation\"]\n  \
          \      }\n    }\n}\n"
        name: The audit log object
    AuditLogActor:
      description: The actor who performed the audit logged action.
      properties:
        api_key:
          $ref: '#/components/schemas/AuditLogActorApiKey'
        session:
          $ref: '#/components/schemas/AuditLogActorSession'
        type:
          description: The type of actor. Is either `session` or `api_key`.
          enum:
          - session
          - api_key
          type: string
      type: object
    AuditLogActorApiKey:
      description: The API Key used to perform the audit logged action.
      properties:
        id:
          description: The tracking id of the API key.
          type: string
        service_account:
          $ref: '#/components/schemas/AuditLogActorServiceAccount'
        type:
          description: The type of API key. Can be either `user` or `service_account`.
          enum:
          - user
          - service_account
          type: string
        user:
          $ref: '#/components/schemas/AuditLogActorUser'
      type: object
    AuditLogActorServiceAccount:
      description: The service account that performed the audit logged action.
      properties:
        id:
          description: The service account id.
          type: string
      type: object
    AuditLogActorSession:
      description: The session in which the audit logged action was performed.
      properties:
        ip_address:
          description: The IP address from which the action was performed.
          type: string
        user:
          $ref: '#/components/schemas/AuditLogActorUser'
      type: object
    AuditLogActorUser:
      description: The user who performed the audit logged action.
      properties:
        email:
          description: The user email.
          type: string
        id:
          description: The user id.
          type: string
      type: object
    AuditLogEventType:
      description: The event type.
      enum:
      - api_key.created
      - api_key.updated
      - api_key.deleted
      - checkpoint_permission.created
      - checkpoint_permission.deleted
      - invite.sent
      - invite.accepted
      - invite.deleted
      - login.succeeded
      - login.failed
      - logout.succeeded
      - logout.failed
      - organization.updated
      - project.created
      - project.updated
      - project.archived
      - service_account.created
      - service_account.updated
      - service_account.deleted
      - rate_limit.updated
      - rate_limit.deleted
      - user.added
      - user.updated
      - user.deleted
      type: string
    AutoChunkingStrategyRequestParam:
      additionalProperties: false
      description: The default strategy. This strategy currently uses a `max_chunk_size_tokens`
        of `800` and `chunk_overlap_tokens` of `400`.
      properties:
        type:
          description: Always `auto`.
          enum:
          - auto
          type: string
          x-stainless-const: true
      required:
      - type
      title: Auto Chunking Strategy
      type: object
    Batch:
      properties:
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the batch was cancelled.
          format: int64
          type: integer
        cancelling_at:
          description: The Unix timestamp (in seconds) for when the batch started
            cancelling.
          format: int64
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the batch was completed.
          format: int64
          type: integer
        completion_window:
          description: The time frame within which the batch should be processed.
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the batch was created.
          format: int64
          type: integer
        endpoint:
          description: The OpenAI API endpoint used by the batch.
          type: string
        error_file_id:
          description: The ID of the file containing the outputs of requests with
            errors.
          type: string
        errors:
          properties:
            data:
              items:
                properties:
                  code:
                    description: An error code identifying the error type.
                    type: string
                  line:
                    description: The line number of the input file where the error
                      occurred, if applicable.
                    format: int64
                    nullable: true
                    type: integer
                  message:
                    description: A human-readable message providing more details about
                      the error.
                    type: string
                  param:
                    description: The name of the parameter that caused the error,
                      if applicable.
                    nullable: true
                    type: string
                type: object
              type: array
            object:
              description: The object type, which is always `list`.
              type: string
          type: object
        expired_at:
          description: The Unix timestamp (in seconds) for when the batch expired.
          format: int64
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the batch will expire.
          format: int64
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the batch failed.
          format: int64
          type: integer
        finalizing_at:
          description: The Unix timestamp (in seconds) for when the batch started
            finalizing.
          format: int64
          type: integer
        id:
          type: string
        in_progress_at:
          description: The Unix timestamp (in seconds) for when the batch started
            processing.
          format: int64
          type: integer
        input_file_id:
          description: The ID of the input file for the batch.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `batch`.
          enum:
          - batch
          type: string
          x-stainless-const: true
        output_file_id:
          description: The ID of the file containing the outputs of successfully executed
            requests.
          type: string
        request_counts:
          description: The request counts for different statuses within the batch.
          properties:
            completed:
              description: Number of requests that have been completed successfully.
              format: int64
              type: integer
            failed:
              description: Number of requests that have failed.
              format: int64
              type: integer
            total:
              description: Total number of requests in the batch.
              format: int64
              type: integer
          required:
          - total
          - completed
          - failed
          type: object
        status:
          description: The current status of the batch.
          enum:
          - validating
          - failed
          - in_progress
          - finalizing
          - completed
          - expired
          - cancelling
          - cancelled
          type: string
      required:
      - id
      - object
      - endpoint
      - input_file_id
      - completion_window
      - status
      - created_at
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"batch_abc123\",\n  \"object\": \"batch\",\n  \"endpoint\"\
          : \"/v1/completions\",\n  \"errors\": null,\n  \"input_file_id\": \"file-abc123\"\
          ,\n  \"completion_window\": \"24h\",\n  \"status\": \"completed\",\n  \"\
          output_file_id\": \"file-cvaTdG\",\n  \"error_file_id\": \"file-HOWS94\"\
          ,\n  \"created_at\": 1711471533,\n  \"in_progress_at\": 1711471538,\n  \"\
          expires_at\": 1711557933,\n  \"finalizing_at\": 1711493133,\n  \"completed_at\"\
          : 1711493163,\n  \"failed_at\": null,\n  \"expired_at\": null,\n  \"cancelling_at\"\
          : null,\n  \"cancelled_at\": null,\n  \"request_counts\": {\n    \"total\"\
          : 100,\n    \"completed\": 95,\n    \"failed\": 5\n  },\n  \"metadata\"\
          : {\n    \"customer_id\": \"user_123456789\",\n    \"batch_description\"\
          : \"Nightly eval job\",\n  }\n}\n"
        name: The batch object
    BatchRequestInput:
      description: The per-line object of the batch input file
      properties:
        custom_id:
          description: A developer-provided per-request id that will be used to match
            outputs to inputs. Must be unique for each request in a batch.
          type: string
        method:
          description: The HTTP method to be used for the request. Currently only
            `POST` is supported.
          enum:
          - POST
          type: string
          x-stainless-const: true
        url:
          description: The OpenAI API relative URL to be used for the request. Currently
            `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
          type: string
      type: object
      x-oaiMeta:
        example: '{"custom_id": "request-1", "method": "POST", "url": "/v1/chat/completions",
          "body": {"model": "gpt-4o-mini", "messages": [{"role": "system", "content":
          "You are a helpful assistant."}, {"role": "user", "content": "What is 2+2?"}]}}

          '
        name: The request input object
    BatchRequestOutput:
      description: The per-line object of the batch output and error files
      properties:
        custom_id:
          description: A developer-provided per-request id that will be used to match
            outputs to inputs.
          type: string
        error:
          description: For requests that failed with a non-HTTP error, this will contain
            more information on the cause of the failure.
          nullable: true
          properties:
            code:
              description: A machine-readable error code.
              type: string
            message:
              description: A human-readable error message.
              type: string
          type: object
        id:
          type: string
        response:
          nullable: true
          properties:
            body:
              description: The JSON body of the response
              type: object
              x-oaiTypeLabel: map
            request_id:
              description: An unique identifier for the OpenAI API request. Please
                include this request ID when contacting support.
              type: string
            status_code:
              description: The HTTP status code of the response
              format: int64
              type: integer
          type: object
      type: object
      x-oaiMeta:
        example: '{"id": "batch_req_wnaDys", "custom_id": "request-2", "response":
          {"status_code": 200, "request_id": "req_c187b3", "body": {"id": "chatcmpl-9758Iw",
          "object": "chat.completion", "created": 1711475054, "model": "gpt-4o-mini",
          "choices": [{"index": 0, "message": {"role": "assistant", "content": "2
          + 2 equals 4."}, "finish_reason": "stop"}], "usage": {"prompt_tokens": 24,
          "completion_tokens": 15, "total_tokens": 39}, "system_fingerprint": null}},
          "error": null}

          '
        name: The request output object
    Certificate:
      description: Represents an individual `certificate` uploaded to the organization.
      properties:
        active:
          description: Whether the certificate is currently active at the specified
            scope. Not returned when getting details for a specific certificate.
          type: boolean
        certificate_details:
          properties:
            content:
              description: The content of the certificate in PEM format.
              type: string
            expires_at:
              description: The Unix timestamp (in seconds) of when the certificate
                expires.
              format: int64
              type: integer
            valid_at:
              description: The Unix timestamp (in seconds) of when the certificate
                becomes valid.
              format: int64
              type: integer
          type: object
        created_at:
          description: The Unix timestamp (in seconds) of when the certificate was
            uploaded.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the certificate.
          type: string
        object:
          description: 'The object type.


            - If creating, updating, or getting a specific certificate, the object
            type is `certificate`.

            - If listing, activating, or deactivating certificates for the organization,
            the object type is `organization.certificate`.

            - If listing, activating, or deactivating certificates for a project,
            the object type is `organization.project.certificate`.

            '
          enum:
          - certificate
          - organization.certificate
          - organization.project.certificate
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - name
      - created_at
      - certificate_details
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"certificate\",\n  \"id\": \"cert_abc\",\n  \"\
          name\": \"My Certificate\",\n  \"created_at\": 1234567,\n  \"certificate_details\"\
          : {\n    \"valid_at\": 1234567,\n    \"expires_at\": 12345678,\n    \"content\"\
          : \"-----BEGIN CERTIFICATE----- MIIGAjCCA...6znFlOW+ -----END CERTIFICATE-----\"\
          \n  }\n}\n"
        name: The certificate object
    ChatCompletionDeleted:
      properties:
        deleted:
          description: Whether the chat completion was deleted.
          type: boolean
        id:
          description: The ID of the chat completion that was deleted.
          type: string
        object:
          description: The type of object being deleted.
          enum:
          - chat.completion.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    ChatCompletionFunctionCallOption:
      description: 'Specifying a particular function via `{"name": "my_function"}`
        forces the model to call that function.

        '
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
      - name
      type: object
    ChatCompletionFunctions:
      deprecated: true
      properties:
        description:
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      required:
      - name
      type: object
    ChatCompletionList:
      description: 'An object representing a list of Chat Completions.

        '
      properties:
        data:
          description: 'An array of chat completion objects.

            '
          items:
            $ref: '#/components/schemas/CreateChatCompletionResponse'
          type: array
        first_id:
          description: The identifier of the first chat completion in the data array.
          type: string
        has_more:
          description: Indicates whether there are more Chat Completions available.
          type: boolean
        last_id:
          description: The identifier of the last chat completion in the data array.
          type: string
        object:
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      title: ChatCompletionList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
          : \"chat.completion\",\n      \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\"\
          ,\n      \"model\": \"gpt-4o-2024-08-06\",\n      \"created\": 1738960610,\n\
          \      \"request_id\": \"req_ded8ab984ec4bf840f37566c1011c417\",\n     \
          \ \"tool_choice\": null,\n      \"usage\": {\n        \"total_tokens\":\
          \ 31,\n        \"completion_tokens\": 18,\n        \"prompt_tokens\": 13\n\
          \      },\n      \"seed\": 4944116822809979520,\n      \"top_p\": 1.0,\n\
          \      \"temperature\": 1.0,\n      \"presence_penalty\": 0.0,\n      \"\
          frequency_penalty\": 0.0,\n      \"system_fingerprint\": \"fp_50cad350e4\"\
          ,\n      \"input_user\": null,\n      \"service_tier\": \"default\",\n \
          \     \"tools\": null,\n      \"metadata\": {},\n      \"choices\": [\n\
          \        {\n          \"index\": 0,\n          \"message\": {\n        \
          \    \"content\": \"Mind of circuits hum,  \\nLearning patterns in silence\u2014\
          \  \\nFuture's quiet spark.\",\n            \"role\": \"assistant\",\n \
          \           \"tool_calls\": null,\n            \"function_call\": null\n\
          \          },\n          \"finish_reason\": \"stop\",\n          \"logprobs\"\
          : null\n        }\n      ],\n      \"response_format\": null\n    }\n  ],\n\
          \  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"last_id\"\
          : \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"has_more\": false\n}\n"
        group: chat
        name: The chat completion list object
    ChatCompletionMessageList:
      description: 'An object representing a list of chat completion messages.

        '
      properties:
        data:
          description: 'An array of chat completion message objects.

            '
          items:
            allOf:
            - $ref: '#/components/schemas/ChatCompletionResponseMessage'
            - properties:
                id:
                  description: The identifier of the chat message.
                  type: string
              required:
              - id
              type: object
          type: array
        first_id:
          description: The identifier of the first chat message in the data array.
          type: string
        has_more:
          description: Indicates whether there are more chat messages available.
          type: boolean
        last_id:
          description: The identifier of the last chat message in the data array.
          type: string
        object:
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      title: ChatCompletionMessageList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\":\
          \ \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n      \"role\": \"user\"\
          ,\n      \"content\": \"write a haiku about ai\",\n      \"name\": null,\n\
          \      \"content_parts\": null\n    }\n  ],\n  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\"\
          ,\n  \"last_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n  \"has_more\"\
          : false\n}\n"
        group: chat
        name: The chat completion message list object
    ChatCompletionMessageToolCall:
      properties:
        function:
          description: The function that the model called.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
          - name
          - arguments
          type: object
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - function
      type: object
    ChatCompletionMessageToolCallChunk:
      properties:
        function:
          properties:
            arguments:
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        id:
          description: The ID of the tool call.
          type: string
        index:
          format: int64
          type: integer
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - index
      type: object
    ChatCompletionMessageToolCalls:
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      type: array
    ChatCompletionModalities:
      description: 'Output types that you would like the model to generate for this
        request.

        Most models are capable of generating text, which is the default:


        `["text"]`


        The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio).
        To

        request that this model generate both text and audio responses, you can

        use:


        `["text", "audio"]`

        '
      items:
        enum:
        - text
        - audio
        type: string
      nullable: true
      type: array
    ChatCompletionNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to
        call a specific function.
      properties:
        function:
          properties:
            name:
              description: The name of the function to call.
              type: string
          required:
          - name
          type: object
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - type
      - function
      type: object
    ChatCompletionRequestAssistantMessage:
      description: 'Messages sent by the model in response to user messages.

        '
      properties:
        audio:
          description: "Data about a previous audio response from the model. \n[Learn\
            \ more](/docs/guides/audio).\n"
          nullable: true
          properties:
            id:
              description: 'Unique identifier for a previous audio response from the
                model.

                '
              type: string
          required:
          - id
          type: object
        content:
          description: 'The contents of the assistant message. Required unless `tool_calls`
            or `function_call` is specified.

            '
          nullable: true
          oneOf:
          - description: The contents of the assistant message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type. Can be one
              or more of type `text`, or exactly one of type `refusal`.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestAssistantMessageContentPart'
            minItems: 1
            title: Array of content parts
            type: array
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
          - arguments
          - name
          type: object
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
        refusal:
          description: The refusal message by the assistant.
          nullable: true
          type: string
        role:
          description: The role of the messages author, in this case `assistant`.
          enum:
          - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
      - role
      title: Assistant message
      type: object
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartRefusal'
    ChatCompletionRequestDeveloperMessage:
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, `developer` messages

        replace the previous `system` messages.

        '
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
          - description: The contents of the developer message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type. For developer
              messages, only type `text` is supported.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
            title: Array of content parts
            type: array
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `developer`.
          enum:
          - developer
          type: string
          x-stainless-const: true
      required:
      - content
      - role
      title: Developer message
      type: object
    ChatCompletionRequestFunctionMessage:
      deprecated: true
      properties:
        content:
          description: The contents of the function message.
          nullable: true
          type: string
        name:
          description: The name of the function to call.
          type: string
        role:
          description: The role of the messages author, in this case `function`.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - role
      - content
      - name
      title: Function message
      type: object
    ChatCompletionRequestMessage:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
      - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
    ChatCompletionRequestMessageContentPartAudio:
      description: 'Learn about [audio inputs](/docs/guides/audio).

        '
      properties:
        input_audio:
          properties:
            data:
              description: Base64 encoded audio data.
              type: string
            format:
              description: 'The format of the encoded audio data. Currently supports
                "wav" and "mp3".

                '
              enum:
              - wav
              - mp3
              type: string
          required:
          - data
          - format
          type: object
        type:
          description: The type of the content part. Always `input_audio`.
          enum:
          - input_audio
          type: string
          x-stainless-const: true
      required:
      - type
      - input_audio
      title: Audio content part
      type: object
    ChatCompletionRequestMessageContentPartFile:
      description: 'Learn about [file inputs](/docs/guides/text) for text generation.

        '
      properties:
        file:
          properties:
            file_data:
              description: "The base64 encoded file data, used when passing the file\
                \ to the model \nas a string.\n"
              type: string
            file_id:
              description: 'The ID of an uploaded file to use as input.

                '
              type: string
            filename:
              description: "The name of the file, used when passing the file to the\
                \ model as a \nstring.\n"
              type: string
          type: object
        type:
          description: The type of the content part. Always `file`.
          enum:
          - file
          type: string
          x-stainless-const: true
      required:
      - type
      - file
      title: File content part
      type: object
    ChatCompletionRequestMessageContentPartImage:
      description: 'Learn about [image inputs](/docs/guides/vision).

        '
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. Learn more in
                the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
              - auto
              - low
              - high
              type: string
            url:
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
              type: string
          required:
          - url
          type: object
        type:
          description: The type of the content part.
          enum:
          - image_url
          type: string
          x-stainless-const: true
      required:
      - type
      - image_url
      title: Image content part
      type: object
    ChatCompletionRequestMessageContentPartRefusal:
      properties:
        refusal:
          description: The refusal message generated by the model.
          type: string
        type:
          description: The type of the content part.
          enum:
          - refusal
          type: string
          x-stainless-const: true
      required:
      - type
      - refusal
      title: Refusal content part
      type: object
    ChatCompletionRequestMessageContentPartText:
      description: 'Learn about [text inputs](/docs/guides/text-generation).

        '
      properties:
        text:
          description: The text content.
          type: string
        type:
          description: The type of the content part.
          enum:
          - text
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      title: Text content part
      type: object
    ChatCompletionRequestSystemMessage:
      description: 'Developer-provided instructions that the model should follow,
        regardless of

        messages sent by the user. With o1 models and newer, use `developer` messages

        for this purpose instead.

        '
      properties:
        content:
          description: The contents of the system message.
          oneOf:
          - description: The contents of the system message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type. For system
              messages, only type `text` is supported.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestSystemMessageContentPart'
            minItems: 1
            title: Array of content parts
            type: array
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `system`.
          enum:
          - system
          type: string
          x-stainless-const: true
      required:
      - content
      - role
      title: System message
      type: object
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestToolMessage:
      properties:
        content:
          description: The contents of the tool message.
          oneOf:
          - description: The contents of the tool message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type. For tool messages,
              only type `text` is supported.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestToolMessageContentPart'
            minItems: 1
            title: Array of content parts
            type: array
        role:
          description: The role of the messages author, in this case `tool`.
          enum:
          - tool
          type: string
          x-stainless-const: true
        tool_call_id:
          description: Tool call that this message is responding to.
          type: string
      required:
      - role
      - content
      - tool_call_id
      title: Tool message
      type: object
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
    ChatCompletionRequestUserMessage:
      description: 'Messages sent by an end user, containing prompts or additional
        context

        information.

        '
      properties:
        content:
          description: 'The contents of the user message.

            '
          oneOf:
          - description: The text contents of the message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text, image, or audio inputs.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestUserMessageContentPart'
            minItems: 1
            title: Array of content parts
            type: array
        name:
          description: An optional name for the participant. Provides the model information
            to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `user`.
          enum:
          - user
          type: string
          x-stainless-const: true
      required:
      - content
      - role
      title: User message
      type: object
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartAudio'
      - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartFile'
    ChatCompletionResponseMessage:
      description: A chat completion message generated by the model.
      properties:
        annotations:
          description: 'Annotations for the message, when applicable, as when using
            the

            [web search tool](/docs/guides/tools-web-search?api-mode=chat).

            '
          items:
            description: 'A URL citation when using web search.

              '
            properties:
              type:
                description: The type of the URL citation. Always `url_citation`.
                enum:
                - url_citation
                type: string
                x-stainless-const: true
              url_citation:
                description: A URL citation when using web search.
                properties:
                  end_index:
                    description: The index of the last character of the URL citation
                      in the message.
                    format: int64
                    type: integer
                  start_index:
                    description: The index of the first character of the URL citation
                      in the message.
                    format: int64
                    type: integer
                  title:
                    description: The title of the web resource.
                    type: string
                  url:
                    description: The URL of the web resource.
                    type: string
                required:
                - end_index
                - start_index
                - url
                - title
                type: object
            required:
            - type
            - url_citation
            type: object
          type: array
        audio:
          description: 'If the audio output modality is requested, this object contains
            data

            about the audio response from the model. [Learn more](/docs/guides/audio).

            '
          nullable: true
          properties:
            data:
              description: 'Base64 encoded audio bytes generated by the model, in
                the format

                specified in the request.

                '
              type: string
            expires_at:
              description: 'The Unix timestamp (in seconds) for when this audio response
                will

                no longer be accessible on the server for use in multi-turn

                conversations.

                '
              format: int64
              type: integer
            id:
              description: Unique identifier for this audio response.
              type: string
            transcript:
              description: Transcript of the audio generated by the model.
              type: string
          required:
          - id
          - expires_at
          - data
          - transcript
          type: object
        content:
          description: The contents of the message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
          - name
          - arguments
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
          - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
      - role
      - content
      - refusal
      type: object
    ChatCompletionRole:
      description: The role of the author of a message
      enum:
      - developer
      - system
      - user
      - assistant
      - tool
      - function
      type: string
    ChatCompletionStreamOptions:
      default: null
      description: 'Options for streaming response. Only set this when you set `stream:
        true`.

        '
      nullable: true
      properties:
        include_usage:
          description: "If set, an additional chunk will be streamed before the `data:\
            \ [DONE]`\nmessage. The `usage` field on this chunk shows the token usage\
            \ statistics\nfor the entire request, and the `choices` field will always\
            \ be an empty\narray. \n\nAll other chunks will also include a `usage`\
            \ field, but with a null\nvalue. **NOTE:** If the stream is interrupted,\
            \ you may not receive the\nfinal usage chunk which contains the total\
            \ token usage for the request.\n"
          type: boolean
      type: object
    ChatCompletionStreamResponseDelta:
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          description: The contents of the chunk message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments
            of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by
                the model in JSON format. Note that the model does not always generate
                valid JSON, and may hallucinate parameters not defined by your function
                schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
          - developer
          - system
          - user
          - assistant
          - tool
          type: string
        tool_calls:
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
          type: array
      type: object
    ChatCompletionTokenLogprob:
      properties:
        bytes:
          description: A list of integers representing the UTF-8 bytes representation
            of the token. Useful in instances where characters are represented by
            multiple tokens and their byte representations must be combined to generate
            the correct text representation. Can be `null` if there is no bytes representation
            for the token.
          items:
            format: int64
            type: integer
          nullable: true
          type: array
        logprob:
          description: The log probability of this token, if it is within the top
            20 most likely tokens. Otherwise, the value `-9999.0` is used to signify
            that the token is very unlikely.
          type: number
        token:
          description: The token.
          type: string
        top_logprobs:
          description: List of the most likely tokens and their log probability, at
            this token position. In rare cases, there may be fewer than the number
            of requested `top_logprobs` returned.
          items:
            properties:
              bytes:
                description: A list of integers representing the UTF-8 bytes representation
                  of the token. Useful in instances where characters are represented
                  by multiple tokens and their byte representations must be combined
                  to generate the correct text representation. Can be `null` if there
                  is no bytes representation for the token.
                items:
                  format: int64
                  type: integer
                nullable: true
                type: array
              logprob:
                description: The log probability of this token, if it is within the
                  top 20 most likely tokens. Otherwise, the value `-9999.0` is used
                  to signify that the token is very unlikely.
                type: number
              token:
                description: The token.
                type: string
            required:
            - token
            - logprob
            - bytes
            type: object
          type: array
      required:
      - token
      - logprob
      - bytes
      - top_logprobs
      type: object
    ChatCompletionTool:
      properties:
        function:
          $ref: '#/components/schemas/FunctionObject'
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - type
      - function
      type: object
    ChatCompletionToolChoiceOption:
      description: 'Controls which (if any) tool is called by the model.

        `none` means the model will not call any tool and instead generates a message.

        `auto` means the model can pick between generating a message or calling one
        or more tools.

        `required` means the model must call one or more tools.

        Specifying a particular tool via `{"type": "function", "function": {"name":
        "my_function"}}` forces the model to call that tool.


        `none` is the default when no tools are present. `auto` is the default if
        tools are present.

        '
      oneOf:
      - description: '`none` means the model will not call any tool and instead generates
          a message. `auto` means the model can pick between generating a message
          or calling one or more tools. `required` means the model must call one or
          more tools.

          '
        enum:
        - none
        - auto
        - required
        type: string
      - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
    ChunkingStrategyRequestParam:
      description: The chunking strategy used to chunk the file(s). If not set, will
        use the `auto` strategy.
      oneOf:
      - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
      - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
      type: object
    Click:
      description: 'A click action.

        '
      properties:
        button:
          description: 'Indicates which mouse button was pressed during the click.
            One of `left`, `right`, `wheel`, `back`, or `forward`.

            '
          enum:
          - left
          - right
          - wheel
          - back
          - forward
          type: string
        type:
          default: click
          description: "Specifies the event type. For a click action, this property\
            \ is \nalways set to `click`.\n"
          enum:
          - click
          type: string
          x-stainless-const: true
        x:
          description: 'The x-coordinate where the click occurred.

            '
          format: int64
          type: integer
        y:
          description: 'The y-coordinate where the click occurred.

            '
          format: int64
          type: integer
      required:
      - type
      - button
      - x
      - y
      title: Click
      type: object
    CodeInterpreterFileOutput:
      description: 'The output of a code interpreter tool call that is a file.

        '
      properties:
        files:
          items:
            properties:
              file_id:
                description: 'The ID of the file.

                  '
                type: string
              mime_type:
                description: 'The MIME type of the file.

                  '
                type: string
            required:
            - mime_type
            - file_id
            type: object
          type: array
        type:
          description: 'The type of the code interpreter file output. Always `files`.

            '
          enum:
          - files
          type: string
          x-stainless-const: true
      required:
      - type
      - files
      title: Code interpreter file output
      type: object
    CodeInterpreterOutputImage:
      description: 'The image output from the code interpreter.

        '
      properties:
        type:
          default: image
          description: The type of the output. Always 'image'.
          enum:
          - image
          type: string
          x-stainless-const: true
        url:
          description: The URL of the image output from the code interpreter.
          type: string
      required:
      - type
      - url
      title: Code interpreter output image
      type: object
    CodeInterpreterOutputLogs:
      description: 'The logs output from the code interpreter.

        '
      properties:
        logs:
          description: The logs output from the code interpreter.
          type: string
        type:
          default: logs
          description: The type of the output. Always 'logs'.
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - type
      - logs
      title: Code interpreter output logs
      type: object
    CodeInterpreterTextOutput:
      description: 'The output of a code interpreter tool call that is text.

        '
      properties:
        logs:
          description: 'The logs of the code interpreter tool call.

            '
          type: string
        type:
          description: 'The type of the code interpreter text output. Always `logs`.

            '
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - type
      - logs
      title: Code interpreter text output
      type: object
    CodeInterpreterTool:
      description: 'A tool that runs Python code to help generate a response to a
        prompt.

        '
      properties:
        container:
          description: 'The code interpreter container. Can be a container ID or an
            object that

            specifies uploaded file IDs to make available to your code.

            '
          oneOf:
          - description: The container ID.
            type: string
          - $ref: '#/components/schemas/CodeInterpreterToolAuto'
        type:
          description: 'The type of the code interpreter tool. Always `code_interpreter`.

            '
          enum:
          - code_interpreter
          type: string
          x-stainless-const: true
      required:
      - type
      - container
      title: Code interpreter
      type: object
    CodeInterpreterToolAuto:
      description: 'Configuration for a code interpreter container. Optionally specify
        the IDs

        of the files to run the code on.

        '
      properties:
        file_ids:
          description: 'An optional list of uploaded files to make available to your
            code.

            '
          items:
            type: string
          type: array
        type:
          description: Always `auto`.
          enum:
          - auto
          type: string
          x-stainless-const: true
      required:
      - type
      title: CodeInterpreterContainerAuto
      type: object
    CodeInterpreterToolCall:
      description: 'A tool call to run code.

        '
      properties:
        code:
          description: 'The code to run, or null if not available.

            '
          nullable: true
          type: string
        container_id:
          description: 'The ID of the container used to run the code.

            '
          type: string
        id:
          description: 'The unique ID of the code interpreter tool call.

            '
          type: string
        outputs:
          description: "The outputs generated by the code interpreter, such as logs\
            \ or images. \nCan be null if no outputs are available.\n"
          discriminator:
            propertyName: type
          items:
            oneOf:
            - $ref: '#/components/schemas/CodeInterpreterOutputLogs'
            - $ref: '#/components/schemas/CodeInterpreterOutputImage'
          nullable: true
          type: array
        status:
          description: 'The status of the code interpreter tool call.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          - interpreting
          - failed
          type: string
        type:
          default: code_interpreter_call
          description: 'The type of the code interpreter tool call. Always `code_interpreter_call`.

            '
          enum:
          - code_interpreter_call
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - status
      - container_id
      - code
      - outputs
      title: Code interpreter tool call
      type: object
    ComparisonFilter:
      additionalProperties: false
      description: 'A filter used to compare a specified attribute key to a given
        value using a defined comparison operation.

        '
      properties:
        key:
          description: The key to compare against the value.
          type: string
        type:
          default: eq
          description: 'Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`,
            `lt`, `lte`.

            - `eq`: equals

            - `ne`: not equal

            - `gt`: greater than

            - `gte`: greater than or equal

            - `lt`: less than

            - `lte`: less than or equal

            '
          enum:
          - eq
          - ne
          - gt
          - gte
          - lt
          - lte
          type: string
        value:
          description: The value to compare against the attribute key; supports string,
            number, or boolean types.
          oneOf:
          - type: string
          - type: number
          - type: boolean
      required:
      - type
      - key
      - value
      title: Comparison Filter
      type: object
      x-oaiMeta:
        name: ComparisonFilter
    CompleteUploadRequest:
      additionalProperties: false
      properties:
        md5:
          description: 'The optional md5 checksum for the file contents to verify
            if the bytes uploaded matches what you expect.

            '
          type: string
        part_ids:
          description: 'The ordered list of Part IDs.

            '
          items:
            type: string
          type: array
      required:
      - part_ids
      type: object
    CompletionUsage:
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          default: 0
          description: Number of tokens in the generated completion.
          format: int64
          type: integer
        completion_tokens_details:
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that appeared in the completion.

                '
              format: int64
              type: integer
            audio_tokens:
              default: 0
              description: Audio input tokens generated by the model.
              format: int64
              type: integer
            reasoning_tokens:
              default: 0
              description: Tokens generated by the model for reasoning.
              format: int64
              type: integer
            rejected_prediction_tokens:
              default: 0
              description: 'When using Predicted Outputs, the number of tokens in
                the

                prediction that did not appear in the completion. However, like

                reasoning tokens, these tokens are still counted in the total

                completion tokens for purposes of billing, output, and context window

                limits.

                '
              format: int64
              type: integer
          type: object
        prompt_tokens:
          default: 0
          description: Number of tokens in the prompt.
          format: int64
          type: integer
        prompt_tokens_details:
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              default: 0
              description: Audio input tokens present in the prompt.
              format: int64
              type: integer
            cached_tokens:
              default: 0
              description: Cached tokens present in the prompt.
              format: int64
              type: integer
          type: object
        total_tokens:
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
          format: int64
          type: integer
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      type: object
    CompoundFilter:
      $recursiveAnchor: true
      additionalProperties: false
      description: Combine multiple filters using `and` or `or`.
      properties:
        filters:
          description: Array of filters to combine. Items can be `ComparisonFilter`
            or `CompoundFilter`.
          items:
            oneOf:
            - $ref: '#/components/schemas/ComparisonFilter'
            - $recursiveRef: '#'
          type: array
        type:
          description: 'Type of operation: `and` or `or`.'
          enum:
          - and
          - or
          type: string
      required:
      - type
      - filters
      title: Compound Filter
      type: object
      x-oaiMeta:
        name: CompoundFilter
    ComputerAction:
      oneOf:
      - $ref: '#/components/schemas/Click'
      - $ref: '#/components/schemas/DoubleClick'
      - $ref: '#/components/schemas/Drag'
      - $ref: '#/components/schemas/KeyPress'
      - $ref: '#/components/schemas/Move'
      - $ref: '#/components/schemas/Screenshot'
      - $ref: '#/components/schemas/Scroll'
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/Wait'
    ComputerCallOutputItemParam:
      description: The output of a computer tool call.
      properties:
        acknowledged_safety_checks:
          description: The safety checks reported by the API that have been acknowledged
            by the developer.
          items:
            $ref: '#/components/schemas/ComputerCallSafetyCheckParam'
          nullable: true
          type: array
        call_id:
          description: The ID of the computer tool call that produced the output.
          maxLength: 64
          minLength: 1
          type: string
        id:
          description: The ID of the computer tool call output.
          nullable: true
          type: string
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        status:
          description: The status of the message input. One of `in_progress`, `completed`,
            or `incomplete`. Populated when input items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
          nullable: true
          type: string
        type:
          default: computer_call_output
          description: The type of the computer tool call output. Always `computer_call_output`.
          enum:
          - computer_call_output
          type: string
          x-stainless-const: true
      required:
      - call_id
      - type
      - output
      title: Computer tool call output
      type: object
    ComputerCallSafetyCheckParam:
      description: A pending safety check for the computer call.
      properties:
        code:
          description: The type of the pending safety check.
          nullable: true
          type: string
        id:
          description: The ID of the pending safety check.
          type: string
        message:
          description: Details about the pending safety check.
          nullable: true
          type: string
      required:
      - id
      type: object
    ComputerScreenshotImage:
      description: 'A computer screenshot image used with the computer use tool.

        '
      properties:
        file_id:
          description: The identifier of an uploaded file that contains the screenshot.
          type: string
        image_url:
          description: The URL of the screenshot image.
          type: string
        type:
          default: computer_screenshot
          description: "Specifies the event type. For a computer screenshot, this\
            \ property is \nalways set to `computer_screenshot`.\n"
          enum:
          - computer_screenshot
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
    ComputerToolCall:
      description: "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use)\
        \ for more information.\n"
      properties:
        action:
          $ref: '#/components/schemas/ComputerAction'
        call_id:
          description: 'An identifier used when responding to the tool call with output.

            '
          type: string
        id:
          description: The unique ID of the computer call.
          type: string
        pending_safety_checks:
          description: 'The pending safety checks for the computer call.

            '
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          type: array
        status:
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          default: computer_call
          description: The type of the computer call. Always `computer_call`.
          enum:
          - computer_call
          type: string
      required:
      - type
      - id
      - action
      - call_id
      - pending_safety_checks
      - status
      title: Computer tool call
      type: object
    ComputerToolCallOutput:
      description: 'The output of a computer tool call.

        '
      properties:
        acknowledged_safety_checks:
          description: "The safety checks reported by the API that have been acknowledged\
            \ by the \ndeveloper.\n"
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          type: array
        call_id:
          description: 'The ID of the computer tool call that produced the output.

            '
          type: string
        id:
          description: 'The ID of the computer tool call output.

            '
          type: string
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        status:
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          default: computer_call_output
          description: 'The type of the computer tool call output. Always `computer_call_output`.

            '
          enum:
          - computer_call_output
          type: string
          x-stainless-const: true
      required:
      - type
      - call_id
      - output
      title: Computer tool call output
      type: object
    ComputerToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/ComputerToolCallOutput'
      - properties:
          id:
            description: 'The unique ID of the computer call tool output.

              '
            type: string
        required:
        - id
        type: object
    ComputerToolCallSafetyCheck:
      description: 'A pending safety check for the computer call.

        '
      properties:
        code:
          description: The type of the pending safety check.
          type: string
        id:
          description: The ID of the pending safety check.
          type: string
        message:
          description: Details about the pending safety check.
          type: string
      required:
      - id
      - code
      - message
      type: object
    ComputerUsePreviewTool:
      description: A tool that controls a virtual computer. Learn more about the [computer
        tool](https://platform.openai.com/docs/guides/tools-computer-use).
      properties:
        display_height:
          description: The height of the computer display.
          format: int64
          type: integer
        display_width:
          description: The width of the computer display.
          format: int64
          type: integer
        environment:
          description: The type of computer environment to control.
          enum:
          - windows
          - mac
          - linux
          - ubuntu
          - browser
          type: string
        type:
          default: computer_use_preview
          description: The type of the computer use tool. Always `computer_use_preview`.
          enum:
          - computer_use_preview
          type: string
          x-stainless-const: true
      required:
      - type
      - environment
      - display_width
      - display_height
      title: Computer use preview
      type: object
    ContainerFileCitationBody:
      description: A citation for a container file used to generate a model response.
      properties:
        container_id:
          description: The ID of the container file.
          type: string
        end_index:
          description: The index of the last character of the container file citation
            in the message.
          format: int64
          type: integer
        file_id:
          description: The ID of the file.
          type: string
        filename:
          description: The filename of the container file cited.
          type: string
        start_index:
          description: The index of the first character of the container file citation
            in the message.
          format: int64
          type: integer
        type:
          default: container_file_citation
          description: The type of the container file citation. Always `container_file_citation`.
          enum:
          - container_file_citation
          type: string
          x-stainless-const: true
      required:
      - type
      - container_id
      - file_id
      - start_index
      - end_index
      - filename
      title: Container file citation
      type: object
    ContainerFileListResource:
      properties:
        data:
          description: A list of container files.
          items:
            $ref: '#/components/schemas/ContainerFileResource'
          type: array
        first_id:
          description: The ID of the first file in the list.
          type: string
        has_more:
          description: Whether there are more files available.
          type: boolean
        last_id:
          description: The ID of the last file in the list.
          type: string
        object:
          description: The type of object returned, must be 'list'.
          enum:
          - list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ContainerFileResource:
      properties:
        bytes:
          description: Size of the file in bytes.
          format: int64
          type: integer
        container_id:
          description: The container this file belongs to.
          type: string
        created_at:
          description: Unix timestamp (in seconds) when the file was created.
          format: int64
          type: integer
        id:
          description: Unique identifier for the file.
          type: string
        object:
          description: The type of this object (`container.file`).
          type: string
        path:
          description: Path of the file in the container.
          type: string
        source:
          description: Source of the file (e.g., `user`, `assistant`).
          type: string
      required:
      - id
      - object
      - created_at
      - bytes
      - container_id
      - path
      - source
      title: The container file object
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"cfile_682e0e8a43c88191a7978f477a09bdf5\",\n   \
          \ \"object\": \"container.file\",\n    \"created_at\": 1747848842,\n   \
          \ \"bytes\": 880,\n    \"container_id\": \"cntr_682e0e7318108198aa783fd921ff305e08e78805b9fdbb04\"\
          ,\n    \"path\": \"/mnt/data/88e12fa445d32636f190a0b33daed6cb-tsconfig.json\"\
          ,\n    \"source\": \"user\"\n}\n"
        name: The container file object
    ContainerListResource:
      properties:
        data:
          description: A list of containers.
          items:
            $ref: '#/components/schemas/ContainerResource'
          type: array
        first_id:
          description: The ID of the first container in the list.
          type: string
        has_more:
          description: Whether there are more containers available.
          type: boolean
        last_id:
          description: The ID of the last container in the list.
          type: string
        object:
          description: The type of object returned, must be 'list'.
          enum:
          - list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ContainerResource:
      properties:
        created_at:
          description: Unix timestamp (in seconds) when the container was created.
          format: int64
          type: integer
        expires_after:
          description: 'The container will expire after this time period.

            The anchor is the reference point for the expiration.

            The minutes is the number of minutes after the anchor before the container
            expires.

            '
          properties:
            anchor:
              description: The reference point for the expiration.
              enum:
              - last_active_at
              type: string
            minutes:
              description: The number of minutes after the anchor before the container
                expires.
              format: int64
              type: integer
          type: object
        id:
          description: Unique identifier for the container.
          type: string
        name:
          description: Name of the container.
          type: string
        object:
          description: The type of this object.
          type: string
        status:
          description: Status of the container (e.g., active, deleted).
          type: string
      required:
      - id
      - object
      - name
      - created_at
      - status
      - id
      - name
      - created_at
      - status
      title: The container object
      type: object
      x-oaiMeta:
        example: "{\n   \"id\": \"cntr_682dfebaacac8198bbfe9c2474fb6f4a085685cbe3cb5863\"\
          ,\n   \"object\": \"container\",\n   \"created_at\": 1747844794,\n   \"\
          status\": \"running\",\n   \"expires_after\": {\n     \"anchor\": \"last_active_at\"\
          ,\n     \"minutes\": 20\n   },\n   \"last_active_at\": 1747844794,\n   \"\
          name\": \"My Container\"\n}\n"
        name: The container object
    Content:
      description: 'Multi-modal input and output contents.

        '
      oneOf:
      - $ref: '#/components/schemas/InputContent'
        title: Input content types
      - $ref: '#/components/schemas/OutputContent'
        title: Output content types
    Coordinate:
      description: 'An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.

        '
      properties:
        x:
          description: 'The x-coordinate.

            '
          format: int64
          type: integer
        y:
          description: 'The y-coordinate.

            '
          format: int64
          type: integer
      required:
      - x
      - y
      title: Coordinate
      type: object
    CostsResult:
      description: The aggregated costs details of the specific time bucket.
      properties:
        amount:
          description: The monetary value in its associated currency.
          properties:
            currency:
              description: Lowercase ISO-4217 currency e.g. "usd"
              type: string
            value:
              description: The numeric value of the cost.
              type: number
          type: object
        line_item:
          description: When `group_by=line_item`, this field provides the line item
            of the grouped costs result.
          nullable: true
          type: string
        object:
          enum:
          - organization.costs.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped costs result.
          nullable: true
          type: string
      required:
      - object
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.costs.result\",\n    \"amount\"\
          : {\n      \"value\": 0.06,\n      \"currency\": \"usd\"\n    },\n    \"\
          line_item\": \"Image models\",\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Costs object
    CreateAssistantRequest:
      additionalProperties: false
      properties:
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          example: gpt-4o
          x-oaiTypeLabel: string
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          maxLength: 256
          nullable: true
          type: string
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              oneOf:
              - required:
                - vector_store_ids
              - required:
                - vector_stores
              properties:
                vector_store_ids:
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
                vector_stores:
                  description: 'A helper to create a [vector store](/docs/api-reference/vector-stores/object)
                    with file_ids and attach it to this assistant. There can be a
                    maximum of 1 vector store attached to the assistant.

                    '
                  items:
                    properties:
                      chunking_strategy:
                        description: The chunking strategy used to chunk the file(s).
                          If not set, will use the `auto` strategy.
                        oneOf:
                        - additionalProperties: false
                          description: The default strategy. This strategy currently
                            uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens`
                            of `400`.
                          properties:
                            type:
                              description: Always `auto`.
                              enum:
                              - auto
                              type: string
                              x-stainless-const: true
                          required:
                          - type
                          title: Auto Chunking Strategy
                          type: object
                        - additionalProperties: false
                          properties:
                            static:
                              additionalProperties: false
                              properties:
                                chunk_overlap_tokens:
                                  description: 'The number of tokens that overlap
                                    between chunks. The default value is `400`.


                                    Note that the overlap must not exceed half of
                                    `max_chunk_size_tokens`.

                                    '
                                  format: int64
                                  type: integer
                                max_chunk_size_tokens:
                                  description: The maximum number of tokens in each
                                    chunk. The default value is `800`. The minimum
                                    value is `100` and the maximum value is `4096`.
                                  format: int64
                                  maximum: 4096
                                  minimum: 100
                                  type: integer
                              required:
                              - max_chunk_size_tokens
                              - chunk_overlap_tokens
                              type: object
                            type:
                              description: Always `static`.
                              enum:
                              - static
                              type: string
                              x-stainless-const: true
                          required:
                          - type
                          - static
                          title: Static Chunking Strategy
                          type: object
                        type: object
                      file_ids:
                        description: 'A list of [file](/docs/api-reference/files)
                          IDs to add to the vector store. There can be a maximum of
                          10000 files in a vector store.

                          '
                        items:
                          type: string
                        maxItems: 10000
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                    type: object
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      required:
      - model
      type: object
    CreateChatCompletionRequest:
      allOf:
      - $ref: '#/components/schemas/CreateModelResponseProperties'
      - properties:
          audio:
            description: 'Parameters for audio output. Required when audio output
              is requested with

              `modalities: ["audio"]`. [Learn more](/docs/guides/audio).

              '
            nullable: true
            properties:
              format:
                description: 'Specifies the output audio format. Must be one of `wav`,
                  `mp3`, `flac`,

                  `opus`, or `pcm16`.

                  '
                enum:
                - wav
                - aac
                - mp3
                - flac
                - opus
                - pcm16
                type: string
              voice:
                $ref: '#/components/schemas/VoiceIdsShared'
                description: "The voice the model uses to respond. Supported voices\
                  \ are \n`alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `nova`,\
                  \ `onyx`, `sage`, and `shimmer`.\n"
            required:
            - voice
            - format
            type: object
          frequency_penalty:
            default: 0
            description: 'Number between -2.0 and 2.0. Positive values penalize new
              tokens based on

              their existing frequency in the text so far, decreasing the model''s

              likelihood to repeat the same line verbatim.

              '
            maximum: 2
            minimum: -2
            nullable: true
            type: number
          function_call:
            deprecated: true
            description: 'Deprecated in favor of `tool_choice`.


              Controls which (if any) function is called by the model.


              `none` means the model will not call a function and instead generates
              a

              message.


              `auto` means the model can pick between generating a message or calling
              a

              function.


              Specifying a particular function via `{"name": "my_function"}` forces
              the

              model to call that function.


              `none` is the default when no functions are present. `auto` is the default

              if functions are present.

              '
            oneOf:
            - description: '`none` means the model will not call a function and instead
                generates a message. `auto` means the model can pick between generating
                a message or calling a function.

                '
              enum:
              - none
              - auto
              type: string
            - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
          functions:
            deprecated: true
            description: 'Deprecated in favor of `tools`.


              A list of functions the model may generate JSON inputs for.

              '
            items:
              $ref: '#/components/schemas/ChatCompletionFunctions'
            maxItems: 128
            minItems: 1
            type: array
          logit_bias:
            additionalProperties:
              format: int64
              type: integer
            default: null
            description: 'Modify the likelihood of specified tokens appearing in the
              completion.


              Accepts a JSON object that maps tokens (specified by their token ID
              in the

              tokenizer) to an associated bias value from -100 to 100. Mathematically,

              the bias is added to the logits generated by the model prior to sampling.

              The exact effect will vary per model, but values between -1 and 1 should

              decrease or increase likelihood of selection; values like -100 or 100

              should result in a ban or exclusive selection of the relevant token.

              '
            nullable: true
            type: object
            x-oaiTypeLabel: map
          logprobs:
            default: false
            description: 'Whether to return log probabilities of the output tokens
              or not. If true,

              returns the log probabilities of each output token returned in the

              `content` of `message`.

              '
            nullable: true
            type: boolean
          max_completion_tokens:
            description: 'An upper bound for the number of tokens that can be generated
              for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

              '
            format: int64
            nullable: true
            type: integer
          max_tokens:
            deprecated: true
            description: 'The maximum number of [tokens](/tokenizer) that can be generated
              in the

              chat completion. This value can be used to control

              [costs](https://openai.com/api/pricing/) for text generated via API.


              This value is now deprecated in favor of `max_completion_tokens`, and
              is

              not compatible with [o-series models](/docs/guides/reasoning).

              '
            format: int64
            nullable: true
            type: integer
          messages:
            description: 'A list of messages comprising the conversation so far. Depending
              on the

              [model](/docs/models) you use, different message types (modalities)
              are

              supported, like [text](/docs/guides/text-generation),

              [images](/docs/guides/vision), and [audio](/docs/guides/audio).

              '
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessage'
            minItems: 1
            type: array
          modalities:
            $ref: '#/components/schemas/ResponseModalities'
          model:
            $ref: '#/components/schemas/ModelIdsShared'
            description: 'Model ID used to generate the response, like `gpt-4o` or
              `o3`. OpenAI

              offers a wide range of models with different capabilities, performance

              characteristics, and price points. Refer to the [model guide](/docs/models)

              to browse and compare available models.

              '
          n:
            default: 1
            description: How many chat completion choices to generate for each input
              message. Note that you will be charged based on the number of generated
              tokens across all of the choices. Keep `n` as `1` to minimize costs.
            example: 1
            format: int64
            maximum: 128
            minimum: 1
            nullable: true
            type: integer
          parallel_tool_calls:
            $ref: '#/components/schemas/ParallelToolCalls'
          prediction:
            description: 'Configuration for a [Predicted Output](/docs/guides/predicted-outputs),

              which can greatly improve response times when large parts of the model

              response are known ahead of time. This is most common when you are

              regenerating a file with only minor changes to most of the content.

              '
            nullable: true
            oneOf:
            - $ref: '#/components/schemas/PredictionContent'
          presence_penalty:
            default: 0
            description: 'Number between -2.0 and 2.0. Positive values penalize new
              tokens based on

              whether they appear in the text so far, increasing the model''s likelihood

              to talk about new topics.

              '
            maximum: 2
            minimum: -2
            nullable: true
            type: number
          reasoning_effort:
            $ref: '#/components/schemas/ReasoningEffort'
          response_format:
            description: 'An object specifying the format that the model must output.


              Setting to `{ "type": "json_schema", "json_schema": {...} }` enables

              Structured Outputs which ensures the model will match your supplied
              JSON

              schema. Learn more in the [Structured Outputs

              guide](/docs/guides/structured-outputs).


              Setting to `{ "type": "json_object" }` enables the older JSON mode,
              which

              ensures the message the model generates is valid JSON. Using `json_schema`

              is preferred for models that support it.

              '
            oneOf:
            - $ref: '#/components/schemas/ResponseFormatText'
            - $ref: '#/components/schemas/ResponseFormatJsonSchema'
            - $ref: '#/components/schemas/ResponseFormatJsonObject'
          seed:
            description: 'This feature is in Beta.

              If specified, our system will make a best effort to sample deterministically,
              such that repeated requests with the same `seed` and parameters should
              return the same result.

              Determinism is not guaranteed, and you should refer to the `system_fingerprint`
              response parameter to monitor changes in the backend.

              '
            format: int64
            maximum: 9223372036854776000
            minimum: -9223372036854776000
            nullable: true
            type: integer
            x-oaiMeta:
              beta: true
          stop:
            $ref: '#/components/schemas/StopConfiguration'
          store:
            default: false
            description: "Whether or not to store the output of this chat completion\
              \ request for \nuse in our [model distillation](/docs/guides/distillation)\
              \ or\n[evals](/docs/guides/evals) products. \n\nSupports text and image\
              \ inputs. Note: image inputs over 10MB will be dropped.\n"
            nullable: true
            type: boolean
          stream:
            default: false
            description: 'If set to true, the model response data will be streamed
              to the client

              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

              See the [Streaming section below](/docs/api-reference/chat/streaming)

              for more information, along with the [streaming responses](/docs/guides/streaming-responses)

              guide for more information on how to handle the streaming events.

              '
            nullable: true
            type: boolean
          stream_options:
            $ref: '#/components/schemas/ChatCompletionStreamOptions'
          tool_choice:
            $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
          tools:
            description: 'A list of tools the model may call. Currently, only functions
              are supported as a tool. Use this to provide a list of functions the
              model may generate JSON inputs for. A max of 128 functions are supported.

              '
            items:
              $ref: '#/components/schemas/ChatCompletionTool'
            type: array
          top_logprobs:
            description: 'An integer between 0 and 20 specifying the number of most
              likely tokens to

              return at each token position, each with an associated log probability.

              `logprobs` must be set to `true` if this parameter is used.

              '
            format: int64
            maximum: 20
            minimum: 0
            nullable: true
            type: integer
          web_search_options:
            description: 'This tool searches the web for relevant results to use in
              a response.

              Learn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).

              '
            properties:
              search_context_size:
                $ref: '#/components/schemas/WebSearchContextSize'
              user_location:
                description: 'Approximate location parameters for the search.

                  '
                nullable: true
                properties:
                  approximate:
                    $ref: '#/components/schemas/WebSearchLocation'
                  type:
                    description: 'The type of location approximation. Always `approximate`.

                      '
                    enum:
                    - approximate
                    type: string
                    x-stainless-const: true
                required:
                - type
                - approximate
                type: object
            title: Web search
            type: object
        required:
        - model
        - messages
        type: object
    CreateChatCompletionResponse:
      description: Represents a chat completion response returned by model, based
        on the provided input.
      properties:
        choices:
          description: A list of chat completion choices. Can be more than one if
            `n` is greater than 1.
          items:
            properties:
              finish_reason:
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
                type: string
              index:
                description: The index of the choice in the list of choices.
                format: int64
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                - content
                - refusal
                type: object
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
            required:
            - finish_reason
            - index
            - message
            - logprobs
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion
            was created.
          format: int64
          type: integer
        id:
          description: A unique identifier for the chat completion.
          type: string
        model:
          description: The model used for the chat completion.
          type: string
        object:
          description: The object type, which is always `chat.completion`.
          enum:
          - chat.completion
          type: string
          x-stainless-const: true
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          description: 'This fingerprint represents the backend configuration that
            the model runs with.


            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\",\n  \"object\"\
          : \"chat.completion\",\n  \"created\": 1741570283,\n  \"model\": \"gpt-4o-2024-08-06\"\
          ,\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n\
          \        \"role\": \"assistant\",\n        \"content\": \"The image shows\
          \ a wooden boardwalk path running through a lush green field or meadow.\
          \ The sky is bright blue with some scattered clouds, giving the scene a\
          \ serene and peaceful atmosphere. Trees and shrubs are visible in the background.\"\
          ,\n        \"refusal\": null,\n        \"annotations\": []\n      },\n \
          \     \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n\
          \  \"usage\": {\n    \"prompt_tokens\": 1117,\n    \"completion_tokens\"\
          : 46,\n    \"total_tokens\": 1163,\n    \"prompt_tokens_details\": {\n \
          \     \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\"\
          : {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"\
          accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\":\
          \ 0\n    }\n  },\n  \"service_tier\": \"default\",\n  \"system_fingerprint\"\
          : \"fp_fc9f1d7035\"\n}\n"
        group: chat
        name: The chat completion object
    CreateChatCompletionStreamResponse:
      description: "Represents a streamed chunk of a chat completion response returned\n\
        by the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n"
      properties:
        choices:
          description: 'A list of chat completion choices. Can contain more than one
            elements if `n` is greater than 1. Can also be empty for the

            last chunk if you set `stream_options: {"include_usage": true}`.

            '
          items:
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              finish_reason:
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  `content_filter` if content was omitted due to a flag from our content
                  filters,

                  `tool_calls` if the model called a tool, or `function_call` (deprecated)
                  if the model called a function.

                  '
                enum:
                - stop
                - length
                - tool_calls
                - content_filter
                - function_call
                nullable: true
                type: string
              index:
                description: The index of the choice in the list of choices.
                format: int64
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability
                      information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability
                      information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                - content
                - refusal
                type: object
            required:
            - delta
            - finish_reason
            - index
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion
            was created. Each chunk has the same timestamp.
          format: int64
          type: integer
        id:
          description: A unique identifier for the chat completion. Each chunk has
            the same ID.
          type: string
        model:
          description: The model to generate the completion.
          type: string
        object:
          description: The object type, which is always `chat.completion.chunk`.
          enum:
          - chat.completion.chunk
          type: string
          x-stainless-const: true
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        system_fingerprint:
          description: 'This fingerprint represents the backend configuration that
            the model runs with.

            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
          description: 'An optional field that will only be present when you set

            `stream_options: {"include_usage": true}` in your request. When present,
            it

            contains a null value **except for the last chunk** which contains the

            token usage statistics for the entire request.


            **NOTE:** If the stream is interrupted or cancelled, you may not

            receive the final usage chunk which contains the total token usage for

            the request.

            '
          nullable: true
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
      x-oaiMeta:
        example: '{"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"role":"assistant","content":""},"logprobs":null,"finish_reason":null}]}


          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{"content":"Hello"},"logprobs":null,"finish_reason":null}]}


          ....


          {"id":"chatcmpl-123","object":"chat.completion.chunk","created":1694268190,"model":"gpt-4o-mini",
          "system_fingerprint": "fp_44709d6fcb", "choices":[{"index":0,"delta":{},"logprobs":null,"finish_reason":"stop"}]}

          '
        group: chat
        name: The chat completion chunk object
    CreateCompletionRequest:
      properties:
        best_of:
          default: 1
          description: "Generates `best_of` completions server-side and returns the\
            \ \"best\" (the one with the highest log probability per token). Results\
            \ cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number\
            \ of candidate completions and `n` specifies how many to return \u2013\
            \ `best_of` must be greater than `n`.\n\n**Note:** Because this parameter\
            \ generates many completions, it can quickly consume your token quota.\
            \ Use carefully and ensure that you have reasonable settings for `max_tokens`\
            \ and `stop`.\n"
          format: int64
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        echo:
          default: false
          description: 'Echo back the prompt in addition to the completion

            '
          nullable: true
          type: boolean
        frequency_penalty:
          default: 0
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on their existing frequency in the text so far, decreasing
            the model''s likelihood to repeat the same line verbatim.


            [See more information about frequency and presence penalties.](/docs/guides/text-generation)

            '
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        logit_bias:
          additionalProperties:
            format: int64
            type: integer
          default: null
          description: 'Modify the likelihood of specified tokens appearing in the
            completion.


            Accepts a JSON object that maps tokens (specified by their token ID in
            the GPT tokenizer) to an associated bias value from -100 to 100. You can
            use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token
            IDs. Mathematically, the bias is added to the logits generated by the
            model prior to sampling. The exact effect will vary per model, but values
            between -1 and 1 should decrease or increase likelihood of selection;
            values like -100 or 100 should result in a ban or exclusive selection
            of the relevant token.


            As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|>
            token from being generated.

            '
          nullable: true
          type: object
          x-oaiTypeLabel: map
        logprobs:
          default: null
          description: 'Include the log probabilities on the `logprobs` most likely
            output tokens, as well the chosen tokens. For example, if `logprobs` is
            5, the API will return a list of the 5 most likely tokens. The API will
            always return the `logprob` of the sampled token, so there may be up to
            `logprobs+1` elements in the response.


            The maximum value for `logprobs` is 5.

            '
          format: int64
          maximum: 5
          minimum: 0
          nullable: true
          type: integer
        max_tokens:
          default: 16
          description: 'The maximum number of [tokens](/tokenizer) that can be generated
            in the completion.


            The token count of your prompt plus `max_tokens` cannot exceed the model''s
            context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens.

            '
          example: 16
          format: int64
          minimum: 0
          nullable: true
          type: integer
        model:
          anyOf:
          - type: string
          - enum:
            - gpt-3.5-turbo-instruct
            - davinci-002
            - babbage-002
            type: string
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          x-oaiTypeLabel: string
        n:
          default: 1
          description: 'How many completions to generate for each prompt.


            **Note:** Because this parameter generates many completions, it can quickly
            consume your token quota. Use carefully and ensure that you have reasonable
            settings for `max_tokens` and `stop`.

            '
          example: 1
          format: int64
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        presence_penalty:
          default: 0
          description: 'Number between -2.0 and 2.0. Positive values penalize new
            tokens based on whether they appear in the text so far, increasing the
            model''s likelihood to talk about new topics.


            [See more information about frequency and presence penalties.](/docs/guides/text-generation)

            '
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        prompt:
          default: <|endoftext|>
          description: 'The prompt(s) to generate completions for, encoded as a string,
            array of strings, array of tokens, or array of token arrays.


            Note that <|endoftext|> is the document separator that the model sees
            during training, so if a prompt is not specified the model will generate
            as if from the beginning of a new document.

            '
          nullable: true
          oneOf:
          - default: ''
            example: This is a test.
            type: string
          - items:
              default: ''
              example: This is a test.
              type: string
            type: array
          - example: '[1212, 318, 257, 1332, 13]'
            items:
              format: int64
              type: integer
            minItems: 1
            type: array
          - example: '[[1212, 318, 257, 1332, 13]]'
            items:
              items:
                format: int64
                type: integer
              minItems: 1
              type: array
            minItems: 1
            type: array
        seed:
          description: 'If specified, our system will make a best effort to sample
            deterministically, such that repeated requests with the same `seed` and
            parameters should return the same result.


            Determinism is not guaranteed, and you should refer to the `system_fingerprint`
            response parameter to monitor changes in the backend.

            '
          format: int64
          nullable: true
          type: integer
        stop:
          $ref: '#/components/schemas/StopConfiguration'
        stream:
          default: false
          description: 'Whether to stream back partial progress. If set, tokens will
            be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
            as they become available, with the stream terminated by a `data: [DONE]`
            message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).

            '
          nullable: true
          type: boolean
        stream_options:
          $ref: '#/components/schemas/ChatCompletionStreamOptions'
        suffix:
          default: null
          description: 'The suffix that comes after a completion of inserted text.


            This parameter is only supported for `gpt-3.5-turbo-instruct`.

            '
          example: test.
          nullable: true
          type: string
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.


            We generally recommend altering this or `top_p` but not both.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or `temperature` but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
          example: user-1234
          type: string
      required:
      - model
      - prompt
      type: object
    CreateCompletionResponse:
      description: 'Represents a completion response from the API. Note: both the
        streamed and non-streamed response objects share the same shape (unlike the
        chat endpoint).

        '
      properties:
        choices:
          description: The list of completion choices the model generated for the
            input prompt.
          items:
            properties:
              finish_reason:
                description: 'The reason the model stopped generating tokens. This
                  will be `stop` if the model hit a natural stop point or a provided
                  stop sequence,

                  `length` if the maximum number of tokens specified in the request
                  was reached,

                  or `content_filter` if content was omitted due to a flag from our
                  content filters.

                  '
                enum:
                - stop
                - length
                - content_filter
                type: string
              index:
                format: int64
                type: integer
              logprobs:
                nullable: true
                properties:
                  text_offset:
                    items:
                      format: int64
                      type: integer
                    type: array
                  token_logprobs:
                    items:
                      type: number
                    type: array
                  tokens:
                    items:
                      type: string
                    type: array
                  top_logprobs:
                    items:
                      additionalProperties:
                        type: number
                      type: object
                    type: array
                type: object
              text:
                type: string
            required:
            - finish_reason
            - index
            - logprobs
            - text
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the completion was
            created.
          format: int64
          type: integer
        id:
          description: A unique identifier for the completion.
          type: string
        model:
          description: The model used for completion.
          type: string
        object:
          description: The object type, which is always "text_completion"
          enum:
          - text_completion
          type: string
          x-stainless-const: true
        system_fingerprint:
          description: 'This fingerprint represents the backend configuration that
            the model runs with.


            Can be used in conjunction with the `seed` request parameter to understand
            when backend changes have been made that might impact determinism.

            '
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
      - id
      - object
      - created
      - model
      - choices
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"\
          text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"gpt-4-turbo\"\
          ,\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\"\
          ,\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\"\
          : \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n \
          \   \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n"
        legacy: true
        name: The completion object
    CreateContainerBody:
      properties:
        expires_after:
          description: Container expiration time in seconds relative to the 'anchor'
            time.
          properties:
            anchor:
              description: Time anchor for the expiration time. Currently only 'last_active_at'
                is supported.
              enum:
              - last_active_at
              type: string
            minutes:
              format: int64
              type: integer
          required:
          - anchor
          - minutes
          type: object
        file_ids:
          description: IDs of files to copy to the container.
          items:
            type: string
          type: array
        name:
          description: Name of the container to create.
          type: string
      required:
      - name
      type: object
    CreateContainerFileBody:
      properties:
        file:
          description: 'The File object (not file name) to be uploaded.

            '
          format: binary
          type: string
        file_id:
          description: Name of the file to create.
          type: string
      required: []
      type: object
    CreateEmbeddingRequest:
      additionalProperties: false
      properties:
        dimensions:
          description: 'The number of dimensions the resulting output embeddings should
            have. Only supported in `text-embedding-3` and later models.

            '
          format: int64
          minimum: 1
          type: integer
        encoding_format:
          default: float
          description: The format to return the embeddings in. Can be either `float`
            or [`base64`](https://pypi.org/project/pybase64/).
          enum:
          - float
          - base64
          example: float
          type: string
        input:
          description: 'Input text to embed, encoded as a string or array of tokens.
            To embed multiple inputs in a single request, pass an array of strings
            or array of token arrays. The input must not exceed the max input tokens
            for the model (8192 tokens for all embedding models), cannot be an empty
            string, and any array must be 2048 dimensions or less. [Example Python
            code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
            for counting tokens. In addition to the per-input token limit, all embedding  models
            enforce a maximum of 300,000 tokens summed across all inputs in a  single
            request.

            '
          example: The quick brown fox jumped over the lazy dog
          oneOf:
          - default: ''
            description: The string that will be turned into an embedding.
            example: This is a test.
            title: string
            type: string
          - description: The array of strings that will be turned into an embedding.
            items:
              default: ''
              example: '[''This is a test.'']'
              type: string
            maxItems: 2048
            minItems: 1
            title: array
            type: array
          - description: The array of integers that will be turned into an embedding.
            example: '[1212, 318, 257, 1332, 13]'
            items:
              format: int64
              type: integer
            maxItems: 2048
            minItems: 1
            title: array
            type: array
          - description: The array of arrays containing integers that will be turned
              into an embedding.
            example: '[[1212, 318, 257, 1332, 13]]'
            items:
              items:
                format: int64
                type: integer
              minItems: 1
              type: array
            maxItems: 2048
            minItems: 1
            title: array
            type: array
        model:
          anyOf:
          - type: string
          - enum:
            - text-embedding-ada-002
            - text-embedding-3-small
            - text-embedding-3-large
            type: string
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
          example: text-embedding-3-small
          x-oaiTypeLabel: string
        user:
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
          example: user-1234
          type: string
      required:
      - model
      - input
      type: object
    CreateEmbeddingResponse:
      properties:
        data:
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
        model:
          description: The name of the model used to generate the embedding.
          type: string
        object:
          description: The object type, which is always "list".
          enum:
          - list
          type: string
          x-stainless-const: true
        usage:
          description: The usage information for the request.
          properties:
            prompt_tokens:
              description: The number of tokens used by the prompt.
              format: int64
              type: integer
            total_tokens:
              description: The total number of tokens used by the request.
              format: int64
              type: integer
          required:
          - prompt_tokens
          - total_tokens
          type: object
      required:
      - object
      - model
      - data
      - usage
      type: object
    CreateEvalCompletionsRunDataSource:
      description: 'A CompletionsRunDataSource object describing a model sampling
        configuration.

        '
      properties:
        input_messages:
          description: Used when sampling from a model. Dictates the structure of
            the messages passed into the model. Can either be a reference to a prebuilt
            trajectory (ie, `item.input_trajectory`), or a template with variable
            references to the `item` namespace.
          oneOf:
          - properties:
              template:
                description: A list of chat messages forming the prompt or context.
                  May include variable references to the `item` namespace, ie {{item.name}}.
                items:
                  oneOf:
                  - $ref: '#/components/schemas/EasyInputMessage'
                  - $ref: '#/components/schemas/EvalItem'
                type: array
              type:
                description: The type of input messages. Always `template`.
                enum:
                - template
                type: string
            required:
            - type
            - template
            title: TemplateInputMessages
            type: object
          - properties:
              item_reference:
                description: A reference to a variable in the `item` namespace. Ie,
                  "item.input_trajectory"
                type: string
              type:
                description: The type of input messages. Always `item_reference`.
                enum:
                - item_reference
                type: string
            required:
            - type
            - item_reference
            title: ItemReferenceInputMessages
            type: object
        model:
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
          type: string
        sampling_params:
          properties:
            max_completion_tokens:
              description: The maximum number of tokens in the generated output.
              format: int64
              type: integer
            response_format:
              description: 'An object specifying the format that the model must output.


                Setting to `{ "type": "json_schema", "json_schema": {...} }` enables

                Structured Outputs which ensures the model will match your supplied
                JSON

                schema. Learn more in the [Structured Outputs

                guide](/docs/guides/structured-outputs).


                Setting to `{ "type": "json_object" }` enables the older JSON mode,
                which

                ensures the message the model generates is valid JSON. Using `json_schema`

                is preferred for models that support it.

                '
              oneOf:
              - $ref: '#/components/schemas/ResponseFormatText'
              - $ref: '#/components/schemas/ResponseFormatJsonSchema'
              - $ref: '#/components/schemas/ResponseFormatJsonObject'
            seed:
              default: 42
              description: A seed value to initialize the randomness, during sampling.
              format: int64
              type: integer
            temperature:
              default: 1
              description: A higher temperature increases randomness in the outputs.
              type: number
            tools:
              description: 'A list of tools the model may call. Currently, only functions
                are supported as a tool. Use this to provide a list of functions the
                model may generate JSON inputs for. A max of 128 functions are supported.

                '
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
              type: array
            top_p:
              default: 1
              description: An alternative to temperature for nucleus sampling; 1.0
                includes all tokens.
              type: number
          type: object
        source:
          description: Determines what populates the `item` namespace in this run's
            data source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
          - $ref: '#/components/schemas/EvalStoredCompletionsSource'
        type:
          default: completions
          description: The type of run data source. Always `completions`.
          enum:
          - completions
          type: string
      required:
      - type
      - source
      title: CompletionsRunDataSource
      type: object
      x-oaiMeta:
        example: "{\n  \"name\": \"gpt-4o-mini-2024-07-18\",\n  \"data_source\": {\n\
          \    \"type\": \"completions\",\n    \"input_messages\": {\n      \"type\"\
          : \"item_reference\",\n      \"item_reference\": \"item.input\"\n    },\n\
          \    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"source\": {\n      \"\
          type\": \"stored_completions\",\n      \"model\": \"gpt-4o-mini-2024-07-18\"\
          \n    }\n  }\n}\n"
        group: eval runs
        name: The completions data source object used to configure an individual run
    CreateEvalCustomDataSourceConfig:
      description: 'A CustomDataSourceConfig object that defines the schema for the
        data source used for the evaluation runs.

        This schema is used to define the shape of the data that will be:

        - Used to define your testing criteria and

        - What data is required when creating a run

        '
      properties:
        include_sample_schema:
          default: false
          description: Whether the eval should expect you to populate the sample namespace
            (ie, by generating responses off of your data source)
          type: boolean
        item_schema:
          additionalProperties: true
          description: The json schema for each row in the data source.
          example: "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\"\
            : {\"type\": \"string\"},\n    \"age\": {\"type\": \"integer\"}\n  },\n\
            \  \"required\": [\"name\", \"age\"]\n}\n"
          type: object
        type:
          default: custom
          description: The type of data source. Always `custom`.
          enum:
          - custom
          type: string
          x-stainless-const: true
      required:
      - item_schema
      - type
      title: CustomDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"custom\",\n  \"item_schema\": {\n    \"type\":\
          \ \"object\",\n    \"properties\": {\n      \"name\": {\"type\": \"string\"\
          },\n      \"age\": {\"type\": \"integer\"}\n    },\n    \"required\": [\"\
          name\", \"age\"]\n  },\n  \"include_sample_schema\": true\n}\n"
        group: evals
        name: The eval file data source config object
    CreateEvalItem:
      description: A chat message that makes up the prompt or context. May include
        variable references to the `item` namespace, ie {{item.name}}.
      oneOf:
      - properties:
          content:
            description: The content of the message.
            type: string
          role:
            description: The role of the message (e.g. "system", "assistant", "user").
            type: string
        required:
        - role
        - content
        title: SimpleInputMessage
        type: object
      - $ref: '#/components/schemas/EvalItem'
      title: CreateEvalItem
      type: object
      x-oaiMeta:
        name: The chat message object used to configure an individual run
    CreateEvalJsonlRunDataSource:
      description: "A JsonlRunDataSource object with that specifies a JSONL file that\
        \ matches the eval \n"
      properties:
        source:
          description: Determines what populates the `item` namespace in the data
            source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
        type:
          default: jsonl
          description: The type of data source. Always `jsonl`.
          enum:
          - jsonl
          type: string
          x-stainless-const: true
      required:
      - type
      - source
      title: JsonlRunDataSource
      type: object
      x-oaiMeta:
        example: "{\n \"type\": \"jsonl\",\n \"source\": {\n   \"type\": \"file_id\"\
          ,\n   \"id\": \"file-9GYS6xbkWgWhmE7VoLUWFg\"\n }\n}\n"
        group: evals
        name: The file data source object for the eval run configuration
    CreateEvalLabelModelGrader:
      description: 'A LabelModelGrader object which uses a model to assign labels
        to each item

        in the evaluation.

        '
      properties:
        input:
          description: A list of chat messages forming the prompt or context. May
            include variable references to the `item` namespace, ie {{item.name}}.
          items:
            $ref: '#/components/schemas/CreateEvalItem'
          type: array
        labels:
          description: The labels to classify to each item in the evaluation.
          items:
            type: string
          type: array
        model:
          description: The model to use for the evaluation. Must support structured
            outputs.
          type: string
        name:
          description: The name of the grader.
          type: string
        passing_labels:
          description: The labels that indicate a passing result. Must be a subset
            of labels.
          items:
            type: string
          type: array
        type:
          description: The object type, which is always `label_model`.
          enum:
          - label_model
          type: string
          x-stainless-const: true
      required:
      - type
      - model
      - input
      - passing_labels
      - labels
      - name
      title: LabelModelGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"label_model\",\n  \"model\": \"gpt-4o-2024-08-06\"\
          ,\n  \"input\": [\n    {\n      \"role\": \"system\",\n      \"content\"\
          : \"Classify the sentiment of the following statement as one of 'positive',\
          \ 'neutral', or 'negative'\"\n    },\n    {\n      \"role\": \"user\",\n\
          \      \"content\": \"Statement: {{item.response}}\"\n    }\n  ],\n  \"\
          passing_labels\": [\"positive\"],\n  \"labels\": [\"positive\", \"neutral\"\
          , \"negative\"],\n  \"name\": \"Sentiment label grader\"\n}\n"
        group: evals
        name: The eval label model grader object
    CreateEvalLogsDataSourceConfig:
      description: 'A data source config which specifies the metadata property of
        your logs query.

        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.

        '
      properties:
        metadata:
          additionalProperties: true
          description: Metadata filters for the logs data source.
          example: "{\n  \"use_case\": \"customer_support_agent\"\n}\n"
          type: object
        type:
          default: logs
          description: The type of data source. Always `logs`.
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - type
      title: LogsDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"logs\",\n  \"metadata\": {\n    \"use_case\": \"\
          customer_support_agent\"\n  }\n}\n"
        group: evals
        name: The logs data source object for evals
    CreateEvalRequest:
      properties:
        data_source_config:
          description: The configuration for the data source used for the evaluation
            runs. Dictates the schema of the data used in the evaluation.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalCustomDataSourceConfig'
          - $ref: '#/components/schemas/CreateEvalLogsDataSourceConfig'
          - $ref: '#/components/schemas/CreateEvalStoredCompletionsDataSourceConfig'
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the evaluation.
          type: string
        testing_criteria:
          description: A list of graders for all eval runs in this group. Graders
            can reference variables in the data source using double curly braces notation,
            like `{{item.variable_name}}`. To reference the model's output, use the
            `sample` namespace (ie, `{{sample.output_text}}`).
          items:
            oneOf:
            - $ref: '#/components/schemas/CreateEvalLabelModelGrader'
            - $ref: '#/components/schemas/EvalGraderStringCheck'
            - $ref: '#/components/schemas/EvalGraderTextSimilarity'
            - $ref: '#/components/schemas/EvalGraderPython'
            - $ref: '#/components/schemas/EvalGraderScoreModel'
          type: array
      required:
      - data_source_config
      - testing_criteria
      title: CreateEvalRequest
      type: object
    CreateEvalResponsesRunDataSource:
      description: 'A ResponsesRunDataSource object describing a model sampling configuration.

        '
      properties:
        input_messages:
          description: Used when sampling from a model. Dictates the structure of
            the messages passed into the model. Can either be a reference to a prebuilt
            trajectory (ie, `item.input_trajectory`), or a template with variable
            references to the `item` namespace.
          oneOf:
          - properties:
              template:
                description: A list of chat messages forming the prompt or context.
                  May include variable references to the `item` namespace, ie {{item.name}}.
                items:
                  oneOf:
                  - properties:
                      content:
                        description: The content of the message.
                        type: string
                      role:
                        description: The role of the message (e.g. "system", "assistant",
                          "user").
                        type: string
                    required:
                    - role
                    - content
                    title: ChatMessage
                    type: object
                  - $ref: '#/components/schemas/EvalItem'
                type: array
              type:
                description: The type of input messages. Always `template`.
                enum:
                - template
                type: string
            required:
            - type
            - template
            title: InputMessagesTemplate
            type: object
          - properties:
              item_reference:
                description: A reference to a variable in the `item` namespace. Ie,
                  "item.name"
                type: string
              type:
                description: The type of input messages. Always `item_reference`.
                enum:
                - item_reference
                type: string
            required:
            - type
            - item_reference
            title: InputMessagesItemReference
            type: object
        model:
          description: The name of the model to use for generating completions (e.g.
            "o3-mini").
          type: string
        sampling_params:
          properties:
            max_completion_tokens:
              description: The maximum number of tokens in the generated output.
              format: int64
              type: integer
            seed:
              default: 42
              description: A seed value to initialize the randomness, during sampling.
              format: int64
              type: integer
            temperature:
              default: 1
              description: A higher temperature increases randomness in the outputs.
              type: number
            text:
              description: 'Configuration options for a text response from the model.
                Can be plain

                text or structured JSON data. Learn more:

                - [Text inputs and outputs](/docs/guides/text)

                - [Structured Outputs](/docs/guides/structured-outputs)

                '
              properties:
                format:
                  $ref: '#/components/schemas/TextResponseFormatConfiguration'
              type: object
            tools:
              description: "An array of tools the model may call while generating\
                \ a response. You\ncan specify which tool to use by setting the `tool_choice`\
                \ parameter.\n\nThe two categories of tools you can provide the model\
                \ are:\n\n- **Built-in tools**: Tools that are provided by OpenAI\
                \ that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n\
                \  or [file search](/docs/guides/tools-file-search). Learn more about\n\
                \  [built-in tools](/docs/guides/tools).\n- **Function calls (custom\
                \ tools)**: Functions that are defined by you,\n  enabling the model\
                \ to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).\n"
              items:
                $ref: '#/components/schemas/Tool'
              type: array
            top_p:
              default: 1
              description: An alternative to temperature for nucleus sampling; 1.0
                includes all tokens.
              type: number
          type: object
        source:
          description: Determines what populates the `item` namespace in this run's
            data source.
          oneOf:
          - $ref: '#/components/schemas/EvalJsonlFileContentSource'
          - $ref: '#/components/schemas/EvalJsonlFileIdSource'
          - $ref: '#/components/schemas/EvalResponsesSource'
        type:
          default: responses
          description: The type of run data source. Always `responses`.
          enum:
          - responses
          type: string
      required:
      - type
      - source
      title: ResponsesRunDataSource
      type: object
      x-oaiMeta:
        example: "{\n  \"name\": \"gpt-4o-mini-2024-07-18\",\n  \"data_source\": {\n\
          \    \"type\": \"responses\",\n    \"input_messages\": {\n      \"type\"\
          : \"item_reference\",\n      \"item_reference\": \"item.input\"\n    },\n\
          \    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"source\": {\n      \"\
          type\": \"responses\",\n      \"model\": \"gpt-4o-mini-2024-07-18\"\n  \
          \  }\n  }\n}\n"
        group: eval runs
        name: The completions data source object used to configure an individual run
    CreateEvalRunRequest:
      properties:
        data_source:
          description: Details about the run's data source.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalJsonlRunDataSource'
          - $ref: '#/components/schemas/CreateEvalCompletionsRunDataSource'
          - $ref: '#/components/schemas/CreateEvalResponsesRunDataSource'
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the run.
          type: string
      required:
      - data_source
      title: CreateEvalRunRequest
      type: object
    CreateEvalStoredCompletionsDataSourceConfig:
      deprecated: true
      description: 'Deprecated in favor of LogsDataSourceConfig.

        '
      properties:
        metadata:
          additionalProperties: true
          description: Metadata filters for the stored completions data source.
          example: "{\n  \"use_case\": \"customer_support_agent\"\n}\n"
          type: object
        type:
          default: stored_completions
          description: The type of data source. Always `stored_completions`.
          enum:
          - stored_completions
          type: string
          x-stainless-const: true
      required:
      - type
      title: StoredCompletionsDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"stored_completions\",\n  \"metadata\": {\n    \"\
          use_case\": \"customer_support_agent\"\n  }\n}\n"
        group: evals
        name: The stored completions data source object for evals
    CreateFileRequest:
      additionalProperties: false
      properties:
        file:
          description: 'The File object (not file name) to be uploaded.

            '
          format: binary
          type: string
        purpose:
          description: 'The intended purpose of the uploaded file. One of: - `assistants`:
            Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`:
            Used for fine-tuning - `vision`: Images used for vision fine-tuning -
            `user_data`: Flexible file type for any purpose - `evals`: Used for eval
            data sets

            '
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
          - user_data
          - evals
          type: string
      required:
      - file
      - purpose
      type: object
    CreateFineTuningCheckpointPermissionRequest:
      additionalProperties: false
      properties:
        project_ids:
          description: The project identifiers to grant access to.
          items:
            type: string
          type: array
      required:
      - project_ids
      type: object
    CreateFineTuningJobRequest:
      properties:
        hyperparameters:
          deprecated: true
          description: 'The hyperparameters used for the fine-tuning job.

            This value is now deprecated in favor of `method`, and should be passed
            in under the `method` parameter.

            '
          properties:
            batch_size:
              default: auto
              description: 'Number of examples in each batch. A larger batch size
                means that model parameters

                are updated less frequently, but with lower variance.

                '
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - format: int64
                maximum: 256
                minimum: 1
                type: integer
            learning_rate_multiplier:
              default: auto
              description: 'Scaling factor for the learning rate. A smaller learning
                rate may be useful to avoid

                overfitting.

                '
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - exclusiveMinimum: true
                minimum: 0
                type: number
            n_epochs:
              default: auto
              description: 'The number of epochs to train the model for. An epoch
                refers to one full cycle

                through the training dataset.

                '
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - format: int64
                maximum: 50
                minimum: 1
                type: integer
          type: object
        integrations:
          description: A list of integrations to enable for your fine-tuning job.
          items:
            properties:
              type:
                description: 'The type of integration to enable. Currently, only "wandb"
                  (Weights and Biases) is supported.

                  '
                oneOf:
                - enum:
                  - wandb
                  type: string
                  x-stainless-const: true
              wandb:
                description: 'The settings for your integration with Weights and Biases.
                  This payload specifies the project that

                  metrics will be sent to. Optionally, you can set an explicit display
                  name for your run, add tags

                  to your run, and set a default entity (team, username, etc) to be
                  associated with your run.

                  '
                properties:
                  entity:
                    description: 'The entity to use for the run. This allows you to
                      set the team or username of the WandB user that you would

                      like associated with the run. If not set, the default entity
                      for the registered WandB API key is used.

                      '
                    nullable: true
                    type: string
                  name:
                    description: 'A display name to set for the run. If not set, we
                      will use the Job ID as the name.

                      '
                    nullable: true
                    type: string
                  project:
                    description: 'The name of the project that the new run will be
                      created under.

                      '
                    example: my-wandb-project
                    type: string
                  tags:
                    description: 'A list of tags to be attached to the newly created
                      run. These tags are passed through directly to WandB. Some

                      default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}",
                      "openai/{ftjob-abcdef}".

                      '
                    items:
                      example: custom-tag
                      type: string
                    type: array
                required:
                - project
                type: object
            required:
            - type
            - wandb
            type: object
          nullable: true
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        model:
          anyOf:
          - type: string
          - enum:
            - babbage-002
            - davinci-002
            - gpt-3.5-turbo
            - gpt-4o-mini
            type: string
          description: 'The name of the model to fine-tune. You can select one of
            the

            [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).

            '
          example: gpt-4o-mini
          x-oaiTypeLabel: string
        seed:
          description: 'The seed controls the reproducibility of the job. Passing
            in the same seed and job parameters should produce the same results, but
            may differ in rare cases.

            If a seed is not specified, one will be generated for you.

            '
          example: 42
          format: int64
          maximum: 2147483647
          minimum: 0
          nullable: true
          type: integer
        suffix:
          default: null
          description: 'A string of up to 64 characters that will be added to your
            fine-tuned model name.


            For example, a `suffix` of "custom-model-name" would produce a model name
            like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.

            '
          maxLength: 64
          minLength: 1
          nullable: true
          type: string
        training_file:
          description: 'The ID of an uploaded file that contains training data.


            See [upload file](/docs/api-reference/files/create) for how to upload
            a file.


            Your dataset must be formatted as a JSONL file. Additionally, you must
            upload your file with the purpose `fine-tune`.


            The contents of the file should differ depending on if the model uses
            the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input)
            format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input)
            format.


            See the [fine-tuning guide](/docs/guides/model-optimization) for more
            details.

            '
          example: file-abc123
          type: string
        validation_file:
          description: 'The ID of an uploaded file that contains validation data.


            If you provide this file, the data is used to generate validation

            metrics periodically during fine-tuning. These metrics can be viewed in

            the fine-tuning results file.

            The same data should not be present in both train and validation files.


            Your dataset must be formatted as a JSONL file. You must upload your file
            with the purpose `fine-tune`.


            See the [fine-tuning guide](/docs/guides/model-optimization) for more
            details.

            '
          example: file-abc123
          nullable: true
          type: string
      required:
      - model
      - training_file
      type: object
    CreateImageEditRequest:
      properties:
        background:
          default: auto
          description: "Allows to set transparency for the background of the generated\
            \ image(s). \nThis parameter is only supported for `gpt-image-1`. Must\
            \ be one of \n`transparent`, `opaque` or `auto` (default value). When\
            \ `auto` is used, the \nmodel will automatically determine the best background\
            \ for the image.\n\nIf `transparent`, the output format needs to support\
            \ transparency, so it \nshould be set to either `png` (default value)\
            \ or `webp`.\n"
          enum:
          - transparent
          - opaque
          - auto
          example: transparent
          nullable: true
          type: string
        image:
          anyOf:
          - format: binary
            type: string
          - items:
              format: binary
              type: string
            maxItems: 16
            type: array
          description: "The image(s) to edit. Must be a supported image file or an\
            \ array of images.\n\nFor `gpt-image-1`, each image should be a `png`,\
            \ `webp`, or `jpg` file less \nthan 50MB. You can provide up to 16 images.\n\
            \nFor `dall-e-2`, you can only provide one image, and it should be a square\
            \ \n`png` file less than 4MB.\n"
        mask:
          description: An additional image whose fully transparent areas (e.g. where
            alpha is zero) indicate where `image` should be edited. If there are multiple
            images provided, the mask will be applied on the first image. Must be
            a valid PNG file, less than 4MB, and have the same dimensions as `image`.
          format: binary
          type: string
        model:
          anyOf:
          - type: string
          - enum:
            - dall-e-2
            - gpt-image-1
            type: string
            x-stainless-const: true
          default: dall-e-2
          description: The model to use for image generation. Only `dall-e-2` and
            `gpt-image-1` are supported. Defaults to `dall-e-2` unless a parameter
            specific to `gpt-image-1` is used.
          example: gpt-image-1
          nullable: true
          x-oaiTypeLabel: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          format: int64
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        output_compression:
          default: 100
          description: "The compression level (0-100%) for the generated images. This\
            \ parameter \nis only supported for `gpt-image-1` with the `webp` or `jpeg`\
            \ output \nformats, and defaults to 100.\n"
          example: 100
          format: int64
          nullable: true
          type: integer
        output_format:
          default: png
          description: 'The format in which the generated images are returned. This
            parameter is

            only supported for `gpt-image-1`. Must be one of `png`, `jpeg`, or `webp`.

            The default value is `png`.

            '
          enum:
          - png
          - jpeg
          - webp
          example: png
          nullable: true
          type: string
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 1000 characters for `dall-e-2`, and 32000 characters for `gpt-image-1`.
          example: A cute baby sea otter wearing a beret
          type: string
        quality:
          default: auto
          description: 'The quality of the image that will be generated. `high`, `medium`
            and `low` are only supported for `gpt-image-1`. `dall-e-2` only supports
            `standard` quality. Defaults to `auto`.

            '
          enum:
          - standard
          - low
          - medium
          - high
          - auto
          example: high
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated. This parameter is only supported for `dall-e-2`,
            as `gpt-image-1` will always return base64-encoded images.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value)
            for `gpt-image-1`, and one of `256x256`, `512x512`, or `1024x1024` for
            `dall-e-2`.
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - auto
          example: 1024x1024
          nullable: true
          type: string
        user:
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
          example: user-1234
          type: string
      required:
      - prompt
      - image
      type: object
    CreateImageRequest:
      properties:
        background:
          default: auto
          description: "Allows to set transparency for the background of the generated\
            \ image(s). \nThis parameter is only supported for `gpt-image-1`. Must\
            \ be one of \n`transparent`, `opaque` or `auto` (default value). When\
            \ `auto` is used, the \nmodel will automatically determine the best background\
            \ for the image.\n\nIf `transparent`, the output format needs to support\
            \ transparency, so it \nshould be set to either `png` (default value)\
            \ or `webp`.\n"
          enum:
          - transparent
          - opaque
          - auto
          example: transparent
          nullable: true
          type: string
        model:
          anyOf:
          - type: string
          - enum:
            - dall-e-2
            - dall-e-3
            - gpt-image-1
            type: string
          default: dall-e-2
          description: The model to use for image generation. One of `dall-e-2`, `dall-e-3`,
            or `gpt-image-1`. Defaults to `dall-e-2` unless a parameter specific to
            `gpt-image-1` is used.
          example: gpt-image-1
          nullable: true
          x-oaiTypeLabel: string
        moderation:
          default: auto
          description: Control the content-moderation level for images generated by
            `gpt-image-1`. Must be either `low` for less restrictive filtering or
            `auto` (default value).
          enum:
          - low
          - auto
          example: low
          nullable: true
          type: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
            For `dall-e-3`, only `n=1` is supported.
          example: 1
          format: int64
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        output_compression:
          default: 100
          description: The compression level (0-100%) for the generated images. This
            parameter is only supported for `gpt-image-1` with the `webp` or `jpeg`
            output formats, and defaults to 100.
          example: 100
          format: int64
          nullable: true
          type: integer
        output_format:
          default: png
          description: The format in which the generated images are returned. This
            parameter is only supported for `gpt-image-1`. Must be one of `png`, `jpeg`,
            or `webp`.
          enum:
          - png
          - jpeg
          - webp
          example: png
          nullable: true
          type: string
        prompt:
          description: A text description of the desired image(s). The maximum length
            is 32000 characters for `gpt-image-1`, 1000 characters for `dall-e-2`
            and 4000 characters for `dall-e-3`.
          example: A cute baby sea otter
          type: string
        quality:
          default: auto
          description: "The quality of the image that will be generated. \n\n- `auto`\
            \ (default value) will automatically select the best quality for the given\
            \ model.\n- `high`, `medium` and `low` are supported for `gpt-image-1`.\n\
            - `hd` and `standard` are supported for `dall-e-3`.\n- `standard` is the\
            \ only option for `dall-e-2`.\n"
          enum:
          - standard
          - hd
          - low
          - medium
          - high
          - auto
          example: medium
          nullable: true
          type: string
        response_format:
          default: url
          description: The format in which generated images with `dall-e-2` and `dall-e-3`
            are returned. Must be one of `url` or `b64_json`. URLs are only valid
            for 60 minutes after the image has been generated. This parameter isn't
            supported for `gpt-image-1` which will always return base64-encoded images.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: auto
          description: The size of the generated images. Must be one of `1024x1024`,
            `1536x1024` (landscape), `1024x1536` (portrait), or `auto` (default value)
            for `gpt-image-1`, one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`,
            and one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3`.
          enum:
          - auto
          - 1024x1024
          - 1536x1024
          - 1024x1536
          - 256x256
          - 512x512
          - 1792x1024
          - 1024x1792
          example: 1024x1024
          nullable: true
          type: string
        style:
          default: vivid
          description: The style of the generated images. This parameter is only supported
            for `dall-e-3`. Must be one of `vivid` or `natural`. Vivid causes the
            model to lean towards generating hyper-real and dramatic images. Natural
            causes the model to produce more natural, less hyper-real looking images.
          enum:
          - vivid
          - natural
          example: vivid
          nullable: true
          type: string
        user:
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
          example: user-1234
          type: string
      required:
      - prompt
      type: object
    CreateImageVariationRequest:
      properties:
        image:
          description: The image to use as the basis for the variation(s). Must be
            a valid PNG file, less than 4MB, and square.
          format: binary
          type: string
        model:
          anyOf:
          - type: string
          - enum:
            - dall-e-2
            type: string
            x-stainless-const: true
          default: dall-e-2
          description: The model to use for image generation. Only `dall-e-2` is supported
            at this time.
          example: dall-e-2
          nullable: true
          x-oaiTypeLabel: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          format: int64
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        response_format:
          default: url
          description: The format in which the generated images are returned. Must
            be one of `url` or `b64_json`. URLs are only valid for 60 minutes after
            the image has been generated.
          enum:
          - url
          - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: The size of the generated images. Must be one of `256x256`,
            `512x512`, or `1024x1024`.
          enum:
          - 256x256
          - 512x512
          - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        user:
          description: 'A unique identifier representing your end-user, which can
            help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).

            '
          example: user-1234
          type: string
      required:
      - image
      type: object
    CreateMessageRequest:
      additionalProperties: false
      properties:
        attachments:
          description: A list of files attached to the message, and the tools they
            should be added to.
          items:
            properties:
              file_id:
                description: The ID of the file to attach to the message.
                type: string
              tools:
                description: The tools to add this file to.
                items:
                  oneOf:
                  - $ref: '#/components/schemas/AssistantToolsCode'
                  - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
                type: array
            type: object
          nullable: true
          required:
          - file_id
          - tools
          type: array
        content:
          oneOf:
          - description: The text contents of the message.
            title: Text content
            type: string
          - description: An array of content parts with a defined type, each can be
              of type `text` or images can be passed with `image_url` or `image_file`.
              Image types are only supported on [Vision-compatible models](/docs/models).
            items:
              oneOf:
              - $ref: '#/components/schemas/MessageContentImageFileObject'
              - $ref: '#/components/schemas/MessageContentImageUrlObject'
              - $ref: '#/components/schemas/MessageRequestContentTextObject'
            minItems: 1
            title: Array of content parts
            type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        role:
          description: 'The role of the entity that is creating the message. Allowed
            values include:

            - `user`: Indicates the message is sent by an actual user and should be
            used in most cases to represent user-generated messages.

            - `assistant`: Indicates the message is generated by the assistant. Use
            this value to insert messages from the assistant into the conversation.

            '
          enum:
          - user
          - assistant
          type: string
      required:
      - role
      - content
      type: object
    CreateModelResponseProperties:
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
      - properties:
          top_logprobs:
            description: 'An integer between 0 and 20 specifying the number of most
              likely tokens to

              return at each token position, each with an associated log probability.

              '
            format: int64
            maximum: 20
            minimum: 0
            type: integer
        type: object
    CreateModerationRequest:
      properties:
        input:
          description: 'Input (or inputs) to classify. Can be a single string, an
            array of strings, or

            an array of multi-modal input objects similar to other models.

            '
          oneOf:
          - default: ''
            description: A string of text to classify for moderation.
            example: I want to kill them.
            type: string
          - description: An array of strings to classify for moderation.
            items:
              default: ''
              example: I want to kill them.
              type: string
            type: array
          - description: An array of multi-modal inputs to the moderation model.
            items:
              oneOf:
              - description: An object describing an image to classify.
                properties:
                  image_url:
                    description: Contains either an image URL or a data URL for a
                      base64 encoded image.
                    properties:
                      url:
                        description: Either a URL of the image or the base64 encoded
                          image data.
                        example: https://example.com/image.jpg
                        format: uri
                        type: string
                    required:
                    - url
                    type: object
                  type:
                    description: Always `image_url`.
                    enum:
                    - image_url
                    type: string
                    x-stainless-const: true
                required:
                - type
                - image_url
                type: object
              - description: An object describing text to classify.
                properties:
                  text:
                    description: A string of text to classify.
                    example: I want to kill them
                    type: string
                  type:
                    description: Always `text`.
                    enum:
                    - text
                    type: string
                    x-stainless-const: true
                required:
                - type
                - text
                type: object
            type: array
        model:
          anyOf:
          - type: string
          - enum:
            - omni-moderation-latest
            - omni-moderation-2024-09-26
            - text-moderation-latest
            - text-moderation-stable
            type: string
          default: omni-moderation-latest
          description: 'The content moderation model you would like to use. Learn
            more in

            [the moderation guide](/docs/guides/moderation), and learn about

            available models [here](/docs/models#moderation).

            '
          example: omni-moderation-2024-09-26
          nullable: false
          x-oaiTypeLabel: string
      required:
      - input
      type: object
    CreateModerationResponse:
      description: Represents if a given text input is potentially harmful.
      properties:
        id:
          description: The unique identifier for the moderation request.
          type: string
        model:
          description: The model used to generate the moderation results.
          type: string
        results:
          description: A list of moderation objects.
          items:
            properties:
              categories:
                description: A list of the categories, and whether they are flagged
                  or not.
                properties:
                  harassment:
                    description: Content that expresses, incites, or promotes harassing
                      language towards any target.
                    type: boolean
                  harassment/threatening:
                    description: Harassment content that also includes violence or
                      serious harm towards any target.
                    type: boolean
                  hate:
                    description: Content that expresses, incites, or promotes hate
                      based on race, gender, ethnicity, religion, nationality, sexual
                      orientation, disability status, or caste. Hateful content aimed
                      at non-protected groups (e.g., chess players) is harassment.
                    type: boolean
                  hate/threatening:
                    description: Hateful content that also includes violence or serious
                      harm towards the targeted group based on race, gender, ethnicity,
                      religion, nationality, sexual orientation, disability status,
                      or caste.
                    type: boolean
                  illicit:
                    description: Content that includes instructions or advice that
                      facilitate the planning or execution of wrongdoing, or that
                      gives advice or instruction on how to commit illicit acts. For
                      example, "how to shoplift" would fit this category.
                    nullable: true
                    type: boolean
                  illicit/violent:
                    description: Content that includes instructions or advice that
                      facilitate the planning or execution of wrongdoing that also
                      includes violence, or that gives advice or instruction on the
                      procurement of any weapon.
                    nullable: true
                    type: boolean
                  self-harm:
                    description: Content that promotes, encourages, or depicts acts
                      of self-harm, such as suicide, cutting, and eating disorders.
                    type: boolean
                  self-harm/instructions:
                    description: Content that encourages performing acts of self-harm,
                      such as suicide, cutting, and eating disorders, or that gives
                      instructions or advice on how to commit such acts.
                    type: boolean
                  self-harm/intent:
                    description: Content where the speaker expresses that they are
                      engaging or intend to engage in acts of self-harm, such as suicide,
                      cutting, and eating disorders.
                    type: boolean
                  sexual:
                    description: Content meant to arouse sexual excitement, such as
                      the description of sexual activity, or that promotes sexual
                      services (excluding sex education and wellness).
                    type: boolean
                  sexual/minors:
                    description: Sexual content that includes an individual who is
                      under 18 years old.
                    type: boolean
                  violence:
                    description: Content that depicts death, violence, or physical
                      injury.
                    type: boolean
                  violence/graphic:
                    description: Content that depicts death, violence, or physical
                      injury in graphic detail.
                    type: boolean
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
                type: object
              category_applied_input_types:
                description: A list of the categories along with the input type(s)
                  that the score applies to.
                properties:
                  harassment:
                    description: The applied input type(s) for the category 'harassment'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  harassment/threatening:
                    description: The applied input type(s) for the category 'harassment/threatening'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  hate:
                    description: The applied input type(s) for the category 'hate'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  hate/threatening:
                    description: The applied input type(s) for the category 'hate/threatening'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  illicit:
                    description: The applied input type(s) for the category 'illicit'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  illicit/violent:
                    description: The applied input type(s) for the category 'illicit/violent'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  self-harm:
                    description: The applied input type(s) for the category 'self-harm'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                  self-harm/instructions:
                    description: The applied input type(s) for the category 'self-harm/instructions'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                  self-harm/intent:
                    description: The applied input type(s) for the category 'self-harm/intent'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                  sexual:
                    description: The applied input type(s) for the category 'sexual'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                  sexual/minors:
                    description: The applied input type(s) for the category 'sexual/minors'.
                    items:
                      enum:
                      - text
                      type: string
                      x-stainless-const: true
                    type: array
                  violence:
                    description: The applied input type(s) for the category 'violence'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                  violence/graphic:
                    description: The applied input type(s) for the category 'violence/graphic'.
                    items:
                      enum:
                      - text
                      - image
                      type: string
                    type: array
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
                type: object
              category_scores:
                description: A list of the categories along with their scores as predicted
                  by model.
                properties:
                  harassment:
                    description: The score for the category 'harassment'.
                    type: number
                  harassment/threatening:
                    description: The score for the category 'harassment/threatening'.
                    type: number
                  hate:
                    description: The score for the category 'hate'.
                    type: number
                  hate/threatening:
                    description: The score for the category 'hate/threatening'.
                    type: number
                  illicit:
                    description: The score for the category 'illicit'.
                    type: number
                  illicit/violent:
                    description: The score for the category 'illicit/violent'.
                    type: number
                  self-harm:
                    description: The score for the category 'self-harm'.
                    type: number
                  self-harm/instructions:
                    description: The score for the category 'self-harm/instructions'.
                    type: number
                  self-harm/intent:
                    description: The score for the category 'self-harm/intent'.
                    type: number
                  sexual:
                    description: The score for the category 'sexual'.
                    type: number
                  sexual/minors:
                    description: The score for the category 'sexual/minors'.
                    type: number
                  violence:
                    description: The score for the category 'violence'.
                    type: number
                  violence/graphic:
                    description: The score for the category 'violence/graphic'.
                    type: number
                required:
                - hate
                - hate/threatening
                - harassment
                - harassment/threatening
                - illicit
                - illicit/violent
                - self-harm
                - self-harm/intent
                - self-harm/instructions
                - sexual
                - sexual/minors
                - violence
                - violence/graphic
                type: object
              flagged:
                description: Whether any of the below categories are flagged.
                type: boolean
            required:
            - flagged
            - categories
            - category_scores
            - category_applied_input_types
            type: object
          type: array
      required:
      - id
      - model
      - results
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"modr-0d9740456c391e43c445bf0f010940c7\",\n  \"model\"\
          : \"omni-moderation-latest\",\n  \"results\": [\n    {\n      \"flagged\"\
          : true,\n      \"categories\": {\n        \"harassment\": true,\n      \
          \  \"harassment/threatening\": true,\n        \"sexual\": false,\n     \
          \   \"hate\": false,\n        \"hate/threatening\": false,\n        \"illicit\"\
          : false,\n        \"illicit/violent\": false,\n        \"self-harm/intent\"\
          : false,\n        \"self-harm/instructions\": false,\n        \"self-harm\"\
          : false,\n        \"sexual/minors\": false,\n        \"violence\": true,\n\
          \        \"violence/graphic\": true\n      },\n      \"category_scores\"\
          : {\n        \"harassment\": 0.8189693396524255,\n        \"harassment/threatening\"\
          : 0.804985420696006,\n        \"sexual\": 1.573112165348997e-6,\n      \
          \  \"hate\": 0.007562942636942845,\n        \"hate/threatening\": 0.004208854591835476,\n\
          \        \"illicit\": 0.030535955153511665,\n        \"illicit/violent\"\
          : 0.008925306722380033,\n        \"self-harm/intent\": 0.00023023930975076432,\n\
          \        \"self-harm/instructions\": 0.0002293869201073356,\n        \"\
          self-harm\": 0.012598046106750154,\n        \"sexual/minors\": 2.212566909570261e-8,\n\
          \        \"violence\": 0.9999992735124786,\n        \"violence/graphic\"\
          : 0.843064871157054\n      },\n      \"category_applied_input_types\": {\n\
          \        \"harassment\": [\n          \"text\"\n        ],\n        \"harassment/threatening\"\
          : [\n          \"text\"\n        ],\n        \"sexual\": [\n          \"\
          text\",\n          \"image\"\n        ],\n        \"hate\": [\n        \
          \  \"text\"\n        ],\n        \"hate/threatening\": [\n          \"text\"\
          \n        ],\n        \"illicit\": [\n          \"text\"\n        ],\n \
          \       \"illicit/violent\": [\n          \"text\"\n        ],\n       \
          \ \"self-harm/intent\": [\n          \"text\",\n          \"image\"\n  \
          \      ],\n        \"self-harm/instructions\": [\n          \"text\",\n\
          \          \"image\"\n        ],\n        \"self-harm\": [\n          \"\
          text\",\n          \"image\"\n        ],\n        \"sexual/minors\": [\n\
          \          \"text\"\n        ],\n        \"violence\": [\n          \"text\"\
          ,\n          \"image\"\n        ],\n        \"violence/graphic\": [\n  \
          \        \"text\",\n          \"image\"\n        ]\n      }\n    }\n  ]\n\
          }\n"
        name: The moderation object
    CreateResponse:
      allOf:
      - $ref: '#/components/schemas/CreateModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - properties:
          include:
            description: "Specify additional output data to include in the model response.\
              \ Currently\nsupported values are:\n- `code_interpreter_call.outputs`:\
              \ Includes the outputs of python code execution\n  in code interpreter\
              \ tool call items.\n- `computer_call_output.output.image_url`: Include\
              \ image urls from the computer call output.\n- `file_search_call.results`:\
              \ Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`:\
              \ Include image urls from the input message.\n- `message.output_text.logprobs`:\
              \ Include logprobs with assistant messages.\n- `reasoning.encrypted_content`:\
              \ Includes an encrypted version of reasoning\n  tokens in reasoning\
              \ item outputs. This enables reasoning items to be used in\n  multi-turn\
              \ conversations when using the Responses API statelessly (like\n  when\
              \ the `store` parameter is set to `false`, or when an organization is\n\
              \  enrolled in the zero data retention program).\n"
            items:
              $ref: '#/components/schemas/Includable'
            nullable: true
            type: array
          input:
            description: 'Text, image, or file inputs to the model, used to generate
              a response.


              Learn more:

              - [Text inputs and outputs](/docs/guides/text)

              - [Image inputs](/docs/guides/images)

              - [File inputs](/docs/guides/pdf-files)

              - [Conversation state](/docs/guides/conversation-state)

              - [Function calling](/docs/guides/function-calling)

              '
            oneOf:
            - description: 'A text input to the model, equivalent to a text input
                with the

                `user` role.

                '
              title: Text input
              type: string
            - description: 'A list of one or many input items to the model, containing

                different content types.

                '
              items:
                $ref: '#/components/schemas/InputItem'
              title: Input item list
              type: array
          instructions:
            description: 'A system (or developer) message inserted into the model''s
              context.


              When using along with `previous_response_id`, the instructions from
              a previous

              response will not be carried over to the next response. This makes it
              simple

              to swap out system (or developer) messages in new responses.

              '
            nullable: true
            type: string
          parallel_tool_calls:
            default: true
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            nullable: true
            type: boolean
          store:
            default: true
            description: 'Whether to store the generated model response for later
              retrieval via

              API.

              '
            nullable: true
            type: boolean
          stream:
            default: false
            description: 'If set to true, the model response data will be streamed
              to the client

              as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).

              See the [Streaming section below](/docs/api-reference/responses-streaming)

              for more information.

              '
            nullable: true
            type: boolean
        type: object
    CreateRunRequest:
      additionalProperties: false
      properties:
        additional_instructions:
          description: Appends additional instructions at the end of the instructions
            for the run. This is useful for modifying the behavior on a per-run basis
            without overriding other instructions.
          nullable: true
          type: string
        additional_messages:
          description: Adds additional messages to the thread before creating the
            run.
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          nullable: true
          type: array
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to
            use to execute this run.
          type: string
        instructions:
          description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant)
            of the assistant. This is useful for modifying the behavior on a per-run
            basis.
          nullable: true
          type: string
        max_completion_tokens:
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
          description: The ID of the [Model](/docs/api-reference/models) to be used
            to execute this run. If a value is provided here, it will override the
            model associated with the assistant. If not, the model associated with
            the assistant will be used.
          example: gpt-4o
          nullable: true
          x-oaiTypeLabel: string
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        stream:
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
          nullable: true
          type: boolean
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 20
          nullable: true
          type: array
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
      required:
      - assistant_id
      type: object
    CreateSpeechRequest:
      additionalProperties: false
      properties:
        input:
          description: The text to generate audio for. The maximum length is 4096
            characters.
          maxLength: 4096
          type: string
        instructions:
          description: Control the voice of your generated audio with additional instructions.
            Does not work with `tts-1` or `tts-1-hd`.
          maxLength: 4096
          type: string
        model:
          anyOf:
          - type: string
          - enum:
            - tts-1
            - tts-1-hd
            - gpt-4o-mini-tts
            type: string
          description: 'One of the available [TTS models](/docs/models#tts): `tts-1`,
            `tts-1-hd` or `gpt-4o-mini-tts`.

            '
          x-oaiTypeLabel: string
        response_format:
          default: mp3
          description: The format to audio in. Supported formats are `mp3`, `opus`,
            `aac`, `flac`, `wav`, and `pcm`.
          enum:
          - mp3
          - opus
          - aac
          - flac
          - wav
          - pcm
          type: string
        speed:
          default: 1
          description: The speed of the generated audio. Select a value from `0.25`
            to `4.0`. `1.0` is the default.
          maximum: 4
          minimum: 0.25
          type: number
        stream_format:
          default: audio
          description: The format to stream the audio in. Supported formats are `sse`
            and `audio`. `sse` is not supported for `tts-1` or `tts-1-hd`.
          enum:
          - sse
          - audio
          type: string
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: The voice to use when generating the audio. Supported voices
            are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`,
            `sage`, `shimmer`, and `verse`. Previews of the voices are available in
            the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
      required:
      - model
      - input
      - voice
      type: object
    CreateSpeechResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/SpeechAudioDeltaEvent'
      - $ref: '#/components/schemas/SpeechAudioDoneEvent'
      discriminator:
        propertyName: type
    CreateThreadAndRunRequest:
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to
            use to execute this run.
          type: string
        instructions:
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: string
        max_completion_tokens:
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
          - type: string
          - enum:
            - gpt-4.1
            - gpt-4.1-mini
            - gpt-4.1-nano
            - gpt-4.1-2025-04-14
            - gpt-4.1-mini-2025-04-14
            - gpt-4.1-nano-2025-04-14
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4.5-preview
            - gpt-4.5-preview-2025-02-27
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
            type: string
          description: The ID of the [Model](/docs/api-reference/models) to be used
            to execute this run. If a value is provided here, it will override the
            model associated with the assistant. If not, the model associated with
            the assistant will be used.
          example: gpt-4o
          nullable: true
          x-oaiTypeLabel: string
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        stream:
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
          nullable: true
          type: boolean
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        thread:
          $ref: '#/components/schemas/CreateThreadRequest'
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        tool_resources:
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: 'The ID of the [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 20
          nullable: true
          type: array
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
      required:
      - assistant_id
      type: object
    CreateThreadRequest:
      additionalProperties: false
      description: "Options to create a new thread. If no thread is provided when\
        \ running a \nrequest, an empty thread will be created.\n"
      properties:
        messages:
          description: A list of [messages](/docs/api-reference/messages) to start
            the thread with.
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        tool_resources:
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              oneOf:
              - required:
                - vector_store_ids
              - required:
                - vector_stores
              properties:
                vector_store_ids:
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
                vector_stores:
                  description: 'A helper to create a [vector store](/docs/api-reference/vector-stores/object)
                    with file_ids and attach it to this thread. There can be a maximum
                    of 1 vector store attached to the thread.

                    '
                  items:
                    properties:
                      chunking_strategy:
                        description: The chunking strategy used to chunk the file(s).
                          If not set, will use the `auto` strategy.
                        oneOf:
                        - additionalProperties: false
                          description: The default strategy. This strategy currently
                            uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens`
                            of `400`.
                          properties:
                            type:
                              description: Always `auto`.
                              enum:
                              - auto
                              type: string
                              x-stainless-const: true
                          required:
                          - type
                          title: Auto Chunking Strategy
                          type: object
                        - additionalProperties: false
                          properties:
                            static:
                              additionalProperties: false
                              properties:
                                chunk_overlap_tokens:
                                  description: 'The number of tokens that overlap
                                    between chunks. The default value is `400`.


                                    Note that the overlap must not exceed half of
                                    `max_chunk_size_tokens`.

                                    '
                                  format: int64
                                  type: integer
                                max_chunk_size_tokens:
                                  description: The maximum number of tokens in each
                                    chunk. The default value is `800`. The minimum
                                    value is `100` and the maximum value is `4096`.
                                  format: int64
                                  maximum: 4096
                                  minimum: 100
                                  type: integer
                              required:
                              - max_chunk_size_tokens
                              - chunk_overlap_tokens
                              type: object
                            type:
                              description: Always `static`.
                              enum:
                              - static
                              type: string
                              x-stainless-const: true
                          required:
                          - type
                          - static
                          title: Static Chunking Strategy
                          type: object
                        type: object
                      file_ids:
                        description: 'A list of [file](/docs/api-reference/files)
                          IDs to add to the vector store. There can be a maximum of
                          10000 files in a vector store.

                          '
                        items:
                          type: string
                        maxItems: 10000
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                    type: object
                  maxItems: 1
                  type: array
              type: object
          type: object
      type: object
    CreateTranscriptionRequest:
      additionalProperties: false
      properties:
        chunking_strategy:
          anyOf:
          - default:
            - auto
            description: 'Automatically set chunking parameters based on the audio.
              Must be set to `"auto"`.

              '
            enum:
            - auto
            type: string
            x-stainless-const: true
          - $ref: '#/components/schemas/VadConfig'
          description: 'Controls how the audio is cut into chunks. When set to `"auto"`,
            the server first normalizes loudness and then uses voice activity detection
            (VAD) to choose boundaries. `server_vad` object can be provided to tweak
            VAD detection parameters manually. If unset, the audio is transcribed
            as a single block. '
          nullable: true
          x-oaiTypeLabel: string
        file:
          description: 'The audio file object (not file name) to transcribe, in one
            of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

            '
          format: binary
          type: string
          x-oaiTypeLabel: file
        include[]:
          description: "Additional information to include in the transcription response.\
            \ \n`logprobs` will return the log probabilities of the tokens in the\
            \ \nresponse to understand the model's confidence in the transcription.\
            \ \n`logprobs` only works with response_format set to `json` and only\
            \ with \nthe models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`.\n"
          items:
            $ref: '#/components/schemas/TranscriptionInclude'
          type: array
        language:
          description: 'The language of the input audio. Supplying the input language
            in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
            (e.g. `en`) format will improve accuracy and latency.

            '
          type: string
        model:
          anyOf:
          - type: string
          - enum:
            - whisper-1
            - gpt-4o-transcribe
            - gpt-4o-mini-transcribe
            type: string
            x-stainless-const: true
          description: 'ID of the model to use. The options are `gpt-4o-transcribe`,
            `gpt-4o-mini-transcribe`, and `whisper-1` (which is powered by our open
            source Whisper V2 model).

            '
          example: gpt-4o-transcribe
          x-oaiTypeLabel: string
        prompt:
          description: 'An optional text to guide the model''s style or continue a
            previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting)
            should match the audio language.

            '
          type: string
        response_format:
          $ref: '#/components/schemas/AudioResponseFormat'
        stream:
          default: false
          description: "If set to true, the model response data will be streamed to\
            \ the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\
            \ \nSee the [Streaming section of the Speech-to-Text guide](/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n\
            for more information.\n\nNote: Streaming is not supported for the `whisper-1`\
            \ model and will be ignored.\n"
          nullable: true
          type: boolean
        temperature:
          default: 0
          description: 'The sampling temperature, between 0 and 1. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will
            make it more focused and deterministic. If set to 0, the model will use
            [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
            increase the temperature until certain thresholds are hit.

            '
          type: number
        timestamp_granularities[]:
          default:
          - segment
          description: 'The timestamp granularities to populate for this transcription.
            `response_format` must be set `verbose_json` to use timestamp granularities.
            Either or both of these options are supported: `word`, or `segment`. Note:
            There is no additional latency for segment timestamps, but generating
            word timestamps incurs additional latency.

            '
          items:
            enum:
            - word
            - segment
            type: string
          type: array
      required:
      - file
      - model
      type: object
    CreateTranscriptionResponseJson:
      description: Represents a transcription response returned by model, based on
        the provided input.
      properties:
        logprobs:
          description: 'The log probabilities of the tokens in the transcription.
            Only returned with the models `gpt-4o-transcribe` and `gpt-4o-mini-transcribe`
            if `logprobs` is added to the `include` array.

            '
          items:
            properties:
              bytes:
                description: The bytes of the token.
                items:
                  type: number
                type: array
              logprob:
                description: The log probability of the token.
                type: number
              token:
                description: The token in the transcription.
                type: string
            type: object
          optional: true
          type: array
        text:
          description: The transcribed text.
          type: string
        usage:
          description: Token usage statistics for the request.
          oneOf:
          - $ref: '#/components/schemas/TranscriptTextUsageTokens'
            title: Token Usage
          - $ref: '#/components/schemas/TranscriptTextUsageDuration'
            title: Duration Usage
          type: object
      required:
      - text
      type: object
      x-oaiMeta:
        example: "{\n  \"text\": \"Imagine the wildest idea that you've ever had,\
          \ and you're curious about how it might scale to something that's a 100,\
          \ a 1,000 times bigger. This is a place where you can get to do that.\"\
          ,\n  \"usage\": {\n    \"type\": \"tokens\",\n    \"input_tokens\": 14,\n\
          \    \"input_token_details\": {\n      \"text_tokens\": 10,\n      \"audio_tokens\"\
          : 4\n    },\n    \"output_tokens\": 101,\n    \"total_tokens\": 115\n  }\n\
          }\n"
        group: audio
        name: The transcription object (JSON)
    CreateTranscriptionResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/TranscriptTextDeltaEvent'
      - $ref: '#/components/schemas/TranscriptTextDoneEvent'
      discriminator:
        propertyName: type
    CreateTranscriptionResponseVerboseJson:
      description: Represents a verbose json transcription response returned by model,
        based on the provided input.
      properties:
        duration:
          description: The duration of the input audio.
          type: number
        language:
          description: The language of the input audio.
          type: string
        segments:
          description: Segments of the transcribed text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
        text:
          description: The transcribed text.
          type: string
        usage:
          $ref: '#/components/schemas/TranscriptTextUsageDuration'
        words:
          description: Extracted words and their corresponding timestamps.
          items:
            $ref: '#/components/schemas/TranscriptionWord'
          type: array
      required:
      - language
      - duration
      - text
      type: object
      x-oaiMeta:
        example: "{\n  \"task\": \"transcribe\",\n  \"language\": \"english\",\n \
          \ \"duration\": 8.470000267028809,\n  \"text\": \"The beach was a popular\
          \ spot on a hot summer day. People were swimming in the ocean, building\
          \ sandcastles, and playing beach volleyball.\",\n  \"segments\": [\n   \
          \ {\n      \"id\": 0,\n      \"seek\": 0,\n      \"start\": 0.0,\n     \
          \ \"end\": 3.319999933242798,\n      \"text\": \" The beach was a popular\
          \ spot on a hot summer day.\",\n      \"tokens\": [\n        50364, 440,\
          \ 7534, 390, 257, 3743, 4008, 322, 257, 2368, 4266, 786, 13, 50530\n   \
          \   ],\n      \"temperature\": 0.0,\n      \"avg_logprob\": -0.2860786020755768,\n\
          \      \"compression_ratio\": 1.2363636493682861,\n      \"no_speech_prob\"\
          : 0.00985979475080967\n    },\n    ...\n  ],\n  \"usage\": {\n    \"type\"\
          : \"duration\",\n    \"seconds\": 9\n  }\n}\n"
        group: audio
        name: The transcription object (Verbose JSON)
    CreateTranslationRequest:
      additionalProperties: false
      properties:
        file:
          description: 'The audio file object (not file name) translate, in one of
            these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.

            '
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          anyOf:
          - type: string
          - enum:
            - whisper-1
            type: string
            x-stainless-const: true
          description: 'ID of the model to use. Only `whisper-1` (which is powered
            by our open source Whisper V2 model) is currently available.

            '
          example: whisper-1
          x-oaiTypeLabel: string
        prompt:
          description: 'An optional text to guide the model''s style or continue a
            previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting)
            should be in English.

            '
          type: string
        response_format:
          default: json
          description: 'The format of the output, in one of these options: `json`,
            `text`, `srt`, `verbose_json`, or `vtt`.

            '
          enum:
          - json
          - text
          - srt
          - verbose_json
          - vtt
          type: string
        temperature:
          default: 0
          description: 'The sampling temperature, between 0 and 1. Higher values like
            0.8 will make the output more random, while lower values like 0.2 will
            make it more focused and deterministic. If set to 0, the model will use
            [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
            increase the temperature until certain thresholds are hit.

            '
          type: number
      required:
      - file
      - model
      type: object
    CreateTranslationResponseJson:
      properties:
        text:
          type: string
      required:
      - text
      type: object
    CreateTranslationResponseVerboseJson:
      properties:
        duration:
          description: The duration of the input audio.
          type: number
        language:
          description: The language of the output translation (always `english`).
          type: string
        segments:
          description: Segments of the translated text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
        text:
          description: The translated text.
          type: string
      required:
      - language
      - duration
      - text
      type: object
    CreateUploadRequest:
      additionalProperties: false
      properties:
        bytes:
          description: 'The number of bytes in the file you are uploading.

            '
          format: int64
          type: integer
        filename:
          description: 'The name of the file to upload.

            '
          type: string
        mime_type:
          description: 'The MIME type of the file.


            This must fall within the supported MIME types for your file purpose.
            See the supported MIME types for assistants and vision.

            '
          type: string
        purpose:
          description: 'The intended purpose of the uploaded file.


            See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).

            '
          enum:
          - assistants
          - batch
          - fine-tune
          - vision
          type: string
      required:
      - filename
      - purpose
      - bytes
      - mime_type
      type: object
    CreateVectorStoreFileBatchRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector
            store should use. Useful for tools like `file_search` that can access
            files.
          items:
            type: string
          maxItems: 500
          minItems: 1
          type: array
      required:
      - file_ids
      type: object
    CreateVectorStoreFileRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        file_id:
          description: A [File](/docs/api-reference/files) ID that the vector store
            should use. Useful for tools like `file_search` that can access files.
          type: string
      required:
      - file_id
      type: object
    CreateVectorStoreRequest:
      additionalProperties: false
      properties:
        chunking_strategy:
          description: The chunking strategy used to chunk the file(s). If not set,
            will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
          - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
          - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
          type: object
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector
            store should use. Useful for tools like `file_search` that can access
            files.
          items:
            type: string
          maxItems: 500
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          type: string
      type: object
    DeleteAssistantResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - assistant.deleted
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteCertificateResponse:
      properties:
        id:
          description: The ID of the certificate that was deleted.
          type: string
        object:
          description: The object type, must be `certificate.deleted`.
          enum:
          - certificate.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      type: object
    DeleteFileResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - file
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteFineTuningCheckpointPermissionResponse:
      properties:
        deleted:
          description: Whether the fine-tuned model checkpoint permission was successfully
            deleted.
          type: boolean
        id:
          description: The ID of the fine-tuned model checkpoint permission that was
            deleted.
          type: string
        object:
          description: The object type, which is always "checkpoint.permission".
          enum:
          - checkpoint.permission
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteMessageResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - thread.message.deleted
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteModelResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          type: string
      required:
      - id
      - object
      - deleted
      type: object
    DeleteThreadResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - thread.deleted
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteVectorStoreFileResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - vector_store.file.deleted
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DeleteVectorStoreResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - vector_store.deleted
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - deleted
      type: object
    DoneEvent:
      description: Occurs when a stream ends.
      properties:
        data:
          enum:
          - '[DONE]'
          type: string
          x-stainless-const: true
        event:
          enum:
          - done
          type: string
          x-stainless-const: true
      required:
      - event
      - data
      type: object
      x-oaiMeta:
        dataDescription: '`data` is `[DONE]`'
    DoubleClick:
      description: 'A double click action.

        '
      properties:
        type:
          default: double_click
          description: "Specifies the event type. For a double click action, this\
            \ property is \nalways set to `double_click`.\n"
          enum:
          - double_click
          type: string
          x-stainless-const: true
        x:
          description: 'The x-coordinate where the double click occurred.

            '
          format: int64
          type: integer
        y:
          description: 'The y-coordinate where the double click occurred.

            '
          format: int64
          type: integer
      required:
      - type
      - x
      - y
      title: DoubleClick
      type: object
    Drag:
      description: 'A drag action.

        '
      properties:
        path:
          description: "An array of coordinates representing the path of the drag\
            \ action. Coordinates will appear as an array\nof objects, eg\n```\n[\n\
            \  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n"
          items:
            $ref: '#/components/schemas/Coordinate'
            description: 'A series of x/y coordinate pairs in the drag path.

              '
            title: Drag path coordinates
          type: array
        type:
          default: drag
          description: "Specifies the event type. For a drag action, this property\
            \ is \nalways set to `drag`.\n"
          enum:
          - drag
          type: string
          x-stainless-const: true
      required:
      - type
      - path
      title: Drag
      type: object
    EasyInputMessage:
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with the

        `assistant` role are presumed to have been generated by the model in previous

        interactions.

        '
      properties:
        content:
          description: 'Text, image, or audio input to the model, used to generate
            a response.

            Can also contain previous assistant responses.

            '
          oneOf:
          - description: 'A text input to the model.

              '
            title: Text input
            type: string
          - $ref: '#/components/schemas/InputMessageContentList'
        role:
          description: 'The role of the message input. One of `user`, `assistant`,
            `system`, or

            `developer`.

            '
          enum:
          - user
          - assistant
          - system
          - developer
          type: string
        type:
          description: 'The type of the message input. Always `message`.

            '
          enum:
          - message
          type: string
          x-stainless-const: true
      required:
      - role
      - content
      title: Input message
      type: object
    Embedding:
      description: 'Represents an embedding vector returned by embedding endpoint.

        '
      properties:
        embedding:
          description: 'The embedding vector, which is a list of floats. The length
            of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).

            '
          items:
            format: float
            type: number
          type: array
        index:
          description: The index of the embedding in the list of embeddings.
          format: int64
          type: integer
        object:
          description: The object type, which is always "embedding".
          enum:
          - embedding
          type: string
          x-stainless-const: true
      required:
      - index
      - object
      - embedding
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"embedding\",\n  \"embedding\": [\n    0.0023064255,\n\
          \    -0.009327292,\n    .... (1536 floats total for ada-002)\n    -0.0028842222,\n\
          \  ],\n  \"index\": 0\n}\n"
        name: The embedding object
    Error:
      properties:
        code:
          nullable: true
          type: string
        message:
          nullable: false
          type: string
        param:
          nullable: true
          type: string
        type:
          nullable: false
          type: string
      required:
      - type
      - message
      - param
      - code
      type: object
    ErrorEvent:
      description: Occurs when an [error](/docs/guides/error-codes#api-errors) occurs.
        This can happen due to an internal server error or a timeout.
      properties:
        data:
          $ref: '#/components/schemas/Error'
        event:
          enum:
          - error
          type: string
          x-stainless-const: true
      required:
      - event
      - data
      type: object
      x-oaiMeta:
        dataDescription: '`data` is an [error](/docs/guides/error-codes#api-errors)'
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
      - error
      type: object
    Eval:
      description: "An Eval object with a data source config and testing criteria.\n\
        An Eval represents a task to be done for your LLM integration.\nLike:\n -\
        \ Improve the quality of my chatbot\n - See how well my chatbot handles customer\
        \ support\n - Check if o4-mini is better at my usecase than gpt-4o\n"
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the eval was created.
          format: int64
          type: integer
        data_source_config:
          description: Configuration of data sources used in runs of the evaluation.
          oneOf:
          - $ref: '#/components/schemas/EvalCustomDataSourceConfig'
          - $ref: '#/components/schemas/EvalLogsDataSourceConfig'
          - $ref: '#/components/schemas/EvalStoredCompletionsDataSourceConfig'
          type: object
        id:
          description: Unique identifier for the evaluation.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the evaluation.
          example: Chatbot effectiveness Evaluation
          type: string
        object:
          default: eval
          description: The object type.
          enum:
          - eval
          type: string
          x-stainless-const: true
        testing_criteria:
          default: eval
          description: A list of testing criteria.
          items:
            oneOf:
            - $ref: '#/components/schemas/EvalGraderLabelModel'
            - $ref: '#/components/schemas/EvalGraderStringCheck'
            - $ref: '#/components/schemas/EvalGraderTextSimilarity'
            - $ref: '#/components/schemas/EvalGraderPython'
            - $ref: '#/components/schemas/EvalGraderScoreModel'
          type: array
      required:
      - id
      - data_source_config
      - object
      - testing_criteria
      - name
      - created_at
      - metadata
      title: Eval
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"eval\",\n  \"id\": \"eval_67abd54d9b0081909a86353f6fb9317a\"\
          ,\n  \"data_source_config\": {\n    \"type\": \"custom\",\n    \"item_schema\"\
          : {\n      \"type\": \"object\",\n      \"properties\": {\n        \"label\"\
          : {\"type\": \"string\"},\n      },\n      \"required\": [\"label\"]\n \
          \   },\n    \"include_sample_schema\": true\n  },\n  \"testing_criteria\"\
          : [\n    {\n      \"name\": \"My string check grader\",\n      \"type\"\
          : \"string_check\",\n      \"input\": \"{{sample.output_text}}\",\n    \
          \  \"reference\": \"{{item.label}}\",\n      \"operation\": \"eq\",\n  \
          \  }\n  ],\n  \"name\": \"External Data Eval\",\n  \"created_at\": 1739314509,\n\
          \  \"metadata\": {\n    \"test\": \"synthetics\",\n  }\n}\n"
        group: evals
        name: The eval object
    EvalApiError:
      description: 'An object representing an error response from the Eval API.

        '
      properties:
        code:
          description: The error code.
          type: string
        message:
          description: The error message.
          type: string
      required:
      - code
      - message
      title: EvalApiError
      type: object
      x-oaiMeta:
        example: "{\n  \"code\": \"internal_error\",\n  \"message\": \"The eval run\
          \ failed due to an internal error.\"\n}\n"
        group: evals
        name: The API error object
    EvalCustomDataSourceConfig:
      description: 'A CustomDataSourceConfig which specifies the schema of your `item`
        and optionally `sample` namespaces.

        The response schema defines the shape of the data that will be:

        - Used to define your testing criteria and

        - What data is required when creating a run

        '
      properties:
        schema:
          additionalProperties: true
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          example: "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"item\"\
            : {\n      \"type\": \"object\",\n      \"properties\": {\n        \"\
            label\": {\"type\": \"string\"},\n      },\n      \"required\": [\"label\"\
            ]\n    }\n  },\n  \"required\": [\"item\"]\n}\n"
          type: object
        type:
          default: custom
          description: The type of data source. Always `custom`.
          enum:
          - custom
          type: string
          x-stainless-const: true
      required:
      - type
      - schema
      title: CustomDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"custom\",\n  \"schema\": {\n    \"type\": \"object\"\
          ,\n    \"properties\": {\n      \"item\": {\n        \"type\": \"object\"\
          ,\n        \"properties\": {\n          \"label\": {\"type\": \"string\"\
          },\n        },\n        \"required\": [\"label\"]\n      }\n    },\n   \
          \ \"required\": [\"item\"]\n  }\n}\n"
        group: evals
        name: The eval custom data source config object
    EvalGraderLabelModel:
      allOf:
      - $ref: '#/components/schemas/GraderLabelModel'
      title: LabelModelGrader
      type: object
    EvalGraderPython:
      allOf:
      - $ref: '#/components/schemas/GraderPython'
      - properties:
          pass_threshold:
            description: The threshold for the score.
            type: number
        type: object
        x-oaiMeta:
          example: "{\n  \"type\": \"python\",\n  \"name\": \"Example python grader\"\
            ,\n  \"image_tag\": \"2025-05-08\",\n  \"source\": \"\"\"\ndef grade(sample:\
            \ dict, item: dict) -> float:\n    \\\"\"\"\n    Returns 1.0 if `output_text`\
            \ equals `label`, otherwise 0.0.\n    \\\"\"\"\n    output = sample.get(\"\
            output_text\")\n    label = item.get(\"label\")\n    return 1.0 if output\
            \ == label else 0.0\n\"\"\",\n  \"pass_threshold\": 0.8\n}\n"
          group: graders
          name: Eval Python Grader
      title: PythonGrader
      type: object
    EvalGraderScoreModel:
      allOf:
      - $ref: '#/components/schemas/GraderScoreModel'
      - properties:
          pass_threshold:
            description: The threshold for the score.
            type: number
        type: object
      title: ScoreModelGrader
      type: object
    EvalGraderStringCheck:
      allOf:
      - $ref: '#/components/schemas/GraderStringCheck'
      title: StringCheckGrader
      type: object
    EvalGraderTextSimilarity:
      allOf:
      - $ref: '#/components/schemas/GraderTextSimilarity'
      - properties:
          pass_threshold:
            description: The threshold for the score.
            type: number
        required:
        - pass_threshold
        type: object
        x-oaiMeta:
          example: "{\n  \"type\": \"text_similarity\",\n  \"name\": \"Example text\
            \ similarity grader\",\n  \"input\": \"{{sample.output_text}}\",\n  \"\
            reference\": \"{{item.label}}\",\n  \"pass_threshold\": 0.8,\n  \"evaluation_metric\"\
            : \"fuzzy_match\"\n}\n"
          group: graders
          name: Text Similarity Grader
      title: TextSimilarityGrader
      type: object
    EvalItem:
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role. Messages with the

        `assistant` role are presumed to have been generated by the model in previous

        interactions.

        '
      properties:
        content:
          description: 'Text inputs to the model - can contain template strings.

            '
          oneOf:
          - description: 'A text input to the model.

              '
            title: Text input
            type: string
          - $ref: '#/components/schemas/InputTextContent'
          - description: 'A text output from the model.

              '
            properties:
              text:
                description: 'The text output from the model.

                  '
                type: string
              type:
                description: 'The type of the output text. Always `output_text`.

                  '
                enum:
                - output_text
                type: string
                x-stainless-const: true
            required:
            - type
            - text
            title: Output text
            type: object
        role:
          description: 'The role of the message input. One of `user`, `assistant`,
            `system`, or

            `developer`.

            '
          enum:
          - user
          - assistant
          - system
          - developer
          type: string
        type:
          description: 'The type of the message input. Always `message`.

            '
          enum:
          - message
          type: string
          x-stainless-const: true
      required:
      - role
      - content
      title: Eval message object
      type: object
    EvalJsonlFileContentSource:
      properties:
        content:
          description: The content of the jsonl file.
          items:
            properties:
              item:
                additionalProperties: true
                type: object
              sample:
                additionalProperties: true
                type: object
            required:
            - item
            type: object
          type: array
        type:
          default: file_content
          description: The type of jsonl source. Always `file_content`.
          enum:
          - file_content
          type: string
          x-stainless-const: true
      required:
      - type
      - content
      title: EvalJsonlFileContentSource
      type: object
    EvalJsonlFileIdSource:
      properties:
        id:
          description: The identifier of the file.
          type: string
        type:
          default: file_id
          description: The type of jsonl source. Always `file_id`.
          enum:
          - file_id
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      title: EvalJsonlFileIdSource
      type: object
    EvalList:
      description: 'An object representing a list of evals.

        '
      properties:
        data:
          description: 'An array of eval objects.

            '
          items:
            $ref: '#/components/schemas/Eval'
          type: array
        first_id:
          description: The identifier of the first eval in the data array.
          type: string
        has_more:
          description: Indicates whether there are more evals available.
          type: boolean
        last_id:
          description: The identifier of the last eval in the data array.
          type: string
        object:
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      title: EvalList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
          : \"eval\",\n      \"id\": \"eval_67abd54d9b0081909a86353f6fb9317a\",\n\
          \      \"data_source_config\": {\n        \"type\": \"custom\",\n      \
          \  \"schema\": {\n          \"type\": \"object\",\n          \"properties\"\
          : {\n            \"item\": {\n              \"type\": \"object\",\n    \
          \          \"properties\": {\n                \"input\": {\n           \
          \       \"type\": \"string\"\n                },\n                \"ground_truth\"\
          : {\n                  \"type\": \"string\"\n                }\n       \
          \       },\n              \"required\": [\n                \"input\",\n\
          \                \"ground_truth\"\n              ]\n            }\n    \
          \      },\n          \"required\": [\n            \"item\"\n          ]\n\
          \        }\n      },\n      \"testing_criteria\": [\n        {\n       \
          \   \"name\": \"String check\",\n          \"id\": \"String check-2eaf2d8d-d649-4335-8148-9535a7ca73c2\"\
          ,\n          \"type\": \"string_check\",\n          \"input\": \"{{item.input}}\"\
          ,\n          \"reference\": \"{{item.ground_truth}}\",\n          \"operation\"\
          : \"eq\"\n        }\n      ],\n      \"name\": \"External Data Eval\",\n\
          \      \"created_at\": 1739314509,\n      \"metadata\": {},\n    }\n  ],\n\
          \  \"first_id\": \"eval_67abd54d9b0081909a86353f6fb9317a\",\n  \"last_id\"\
          : \"eval_67abd54d9b0081909a86353f6fb9317a\",\n  \"has_more\": true\n}\n"
        group: evals
        name: The eval list object
    EvalLogsDataSourceConfig:
      description: 'A LogsDataSourceConfig which specifies the metadata property of
        your logs query.

        This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.

        The schema returned by this data source config is used to defined what variables
        are available in your evals.

        `item` and `sample` are both defined when using this data source config.

        '
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        schema:
          additionalProperties: true
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          type: object
        type:
          default: logs
          description: The type of data source. Always `logs`.
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - type
      - schema
      title: LogsDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"logs\",\n  \"metadata\": {\n    \"language\": \"\
          english\"\n  },\n  \"schema\": {\n    \"type\": \"object\",\n    \"properties\"\
          : {\n      \"item\": {\n        \"type\": \"object\"\n      },\n      \"\
          sample\": {\n        \"type\": \"object\"\n      }\n    },\n    \"required\"\
          : [\n      \"item\",\n      \"sample\"\n    }\n}\n"
        group: evals
        name: The logs data source object for evals
    EvalResponsesSource:
      description: 'A EvalResponsesSource object describing a run data source configuration.

        '
      properties:
        created_after:
          description: Only include items created after this timestamp (inclusive).
            This is a query parameter used to select responses.
          format: int64
          minimum: 0
          nullable: true
          type: integer
        created_before:
          description: Only include items created before this timestamp (inclusive).
            This is a query parameter used to select responses.
          format: int64
          minimum: 0
          nullable: true
          type: integer
        instructions_search:
          description: Optional string to search the 'instructions' field. This is
            a query parameter used to select responses.
          nullable: true
          type: string
        metadata:
          description: Metadata filter for the responses. This is a query parameter
            used to select responses.
          nullable: true
          type: object
        model:
          description: The name of the model to find responses for. This is a query
            parameter used to select responses.
          nullable: true
          type: string
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
          description: Optional reasoning effort parameter. This is a query parameter
            used to select responses.
          nullable: true
        temperature:
          description: Sampling temperature. This is a query parameter used to select
            responses.
          nullable: true
          type: number
        tools:
          description: List of tool names. This is a query parameter used to select
            responses.
          items:
            type: string
          nullable: true
          type: array
        top_p:
          description: Nucleus sampling parameter. This is a query parameter used
            to select responses.
          nullable: true
          type: number
        type:
          description: The type of run data source. Always `responses`.
          enum:
          - responses
          type: string
        users:
          description: List of user identifiers. This is a query parameter used to
            select responses.
          items:
            type: string
          nullable: true
          type: array
      required:
      - type
      title: EvalResponsesSource
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"responses\",\n  \"model\": \"gpt-4o-mini-2024-07-18\"\
          ,\n  \"temperature\": 0.7,\n  \"top_p\": 1.0,\n  \"users\": [\"user1\",\
          \ \"user2\"],\n  \"tools\": [\"tool1\", \"tool2\"],\n  \"instructions_search\"\
          : \"You are a coding assistant\"\n}\n"
        group: eval runs
        name: The run data source object used to configure an individual run
    EvalRun:
      description: 'A schema representing an evaluation run.

        '
      properties:
        created_at:
          description: Unix timestamp (in seconds) when the evaluation run was created.
          format: int64
          type: integer
        data_source:
          description: Information about the run's data source.
          oneOf:
          - $ref: '#/components/schemas/CreateEvalJsonlRunDataSource'
          - $ref: '#/components/schemas/CreateEvalCompletionsRunDataSource'
          - $ref: '#/components/schemas/CreateEvalResponsesRunDataSource'
          type: object
        error:
          $ref: '#/components/schemas/EvalApiError'
        eval_id:
          description: The identifier of the associated evaluation.
          type: string
        id:
          description: Unique identifier for the evaluation run.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: The model that is evaluated, if applicable.
          type: string
        name:
          description: The name of the evaluation run.
          type: string
        object:
          default: eval.run
          description: The type of the object. Always "eval.run".
          enum:
          - eval.run
          type: string
          x-stainless-const: true
        per_model_usage:
          description: Usage statistics for each model during the evaluation run.
          items:
            properties:
              cached_tokens:
                description: The number of tokens retrieved from cache.
                format: int64
                type: integer
              completion_tokens:
                description: The number of completion tokens generated.
                format: int64
                type: integer
              invocation_count:
                description: The number of invocations.
                format: int64
                type: integer
              model_name:
                description: The name of the model.
                type: string
              prompt_tokens:
                description: The number of prompt tokens used.
                format: int64
                type: integer
              total_tokens:
                description: The total number of tokens used.
                format: int64
                type: integer
            required:
            - model_name
            - invocation_count
            - prompt_tokens
            - completion_tokens
            - total_tokens
            - cached_tokens
            type: object
          type: array
        per_testing_criteria_results:
          description: Results per testing criteria applied during the evaluation
            run.
          items:
            properties:
              failed:
                description: Number of tests failed for this criteria.
                format: int64
                type: integer
              passed:
                description: Number of tests passed for this criteria.
                format: int64
                type: integer
              testing_criteria:
                description: A description of the testing criteria.
                type: string
            required:
            - testing_criteria
            - passed
            - failed
            type: object
          type: array
        report_url:
          description: The URL to the rendered evaluation run report on the UI dashboard.
          type: string
        result_counts:
          description: Counters summarizing the outcomes of the evaluation run.
          properties:
            errored:
              description: Number of output items that resulted in an error.
              format: int64
              type: integer
            failed:
              description: Number of output items that failed to pass the evaluation.
              format: int64
              type: integer
            passed:
              description: Number of output items that passed the evaluation.
              format: int64
              type: integer
            total:
              description: Total number of executed output items.
              format: int64
              type: integer
          required:
          - total
          - errored
          - failed
          - passed
          type: object
        status:
          description: The status of the evaluation run.
          type: string
      required:
      - object
      - id
      - eval_id
      - status
      - model
      - name
      - created_at
      - report_url
      - result_counts
      - per_model_usage
      - per_testing_criteria_results
      - data_source
      - metadata
      - error
      title: EvalRun
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"eval.run\",\n  \"id\": \"evalrun_67e57965b480819094274e3a32235e4c\"\
          ,\n  \"eval_id\": \"eval_67e579652b548190aaa83ada4b125f47\",\n  \"report_url\"\
          : \"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47?run_id=evalrun_67e57965b480819094274e3a32235e4c\"\
          ,\n  \"status\": \"queued\",\n  \"model\": \"gpt-4o-mini\",\n  \"name\"\
          : \"gpt-4o-mini\",\n  \"created_at\": 1743092069,\n  \"result_counts\":\
          \ {\n    \"total\": 0,\n    \"errored\": 0,\n    \"failed\": 0,\n    \"\
          passed\": 0\n  },\n  \"per_model_usage\": null,\n  \"per_testing_criteria_results\"\
          : null,\n  \"data_source\": {\n    \"type\": \"completions\",\n    \"source\"\
          : {\n      \"type\": \"file_content\",\n      \"content\": [\n        {\n\
          \          \"item\": {\n            \"input\": \"Tech Company Launches Advanced\
          \ Artificial Intelligence Platform\",\n            \"ground_truth\": \"\
          Technology\"\n          }\n        },\n        {\n          \"item\": {\n\
          \            \"input\": \"Central Bank Increases Interest Rates Amid Inflation\
          \ Concerns\",\n            \"ground_truth\": \"Markets\"\n          }\n\
          \        },\n        {\n          \"item\": {\n            \"input\": \"\
          International Summit Addresses Climate Change Strategies\",\n          \
          \  \"ground_truth\": \"World\"\n          }\n        },\n        {\n   \
          \       \"item\": {\n            \"input\": \"Major Retailer Reports Record-Breaking\
          \ Holiday Sales\",\n            \"ground_truth\": \"Business\"\n       \
          \   }\n        },\n        {\n          \"item\": {\n            \"input\"\
          : \"National Team Qualifies for World Championship Finals\",\n         \
          \   \"ground_truth\": \"Sports\"\n          }\n        },\n        {\n \
          \         \"item\": {\n            \"input\": \"Stock Markets Rally After\
          \ Positive Economic Data Released\",\n            \"ground_truth\": \"Markets\"\
          \n          }\n        },\n        {\n          \"item\": {\n          \
          \  \"input\": \"Global Manufacturer Announces Merger with Competitor\",\n\
          \            \"ground_truth\": \"Business\"\n          }\n        },\n \
          \       {\n          \"item\": {\n            \"input\": \"Breakthrough\
          \ in Renewable Energy Technology Unveiled\",\n            \"ground_truth\"\
          : \"Technology\"\n          }\n        },\n        {\n          \"item\"\
          : {\n            \"input\": \"World Leaders Sign Historic Climate Agreement\"\
          ,\n            \"ground_truth\": \"World\"\n          }\n        },\n  \
          \      {\n          \"item\": {\n            \"input\": \"Professional Athlete\
          \ Sets New Record in Championship Event\",\n            \"ground_truth\"\
          : \"Sports\"\n          }\n        },\n        {\n          \"item\": {\n\
          \            \"input\": \"Financial Institutions Adapt to New Regulatory\
          \ Requirements\",\n            \"ground_truth\": \"Business\"\n        \
          \  }\n        },\n        {\n          \"item\": {\n            \"input\"\
          : \"Tech Conference Showcases Advances in Artificial Intelligence\",\n \
          \           \"ground_truth\": \"Technology\"\n          }\n        },\n\
          \        {\n          \"item\": {\n            \"input\": \"Global Markets\
          \ Respond to Oil Price Fluctuations\",\n            \"ground_truth\": \"\
          Markets\"\n          }\n        },\n        {\n          \"item\": {\n \
          \           \"input\": \"International Cooperation Strengthened Through\
          \ New Treaty\",\n            \"ground_truth\": \"World\"\n          }\n\
          \        },\n        {\n          \"item\": {\n            \"input\": \"\
          Sports League Announces Revised Schedule for Upcoming Season\",\n      \
          \      \"ground_truth\": \"Sports\"\n          }\n        }\n      ]\n \
          \   },\n    \"input_messages\": {\n      \"type\": \"template\",\n     \
          \ \"template\": [\n        {\n          \"type\": \"message\",\n       \
          \   \"role\": \"developer\",\n          \"content\": {\n            \"type\"\
          : \"input_text\",\n            \"text\": \"Categorize a given news headline\
          \ into one of the following topics: Technology, Markets, World, Business,\
          \ or Sports.\\n\\n# Steps\\n\\n1. Analyze the content of the news headline\
          \ to understand its primary focus.\\n2. Extract the subject matter, identifying\
          \ any key indicators or keywords.\\n3. Use the identified indicators to\
          \ determine the most suitable category out of the five options: Technology,\
          \ Markets, World, Business, or Sports.\\n4. Ensure only one category is\
          \ selected per headline.\\n\\n# Output Format\\n\\nRespond with the chosen\
          \ category as a single word. For instance: \\\"Technology\\\", \\\"Markets\\\
          \", \\\"World\\\", \\\"Business\\\", or \\\"Sports\\\".\\n\\n# Examples\\\
          n\\n**Input**: \\\"Apple Unveils New iPhone Model, Featuring Advanced AI\
          \ Features\\\"  \\n**Output**: \\\"Technology\\\"\\n\\n**Input**: \\\"Global\
          \ Stocks Mixed as Investors Await Central Bank Decisions\\\"  \\n**Output**:\
          \ \\\"Markets\\\"\\n\\n**Input**: \\\"War in Ukraine: Latest Updates on\
          \ Negotiation Status\\\"  \\n**Output**: \\\"World\\\"\\n\\n**Input**: \\\
          \"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\"  \\n**Output**:\
          \ \\\"Business\\\"\\n\\n**Input**: \\\"Manchester United Secures Win in\
          \ Premier League Football Match\\\"  \\n**Output**: \\\"Sports\\\" \\n\\\
          n# Notes\\n\\n- If the headline appears to fit into more than one category,\
          \ choose the most dominant theme.\\n- Keywords or phrases such as \\\"stocks\\\
          \", \\\"company acquisition\\\", \\\"match\\\", or technological brands\
          \ can be good indicators for classification.\\n\"\n          }\n       \
          \ },\n        {\n          \"type\": \"message\",\n          \"role\": \"\
          user\",\n          \"content\": {\n            \"type\": \"input_text\"\
          ,\n            \"text\": \"{{item.input}}\"\n          }\n        }\n  \
          \    ]\n    },\n    \"model\": \"gpt-4o-mini\",\n    \"sampling_params\"\
          : {\n      \"seed\": 42,\n      \"temperature\": 1.0,\n      \"top_p\":\
          \ 1.0,\n      \"max_completions_tokens\": 2048\n    }\n  },\n  \"error\"\
          : null,\n  \"metadata\": {}\n}\n"
        group: evals
        name: The eval run object
    EvalRunList:
      description: 'An object representing a list of runs for an evaluation.

        '
      properties:
        data:
          description: 'An array of eval run objects.

            '
          items:
            $ref: '#/components/schemas/EvalRun'
          type: array
        first_id:
          description: The identifier of the first eval run in the data array.
          type: string
        has_more:
          description: Indicates whether there are more evals available.
          type: boolean
        last_id:
          description: The identifier of the last eval run in the data array.
          type: string
        object:
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      title: EvalRunList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
          : \"eval.run\",\n      \"id\": \"evalrun_67b7fbdad46c819092f6fe7a14189620\"\
          ,\n      \"eval_id\": \"eval_67b7fa9a81a88190ab4aa417e397ea21\",\n     \
          \ \"report_url\": \"https://platform.openai.com/evaluations/eval_67b7fa9a81a88190ab4aa417e397ea21?run_id=evalrun_67b7fbdad46c819092f6fe7a14189620\"\
          ,\n      \"status\": \"completed\",\n      \"model\": \"o3-mini\",\n   \
          \   \"name\": \"Academic Assistant\",\n      \"created_at\": 1740110812,\n\
          \      \"result_counts\": {\n        \"total\": 171,\n        \"errored\"\
          : 0,\n        \"failed\": 80,\n        \"passed\": 91\n      },\n      \"\
          per_model_usage\": null,\n      \"per_testing_criteria_results\": [\n  \
          \      {\n          \"testing_criteria\": \"String check grader\",\n   \
          \       \"passed\": 91,\n          \"failed\": 80\n        }\n      ],\n\
          \      \"run_data_source\": {\n        \"type\": \"completions\",\n    \
          \    \"template_messages\": [\n          {\n            \"type\": \"message\"\
          ,\n            \"role\": \"system\",\n            \"content\": {\n     \
          \         \"type\": \"input_text\",\n              \"text\": \"You are a\
          \ helpful assistant.\"\n            }\n          },\n          {\n     \
          \       \"type\": \"message\",\n            \"role\": \"user\",\n      \
          \      \"content\": {\n              \"type\": \"input_text\",\n       \
          \       \"text\": \"Hello, can you help me with my homework?\"\n       \
          \     }\n          }\n        ],\n        \"datasource_reference\": null,\n\
          \        \"model\": \"o3-mini\",\n        \"max_completion_tokens\": null,\n\
          \        \"seed\": null,\n        \"temperature\": null,\n        \"top_p\"\
          : null\n      },\n      \"error\": null,\n      \"metadata\": {\"test\"\
          : \"synthetics\"}\n    }\n  ],\n  \"first_id\": \"evalrun_67abd54d60ec8190832b46859da808f7\"\
          ,\n  \"last_id\": \"evalrun_67abd54d60ec8190832b46859da808f7\",\n  \"has_more\"\
          : false\n}\n"
        group: evals
        name: The eval run list object
    EvalRunOutputItem:
      description: 'A schema representing an evaluation run output item.

        '
      properties:
        created_at:
          description: Unix timestamp (in seconds) when the evaluation run was created.
          format: int64
          type: integer
        datasource_item:
          additionalProperties: true
          description: Details of the input data source item.
          type: object
        datasource_item_id:
          description: The identifier for the data source item.
          format: int64
          type: integer
        eval_id:
          description: The identifier of the evaluation group.
          type: string
        id:
          description: Unique identifier for the evaluation run output item.
          type: string
        object:
          default: eval.run.output_item
          description: The type of the object. Always "eval.run.output_item".
          enum:
          - eval.run.output_item
          type: string
          x-stainless-const: true
        results:
          description: A list of results from the evaluation run.
          items:
            additionalProperties: true
            description: A result object.
            type: object
          type: array
        run_id:
          description: The identifier of the evaluation run associated with this output
            item.
          type: string
        sample:
          description: A sample containing the input and output of the evaluation
            run.
          properties:
            error:
              $ref: '#/components/schemas/EvalApiError'
            finish_reason:
              description: The reason why the sample generation was finished.
              type: string
            input:
              description: An array of input messages.
              items:
                description: An input message.
                properties:
                  content:
                    description: The content of the message.
                    type: string
                  role:
                    description: The role of the message sender (e.g., system, user,
                      developer).
                    type: string
                required:
                - role
                - content
                type: object
              type: array
            max_completion_tokens:
              description: The maximum number of tokens allowed for completion.
              format: int64
              type: integer
            model:
              description: The model used for generating the sample.
              type: string
            output:
              description: An array of output messages.
              items:
                properties:
                  content:
                    description: The content of the message.
                    type: string
                  role:
                    description: The role of the message (e.g. "system", "assistant",
                      "user").
                    type: string
                type: object
              type: array
            seed:
              description: The seed used for generating the sample.
              format: int64
              type: integer
            temperature:
              description: The sampling temperature used.
              type: number
            top_p:
              description: The top_p value used for sampling.
              type: number
            usage:
              description: Token usage details for the sample.
              properties:
                cached_tokens:
                  description: The number of tokens retrieved from cache.
                  format: int64
                  type: integer
                completion_tokens:
                  description: The number of completion tokens generated.
                  format: int64
                  type: integer
                prompt_tokens:
                  description: The number of prompt tokens used.
                  format: int64
                  type: integer
                total_tokens:
                  description: The total number of tokens used.
                  format: int64
                  type: integer
              required:
              - total_tokens
              - completion_tokens
              - prompt_tokens
              - cached_tokens
              type: object
          required:
          - input
          - output
          - finish_reason
          - model
          - usage
          - error
          - temperature
          - max_completion_tokens
          - top_p
          - seed
          type: object
        status:
          description: The status of the evaluation run.
          type: string
      required:
      - object
      - id
      - run_id
      - eval_id
      - created_at
      - status
      - datasource_item_id
      - datasource_item
      - results
      - sample
      title: EvalRunOutputItem
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"eval.run.output_item\",\n  \"id\": \"outputitem_67abd55eb6548190bb580745d5644a33\"\
          ,\n  \"run_id\": \"evalrun_67abd54d60ec8190832b46859da808f7\",\n  \"eval_id\"\
          : \"eval_67abd54d9b0081909a86353f6fb9317a\",\n  \"created_at\": 1739314509,\n\
          \  \"status\": \"pass\",\n  \"datasource_item_id\": 137,\n  \"datasource_item\"\
          : {\n      \"teacher\": \"To grade essays, I only check for style, content,\
          \ and grammar.\",\n      \"student\": \"I am a student who is trying to\
          \ write the best essay.\"\n  },\n  \"results\": [\n    {\n      \"name\"\
          : \"String Check Grader\",\n      \"type\": \"string-check-grader\",\n \
          \     \"score\": 1.0,\n      \"passed\": true,\n    }\n  ],\n  \"sample\"\
          : {\n    \"input\": [\n      {\n        \"role\": \"system\",\n        \"\
          content\": \"You are an evaluator bot...\"\n      },\n      {\n        \"\
          role\": \"user\",\n        \"content\": \"You are assessing...\"\n     \
          \ }\n    ],\n    \"output\": [\n      {\n        \"role\": \"assistant\"\
          ,\n        \"content\": \"The rubric is not clear nor concise.\"\n     \
          \ }\n    ],\n    \"finish_reason\": \"stop\",\n    \"model\": \"gpt-4o-2024-08-06\"\
          ,\n    \"usage\": {\n      \"total_tokens\": 521,\n      \"completion_tokens\"\
          : 2,\n      \"prompt_tokens\": 519,\n      \"cached_tokens\": 0\n    },\n\
          \    \"error\": null,\n    \"temperature\": 1.0,\n    \"max_completion_tokens\"\
          : 2048,\n    \"top_p\": 1.0,\n    \"seed\": 42\n  }\n}\n"
        group: evals
        name: The eval run output item object
    EvalRunOutputItemList:
      description: 'An object representing a list of output items for an evaluation
        run.

        '
      properties:
        data:
          description: 'An array of eval run output item objects.

            '
          items:
            $ref: '#/components/schemas/EvalRunOutputItem'
          type: array
        first_id:
          description: The identifier of the first eval run output item in the data
            array.
          type: string
        has_more:
          description: Indicates whether there are more eval run output items available.
          type: boolean
        last_id:
          description: The identifier of the last eval run output item in the data
            array.
          type: string
        object:
          default: list
          description: 'The type of this object. It is always set to "list".

            '
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      title: EvalRunOutputItemList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
          : \"eval.run.output_item\",\n      \"id\": \"outputitem_67abd55eb6548190bb580745d5644a33\"\
          ,\n      \"run_id\": \"evalrun_67abd54d60ec8190832b46859da808f7\",\n   \
          \   \"eval_id\": \"eval_67abd54d9b0081909a86353f6fb9317a\",\n      \"created_at\"\
          : 1739314509,\n      \"status\": \"pass\",\n      \"datasource_item_id\"\
          : 137,\n      \"datasource_item\": {\n          \"teacher\": \"To grade\
          \ essays, I only check for style, content, and grammar.\",\n          \"\
          student\": \"I am a student who is trying to write the best essay.\"\n \
          \     },\n      \"results\": [\n        {\n          \"name\": \"String\
          \ Check Grader\",\n          \"type\": \"string-check-grader\",\n      \
          \    \"score\": 1.0,\n          \"passed\": true,\n        }\n      ],\n\
          \      \"sample\": {\n        \"input\": [\n          {\n            \"\
          role\": \"system\",\n            \"content\": \"You are an evaluator bot...\"\
          \n          },\n          {\n            \"role\": \"user\",\n         \
          \   \"content\": \"You are assessing...\"\n          }\n        ],\n   \
          \     \"output\": [\n          {\n            \"role\": \"assistant\",\n\
          \            \"content\": \"The rubric is not clear nor concise.\"\n   \
          \       }\n        ],\n        \"finish_reason\": \"stop\",\n        \"\
          model\": \"gpt-4o-2024-08-06\",\n        \"usage\": {\n          \"total_tokens\"\
          : 521,\n          \"completion_tokens\": 2,\n          \"prompt_tokens\"\
          : 519,\n          \"cached_tokens\": 0\n        },\n        \"error\": null,\n\
          \        \"temperature\": 1.0,\n        \"max_completion_tokens\": 2048,\n\
          \        \"top_p\": 1.0,\n        \"seed\": 42\n      }\n    },\n  ],\n\
          \  \"first_id\": \"outputitem_67abd55eb6548190bb580745d5644a33\",\n  \"\
          last_id\": \"outputitem_67abd55eb6548190bb580745d5644a33\",\n  \"has_more\"\
          : false\n}\n"
        group: evals
        name: The eval run output item list object
    EvalStoredCompletionsDataSourceConfig:
      deprecated: true
      description: 'Deprecated in favor of LogsDataSourceConfig.

        '
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        schema:
          additionalProperties: true
          description: 'The json schema for the run data source items.

            Learn how to build JSON schemas [here](https://json-schema.org/).

            '
          type: object
        type:
          default: stored_completions
          description: The type of data source. Always `stored_completions`.
          enum:
          - stored_completions
          type: string
          x-stainless-const: true
      required:
      - type
      - schema
      title: StoredCompletionsDataSourceConfig
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"stored_completions\",\n  \"metadata\": {\n    \"\
          language\": \"english\"\n  },\n  \"schema\": {\n    \"type\": \"object\"\
          ,\n    \"properties\": {\n      \"item\": {\n        \"type\": \"object\"\
          \n      },\n      \"sample\": {\n        \"type\": \"object\"\n      }\n\
          \    },\n    \"required\": [\n      \"item\",\n      \"sample\"\n    }\n\
          }\n"
        group: evals
        name: The stored completions data source object for evals
    EvalStoredCompletionsSource:
      description: 'A StoredCompletionsRunDataSource configuration describing a set
        of filters

        '
      properties:
        created_after:
          description: An optional Unix timestamp to filter items created after this
            time.
          format: int64
          nullable: true
          type: integer
        created_before:
          description: An optional Unix timestamp to filter items created before this
            time.
          format: int64
          nullable: true
          type: integer
        limit:
          description: An optional maximum number of items to return.
          format: int64
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: An optional model to filter by (e.g., 'gpt-4o').
          nullable: true
          type: string
        type:
          default: stored_completions
          description: The type of source. Always `stored_completions`.
          enum:
          - stored_completions
          type: string
          x-stainless-const: true
      required:
      - type
      title: StoredCompletionsRunDataSource
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"stored_completions\",\n  \"model\": \"gpt-4o\"\
          ,\n  \"created_after\": 1668124800,\n  \"created_before\": 1668124900,\n\
          \  \"limit\": 100,\n  \"metadata\": {}\n}\n"
        group: eval runs
        name: The stored completions data source object used to configure an individual
          run
    FileCitationBody:
      description: A citation to a file.
      properties:
        file_id:
          description: The ID of the file.
          type: string
        filename:
          description: The filename of the file cited.
          type: string
        index:
          description: The index of the file in the list of files.
          format: int64
          type: integer
        type:
          default: file_citation
          description: The type of the file citation. Always `file_citation`.
          enum:
          - file_citation
          type: string
          x-stainless-const: true
      required:
      - type
      - file_id
      - index
      - filename
      title: File citation
      type: object
    FilePath:
      description: 'A path to a file.

        '
      properties:
        file_id:
          description: 'The ID of the file.

            '
          type: string
        index:
          description: 'The index of the file in the list of files.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the file path. Always `file_path`.

            '
          enum:
          - file_path
          type: string
          x-stainless-const: true
      required:
      - type
      - file_id
      - index
      title: File path
      type: object
    FileSearchRanker:
      description: The ranker to use for the file search. If not specified will use
        the `auto` ranker.
      enum:
      - auto
      - default_2024_08_21
      type: string
    FileSearchRankingOptions:
      description: 'The ranking options for the file search. If not specified, the
        file search tool will use the `auto` ranker and a score_threshold of 0.


        See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings)
        for more information.

        '
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
      - score_threshold
      title: File search tool call ranking options
      type: object
    FileSearchTool:
      description: A tool that searches for relevant content from uploaded files.
        Learn more about the [file search tool](https://platform.openai.com/docs/guides/tools-file-search).
      properties:
        filters:
          $ref: '#/components/schemas/Filters'
          description: A filter to apply.
          nullable: true
        max_num_results:
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
          format: int64
          type: integer
        ranking_options:
          $ref: '#/components/schemas/RankingOptions'
          description: Ranking options for search.
        type:
          default: file_search
          description: The type of the file search tool. Always `file_search`.
          enum:
          - file_search
          type: string
          x-stainless-const: true
        vector_store_ids:
          description: The IDs of the vector stores to search.
          items:
            type: string
          type: array
      required:
      - type
      - vector_store_ids
      title: File search
      type: object
    FileSearchToolCall:
      description: "The results of a file search tool call. See the \n[file search\
        \ guide](/docs/guides/tools-file-search) for more information.\n"
      properties:
        id:
          description: 'The unique ID of the file search tool call.

            '
          type: string
        queries:
          description: 'The queries used to search for files.

            '
          items:
            type: string
          type: array
        results:
          description: 'The results of the file search tool call.

            '
          items:
            properties:
              attributes:
                $ref: '#/components/schemas/VectorStoreFileAttributes'
              file_id:
                description: 'The unique ID of the file.

                  '
                type: string
              filename:
                description: 'The name of the file.

                  '
                type: string
              score:
                description: 'The relevance score of the file - a value between 0
                  and 1.

                  '
                format: float
                type: number
              text:
                description: 'The text that was retrieved from the file.

                  '
                type: string
            type: object
          nullable: true
          type: array
        status:
          description: "The status of the file search tool call. One of `in_progress`,\
            \ \n`searching`, `incomplete` or `failed`,\n"
          enum:
          - in_progress
          - searching
          - completed
          - incomplete
          - failed
          type: string
        type:
          description: 'The type of the file search tool call. Always `file_search_call`.

            '
          enum:
          - file_search_call
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - status
      - queries
      title: File search tool call
      type: object
    Filters:
      anyOf:
      - $ref: '#/components/schemas/ComparisonFilter'
      - $ref: '#/components/schemas/CompoundFilter'
    FineTuneChatCompletionRequestAssistantMessage:
      allOf:
      - deprecated: false
        properties:
          weight:
            description: Controls whether the assistant message is trained against
              (0 or 1)
            enum:
            - 0
            - 1
            format: int64
            type: integer
        title: Assistant message
        type: object
      - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      required:
      - role
    FineTuneChatRequestInput:
      description: 'The per-line training example of a fine-tuning input file for
        chat models using the supervised method.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      properties:
        functions:
          deprecated: true
          description: A list of functions the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          maxItems: 128
          minItems: 1
          type: array
        messages:
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
            - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
          minItems: 1
          type: array
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        tools:
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          type: array
      type: object
      x-oaiMeta:
        example: "{\n  \"messages\": [\n    { \"role\": \"user\", \"content\": \"\
          What is the weather in San Francisco?\" },\n    {\n      \"role\": \"assistant\"\
          ,\n      \"tool_calls\": [\n        {\n          \"id\": \"call_id\",\n\
          \          \"type\": \"function\",\n          \"function\": {\n        \
          \    \"name\": \"get_current_weather\",\n            \"arguments\": \"{\\\
          \"location\\\": \\\"San Francisco, USA\\\", \\\"format\\\": \\\"celsius\\\
          \"}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\"\
          : false,\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"\
          function\": {\n        \"name\": \"get_current_weather\",\n        \"description\"\
          : \"Get the current weather\",\n        \"parameters\": {\n          \"\
          type\": \"object\",\n          \"properties\": {\n            \"location\"\
          : {\n                \"type\": \"string\",\n                \"description\"\
          : \"The city and country, eg. San Francisco, USA\"\n            },\n   \
          \         \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"\
          fahrenheit\"] }\n          },\n          \"required\": [\"location\", \"\
          format\"]\n        }\n      }\n    }\n  ]\n}\n"
        name: Training format for chat models using the supervised method
    FineTuneDPOHyperparameters:
      description: The hyperparameters used for the DPO fine-tuning job.
      properties:
        batch_size:
          default: auto
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 256
            minimum: 1
            type: integer
        beta:
          default: auto
          description: 'The beta value for the DPO method. A higher beta value will
            increase the weight of the penalty between the policy and reference model.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - exclusiveMinimum: true
            maximum: 2
            minimum: 0
            type: number
        learning_rate_multiplier:
          default: auto
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - exclusiveMinimum: true
            minimum: 0
            type: number
        n_epochs:
          default: auto
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 50
            minimum: 1
            type: integer
      type: object
    FineTuneDPOMethod:
      description: Configuration for the DPO fine-tuning method.
      properties:
        hyperparameters:
          $ref: '#/components/schemas/FineTuneDPOHyperparameters'
      type: object
    FineTuneMethod:
      description: The method used for fine-tuning.
      properties:
        dpo:
          $ref: '#/components/schemas/FineTuneDPOMethod'
        reinforcement:
          $ref: '#/components/schemas/FineTuneReinforcementMethod'
        supervised:
          $ref: '#/components/schemas/FineTuneSupervisedMethod'
        type:
          description: The type of method. Is either `supervised`, `dpo`, or `reinforcement`.
          enum:
          - supervised
          - dpo
          - reinforcement
          type: string
      required:
      - type
      type: object
    FineTunePreferenceRequestInput:
      description: 'The per-line training example of a fine-tuning input file for
        chat models using the dpo method.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      properties:
        input:
          properties:
            messages:
              items:
                oneOf:
                - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
                - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
                - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
              minItems: 1
              type: array
            parallel_tool_calls:
              $ref: '#/components/schemas/ParallelToolCalls'
            tools:
              description: A list of tools the model may generate JSON inputs for.
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
              type: array
          type: object
        non_preferred_output:
          description: The non-preferred completion message for the output.
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
          maxItems: 1
          type: array
        preferred_output:
          description: The preferred completion message for the output.
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
          maxItems: 1
          type: array
      type: object
      x-oaiMeta:
        example: "{\n  \"input\": {\n    \"messages\": [\n      { \"role\": \"user\"\
          , \"content\": \"What is the weather in San Francisco?\" }\n    ]\n  },\n\
          \  \"preferred_output\": [\n    {\n      \"role\": \"assistant\",\n    \
          \  \"content\": \"The weather in San Francisco is 70 degrees Fahrenheit.\"\
          \n    }\n  ],\n  \"non_preferred_output\": [\n    {\n      \"role\": \"\
          assistant\",\n      \"content\": \"The weather in San Francisco is 21 degrees\
          \ Celsius.\"\n    }\n  ]\n}\n"
        name: Training format for chat models using the preference method
    FineTuneReinforcementHyperparameters:
      description: The hyperparameters used for the reinforcement fine-tuning job.
      properties:
        batch_size:
          default: auto
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 256
            minimum: 1
            type: integer
        compute_multiplier:
          default: auto
          description: 'Multiplier on amount of compute used for exploring search
            space during training.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - exclusiveMinimum: true
            maximum: 10
            minimum: 1.0e-05
            type: number
        eval_interval:
          default: auto
          description: 'The number of training steps between evaluation runs.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            minimum: 1
            type: integer
        eval_samples:
          default: auto
          description: 'Number of evaluation samples to generate per training step.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            minimum: 1
            type: integer
        learning_rate_multiplier:
          default: auto
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - exclusiveMinimum: true
            minimum: 0
            type: number
        n_epochs:
          default: auto
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 50
            minimum: 1
            type: integer
        reasoning_effort:
          default: default
          description: 'Level of reasoning effort.

            '
          enum:
          - default
          - low
          - medium
          - high
          type: string
      type: object
    FineTuneReinforcementMethod:
      description: Configuration for the reinforcement fine-tuning method.
      properties:
        grader:
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
          type: object
        hyperparameters:
          $ref: '#/components/schemas/FineTuneReinforcementHyperparameters'
      required:
      - grader
      type: object
    FineTuneReinforcementRequestInput:
      description: 'Per-line training example for reinforcement fine-tuning. Note
        that `messages` and `tools` are the only reserved keywords.

        Any other arbitrary key-value data can be included on training datapoints
        and will be available to reference during grading under the `{{ item.XXX }}`
        template variable.

        Input messages may contain text or image content only. Audio and file input
        messages

        are not currently supported for fine-tuning.

        '
      properties:
        messages:
          items:
            oneOf:
            - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
            - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
            - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
          minItems: 1
          type: array
        tools:
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          type: array
      required:
      - messages
      type: object
      unevaluatedProperties: true
      x-oaiMeta:
        example: "{\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"\
          content\": \"Your task is to take a chemical in SMILES format and predict\
          \ the number of hydrobond bond donors and acceptors according to Lipinkski's\
          \ rule. CCN(CC)CCC(=O)c1sc(N)nc1C\"\n    },\n  ],\n  # Any other JSON data\
          \ can be inserted into an example and referenced during RFT grading\n  \"\
          reference_answer\": {\n    \"donor_bond_counts\": 5,\n    \"acceptor_bond_counts\"\
          : 7\n  }\n}\n"
        name: Training format for reasoning models using the reinforcement method
    FineTuneSupervisedHyperparameters:
      description: The hyperparameters used for the fine-tuning job.
      properties:
        batch_size:
          default: auto
          description: 'Number of examples in each batch. A larger batch size means
            that model parameters are updated less frequently, but with lower variance.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 256
            minimum: 1
            type: integer
        learning_rate_multiplier:
          default: auto
          description: 'Scaling factor for the learning rate. A smaller learning rate
            may be useful to avoid overfitting.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - exclusiveMinimum: true
            minimum: 0
            type: number
        n_epochs:
          default: auto
          description: 'The number of epochs to train the model for. An epoch refers
            to one full cycle through the training dataset.

            '
          oneOf:
          - enum:
            - auto
            type: string
            x-stainless-const: true
          - format: int64
            maximum: 50
            minimum: 1
            type: integer
      type: object
    FineTuneSupervisedMethod:
      description: Configuration for the supervised fine-tuning method.
      properties:
        hyperparameters:
          $ref: '#/components/schemas/FineTuneSupervisedHyperparameters'
      type: object
    FineTuningCheckpointPermission:
      description: 'The `checkpoint.permission` object represents a permission for
        a fine-tuned model checkpoint.

        '
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the permission was
            created.
          format: int64
          type: integer
        id:
          description: The permission identifier, which can be referenced in the API
            endpoints.
          type: string
        object:
          description: The object type, which is always "checkpoint.permission".
          enum:
          - checkpoint.permission
          type: string
          x-stainless-const: true
        project_id:
          description: The project identifier that the permission is for.
          type: string
      required:
      - created_at
      - id
      - object
      - project_id
      title: FineTuningCheckpointPermission
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"checkpoint.permission\",\n  \"id\": \"cp_zc4Q7MP6XxulcVzj4MZdwsAB\"\
          ,\n  \"created_at\": 1712211699,\n  \"project_id\": \"proj_abGMw1llN8IrBb6SvvY5A1iH\"\
          \n}\n"
        name: The fine-tuned model checkpoint permission object
    FineTuningIntegration:
      properties:
        type:
          description: The type of the integration being enabled for the fine-tuning
            job
          enum:
          - wandb
          type: string
          x-stainless-const: true
        wandb:
          description: 'The settings for your integration with Weights and Biases.
            This payload specifies the project that

            metrics will be sent to. Optionally, you can set an explicit display name
            for your run, add tags

            to your run, and set a default entity (team, username, etc) to be associated
            with your run.

            '
          properties:
            entity:
              description: 'The entity to use for the run. This allows you to set
                the team or username of the WandB user that you would

                like associated with the run. If not set, the default entity for the
                registered WandB API key is used.

                '
              nullable: true
              type: string
            name:
              description: 'A display name to set for the run. If not set, we will
                use the Job ID as the name.

                '
              nullable: true
              type: string
            project:
              description: 'The name of the project that the new run will be created
                under.

                '
              example: my-wandb-project
              type: string
            tags:
              description: 'A list of tags to be attached to the newly created run.
                These tags are passed through directly to WandB. Some

                default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}",
                "openai/{ftjob-abcdef}".

                '
              items:
                example: custom-tag
                type: string
              type: array
          required:
          - project
          type: object
      required:
      - type
      - wandb
      title: Fine-Tuning Job Integration
      type: object
    FineTuningJob:
      description: 'The `fine_tuning.job` object represents a fine-tuning job that
        has been created through the API.

        '
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
          format: int64
          type: integer
        error:
          description: For fine-tuning jobs that have `failed`, this will contain
            more information on the cause of the failure.
          nullable: true
          properties:
            code:
              description: A machine-readable error code.
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: The parameter that was invalid, usually `training_file`
                or `validation_file`. This field will be null if the failure was not
                parameter-specific.
              nullable: true
              type: string
          required:
          - code
          - message
          - param
          type: object
        estimated_finish:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            is estimated to finish. The value will be null if the fine-tuning job
            is not running.
          format: int64
          nullable: true
          type: integer
        fine_tuned_model:
          description: The name of the fine-tuned model that is being created. The
            value will be null if the fine-tuning job is still running.
          nullable: true
          type: string
        finished_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was finished. The value will be null if the fine-tuning job is still running.
          format: int64
          nullable: true
          type: integer
        hyperparameters:
          description: The hyperparameters used for the fine-tuning job. This value
            will only be returned when running `supervised` jobs.
          properties:
            batch_size:
              default: auto
              description: 'Number of examples in each batch. A larger batch size
                means that model parameters

                are updated less frequently, but with lower variance.

                '
              nullable: true
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - format: int64
                maximum: 256
                minimum: 1
                type: integer
            learning_rate_multiplier:
              default: auto
              description: 'Scaling factor for the learning rate. A smaller learning
                rate may be useful to avoid

                overfitting.

                '
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - exclusiveMinimum: true
                minimum: 0
                type: number
            n_epochs:
              default: auto
              description: 'The number of epochs to train the model for. An epoch
                refers to one full cycle

                through the training dataset.

                '
              oneOf:
              - enum:
                - auto
                type: string
                x-stainless-const: true
              - format: int64
                maximum: 50
                minimum: 1
                type: integer
          type: object
        id:
          description: The object identifier, which can be referenced in the API endpoints.
          type: string
        integrations:
          description: A list of integrations to enable for this fine-tuning job.
          items:
            oneOf:
            - $ref: '#/components/schemas/FineTuningIntegration'
          maxItems: 5
          nullable: true
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        model:
          description: The base model that is being fine-tuned.
          type: string
        object:
          description: The object type, which is always "fine_tuning.job".
          enum:
          - fine_tuning.job
          type: string
          x-stainless-const: true
        organization_id:
          description: The organization that owns the fine-tuning job.
          type: string
        result_files:
          description: The compiled results file ID(s) for the fine-tuning job. You
            can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
          items:
            example: file-abc123
            type: string
          type: array
        seed:
          description: The seed used for the fine-tuning job.
          format: int64
          type: integer
        status:
          description: The current status of the fine-tuning job, which can be either
            `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
          enum:
          - validating_files
          - queued
          - running
          - succeeded
          - failed
          - cancelled
          type: string
        trained_tokens:
          description: The total number of billable tokens processed by this fine-tuning
            job. The value will be null if the fine-tuning job is still running.
          format: int64
          nullable: true
          type: integer
        training_file:
          description: The file ID used for training. You can retrieve the training
            data with the [Files API](/docs/api-reference/files/retrieve-contents).
          type: string
        validation_file:
          description: The file ID used for validation. You can retrieve the validation
            results with the [Files API](/docs/api-reference/files/retrieve-contents).
          nullable: true
          type: string
      required:
      - created_at
      - error
      - finished_at
      - fine_tuned_model
      - hyperparameters
      - id
      - model
      - object
      - organization_id
      - result_files
      - status
      - trained_tokens
      - training_file
      - validation_file
      - seed
      title: FineTuningJob
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\"\
          ,\n  \"model\": \"davinci-002\",\n  \"created_at\": 1692661014,\n  \"finished_at\"\
          : 1692661190,\n  \"fine_tuned_model\": \"ft:davinci-002:my-org:custom_suffix:7q8mpxmy\"\
          ,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n      \"\
          file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"validation_file\"\
          : null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\": {\n\
          \      \"n_epochs\": 4,\n      \"batch_size\": 1,\n      \"learning_rate_multiplier\"\
          : 1.0\n  },\n  \"trained_tokens\": 5768,\n  \"integrations\": [],\n  \"\
          seed\": 0,\n  \"estimated_finish\": 0,\n  \"method\": {\n    \"type\": \"\
          supervised\",\n    \"supervised\": {\n      \"hyperparameters\": {\n   \
          \     \"n_epochs\": 4,\n        \"batch_size\": 1,\n        \"learning_rate_multiplier\"\
          : 1.0\n      }\n    }\n  },\n  \"metadata\": {\n    \"key\": \"value\"\n\
          \  }\n}\n"
        name: The fine-tuning job object
    FineTuningJobCheckpoint:
      description: 'The `fine_tuning.job.checkpoint` object represents a model checkpoint
        for a fine-tuning job that is ready to use.

        '
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the checkpoint was
            created.
          format: int64
          type: integer
        fine_tuned_model_checkpoint:
          description: The name of the fine-tuned checkpoint model that is created.
          type: string
        fine_tuning_job_id:
          description: The name of the fine-tuning job that this checkpoint was created
            from.
          type: string
        id:
          description: The checkpoint identifier, which can be referenced in the API
            endpoints.
          type: string
        metrics:
          description: Metrics at the step number during the fine-tuning job.
          properties:
            full_valid_loss:
              type: number
            full_valid_mean_token_accuracy:
              type: number
            step:
              type: number
            train_loss:
              type: number
            train_mean_token_accuracy:
              type: number
            valid_loss:
              type: number
            valid_mean_token_accuracy:
              type: number
          type: object
        object:
          description: The object type, which is always "fine_tuning.job.checkpoint".
          enum:
          - fine_tuning.job.checkpoint
          type: string
          x-stainless-const: true
        step_number:
          description: The step number that the checkpoint was created at.
          format: int64
          type: integer
      required:
      - created_at
      - fine_tuning_job_id
      - fine_tuned_model_checkpoint
      - id
      - metrics
      - object
      - step_number
      title: FineTuningJobCheckpoint
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job.checkpoint\",\n  \"id\": \"ftckpt_qtZ5Gyk4BLq1SfLFWp3RtO3P\"\
          ,\n  \"created_at\": 1712211699,\n  \"fine_tuned_model_checkpoint\": \"\
          ft:gpt-4o-mini-2024-07-18:my-org:custom_suffix:9ABel2dg:ckpt-step-88\",\n\
          \  \"fine_tuning_job_id\": \"ftjob-fpbNQ3H1GrMehXRf8cO97xTN\",\n  \"metrics\"\
          : {\n    \"step\": 88,\n    \"train_loss\": 0.478,\n    \"train_mean_token_accuracy\"\
          : 0.924,\n    \"valid_loss\": 10.112,\n    \"valid_mean_token_accuracy\"\
          : 0.145,\n    \"full_valid_loss\": 0.567,\n    \"full_valid_mean_token_accuracy\"\
          : 0.944\n  },\n  \"step_number\": 88\n}\n"
        name: The fine-tuning job checkpoint object
    FineTuningJobEvent:
      description: Fine-tuning job event object
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job
            was created.
          format: int64
          type: integer
        data:
          description: The data associated with the event.
          type: object
        id:
          description: The object identifier.
          type: string
        level:
          description: The log level of the event.
          enum:
          - info
          - warn
          - error
          type: string
        message:
          description: The message of the event.
          type: string
        object:
          description: The object type, which is always "fine_tuning.job.event".
          enum:
          - fine_tuning.job.event
          type: string
          x-stainless-const: true
        type:
          description: The type of event.
          enum:
          - message
          - metrics
          type: string
      required:
      - id
      - object
      - created_at
      - level
      - message
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job.event\",\n  \"id\": \"ftevent-abc123\"\
          \n  \"created_at\": 1677610602,\n  \"level\": \"info\",\n  \"message\":\
          \ \"Created fine-tuning job\",\n  \"data\": {},\n  \"type\": \"message\"\
          \n}\n"
        name: The fine-tuning job event object
    FunctionCallOutputItemParam:
      description: The output of a function tool call.
      properties:
        call_id:
          description: The unique ID of the function tool call generated by the model.
          maxLength: 64
          minLength: 1
          type: string
        id:
          description: The unique ID of the function tool call output. Populated when
            this item is returned via API.
          nullable: true
          type: string
        output:
          description: A JSON string of the output of the function tool call.
          maxLength: 10485760
          type: string
        status:
          description: The status of the item. One of `in_progress`, `completed`,
            or `incomplete`. Populated when items are returned via API.
          enum:
          - in_progress
          - completed
          - incomplete
          nullable: true
          type: string
        type:
          default: function_call_output
          description: The type of the function tool call output. Always `function_call_output`.
          enum:
          - function_call_output
          type: string
          x-stainless-const: true
      required:
      - call_id
      - type
      - output
      title: Function tool call output
      type: object
    FunctionObject:
      properties:
        description:
          description: A description of what the function does, used by the model
            to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9,
            or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          default: false
          description: Whether to enable strict schema adherence when generating the
            function call. If set to true, the model will follow the exact schema
            defined in the `parameters` field. Only a subset of JSON Schema is supported
            when `strict` is `true`. Learn more about Structured Outputs in the [function
            calling guide](docs/guides/function-calling).
          nullable: true
          type: boolean
      required:
      - name
      type: object
    FunctionParameters:
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema\
        \ object. See the [guide](/docs/guides/function-calling) for examples, and\
        \ the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)\
        \ for documentation about the format. \n\nOmitting `parameters` defines a\
        \ function with an empty parameter list."
      type: object
    FunctionTool:
      description: Defines a function in your own code the model can choose to call.
        Learn more about [function calling](https://platform.openai.com/docs/guides/function-calling).
      properties:
        description:
          description: A description of the function. Used by the model to determine
            whether or not to call the function.
          nullable: true
          type: string
        name:
          description: The name of the function to call.
          type: string
        parameters:
          additionalProperties: {}
          description: A JSON schema object describing the parameters of the function.
          nullable: true
          type: object
        strict:
          description: Whether to enforce strict parameter validation. Default `true`.
          nullable: true
          type: boolean
        type:
          default: function
          description: The type of the function tool. Always `function`.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      - strict
      - parameters
      title: Function
      type: object
    FunctionToolCall:
      description: "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling)\
        \ for more information.\n"
      properties:
        arguments:
          description: 'A JSON string of the arguments to pass to the function.

            '
          type: string
        call_id:
          description: 'The unique ID of the function tool call generated by the model.

            '
          type: string
        id:
          description: 'The unique ID of the function tool call.

            '
          type: string
        name:
          description: 'The name of the function to run.

            '
          type: string
        status:
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the function tool call. Always `function_call`.

            '
          enum:
          - function_call
          type: string
          x-stainless-const: true
      required:
      - type
      - call_id
      - name
      - arguments
      title: Function tool call
      type: object
    FunctionToolCallOutput:
      description: 'The output of a function tool call.

        '
      properties:
        call_id:
          description: 'The unique ID of the function tool call generated by the model.

            '
          type: string
        id:
          description: 'The unique ID of the function tool call output. Populated
            when this item

            is returned via API.

            '
          type: string
        output:
          description: 'A JSON string of the output of the function tool call.

            '
          type: string
        status:
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the function tool call output. Always `function_call_output`.

            '
          enum:
          - function_call_output
          type: string
          x-stainless-const: true
      required:
      - type
      - call_id
      - output
      title: Function tool call output
      type: object
    FunctionToolCallOutputResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCallOutput'
      - properties:
          id:
            description: 'The unique ID of the function call tool output.

              '
            type: string
        required:
        - id
        type: object
    FunctionToolCallResource:
      allOf:
      - $ref: '#/components/schemas/FunctionToolCall'
      - properties:
          id:
            description: 'The unique ID of the function tool call.

              '
            type: string
        required:
        - id
        type: object
    GraderLabelModel:
      description: 'A LabelModelGrader object which uses a model to assign labels
        to each item

        in the evaluation.

        '
      properties:
        input:
          items:
            $ref: '#/components/schemas/EvalItem'
          type: array
        labels:
          description: The labels to assign to each item in the evaluation.
          items:
            type: string
          type: array
        model:
          description: The model to use for the evaluation. Must support structured
            outputs.
          type: string
        name:
          description: The name of the grader.
          type: string
        passing_labels:
          description: The labels that indicate a passing result. Must be a subset
            of labels.
          items:
            type: string
          type: array
        type:
          description: The object type, which is always `label_model`.
          enum:
          - label_model
          type: string
          x-stainless-const: true
      required:
      - type
      - model
      - input
      - passing_labels
      - labels
      - name
      title: LabelModelGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"name\": \"First label grader\",\n  \"type\": \"label_model\"\
          ,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"input\": [\n    {\n      \"\
          type\": \"message\",\n      \"role\": \"system\",\n      \"content\": {\n\
          \        \"type\": \"input_text\",\n        \"text\": \"Classify the sentiment\
          \ of the following statement as one of positive, neutral, or negative\"\n\
          \      }\n    },\n    {\n      \"type\": \"message\",\n      \"role\": \"\
          user\",\n      \"content\": {\n        \"type\": \"input_text\",\n     \
          \   \"text\": \"Statement: {{item.response}}\"\n      }\n    }\n  ],\n \
          \ \"passing_labels\": [\n    \"positive\"\n  ],\n  \"labels\": [\n    \"\
          positive\",\n    \"neutral\",\n    \"negative\"\n  ]\n}\n"
        group: graders
        name: Label Model Grader
    GraderMulti:
      description: A MultiGrader object combines the output of multiple graders to
        produce a single score.
      properties:
        calculate_output:
          description: A formula to calculate the output based on grader results.
          type: string
        graders:
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderLabelModel'
        name:
          description: The name of the grader.
          type: string
        type:
          default: multi
          description: The object type, which is always `multi`.
          enum:
          - multi
          type: string
          x-stainless-const: true
      required:
      - name
      - type
      - graders
      - calculate_output
      title: MultiGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"multi\",\n  \"name\": \"example multi grader\"\
          ,\n  \"graders\": [\n    {\n      \"type\": \"text_similarity\",\n     \
          \ \"name\": \"example text similarity grader\",\n      \"input\": \"The\
          \ graded text\",\n      \"reference\": \"The reference text\",\n      \"\
          evaluation_metric\": \"fuzzy_match\"\n    },\n    {\n      \"type\": \"\
          string_check\",\n      \"name\": \"Example string check grader\",\n    \
          \  \"input\": \"{{sample.output_text}}\",\n      \"reference\": \"{{item.label}}\"\
          ,\n      \"operation\": \"eq\"\n    }\n  ],\n  \"calculate_output\": \"\
          0.5 * text_similarity_score +  0.5 * string_check_score)\"\n}\n"
        group: graders
        name: Multi Grader
    GraderPython:
      description: 'A PythonGrader object that runs a python script on the input.

        '
      properties:
        image_tag:
          description: The image tag to use for the python script.
          type: string
        name:
          description: The name of the grader.
          type: string
        source:
          description: The source code of the python script.
          type: string
        type:
          description: The object type, which is always `python`.
          enum:
          - python
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      - source
      title: PythonGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"python\",\n  \"name\": \"Example python grader\"\
          ,\n  \"image_tag\": \"2025-05-08\",\n  \"source\": \"\"\"\ndef grade(sample:\
          \ dict, item: dict) -> float:\n    \\\"\"\"\n    Returns 1.0 if `output_text`\
          \ equals `label`, otherwise 0.0.\n    \\\"\"\"\n    output = sample.get(\"\
          output_text\")\n    label = item.get(\"label\")\n    return 1.0 if output\
          \ == label else 0.0\n\"\"\",\n}\n"
        group: graders
        name: Python Grader
    GraderScoreModel:
      description: 'A ScoreModelGrader object that uses a model to assign a score
        to the input.

        '
      properties:
        input:
          description: The input text. This may include template strings.
          items:
            $ref: '#/components/schemas/EvalItem'
          type: array
        model:
          description: The model to use for the evaluation.
          type: string
        name:
          description: The name of the grader.
          type: string
        range:
          description: The range of the score. Defaults to `[0, 1]`.
          items:
            max_items: 2
            min_items: 2
            type: number
          type: array
        sampling_params:
          description: The sampling parameters for the model.
          type: object
        type:
          description: The object type, which is always `score_model`.
          enum:
          - score_model
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      - input
      - model
      title: ScoreModelGrader
      type: object
      x-oaiMeta:
        example: "{\n    \"type\": \"score_model\",\n    \"name\": \"Example score\
          \ model grader\",\n    \"input\": [\n        {\n            \"role\": \"\
          user\",\n            \"content\": (\n                \"Score how close the\
          \ reference answer is to the model answer. Score 1.0 if they are the same\
          \ and 0.0 if they are different.\"\n                \" Return just a floating\
          \ point score\\n\\n\"\n                \" Reference answer: {{item.label}}\\\
          n\\n\"\n                \" Model answer: {{sample.output_text}}\"\n    \
          \        ),\n        }\n    ],\n    \"model\": \"gpt-4o-2024-08-06\",\n\
          \    \"sampling_params\": {\n        \"temperature\": 1,\n        \"top_p\"\
          : 1,\n        \"seed\": 42,\n    },\n}\n"
        group: graders
        name: Score Model Grader
    GraderStringCheck:
      description: 'A StringCheckGrader object that performs a string comparison between
        input and reference using a specified operation.

        '
      properties:
        input:
          description: The input text. This may include template strings.
          type: string
        name:
          description: The name of the grader.
          type: string
        operation:
          description: The string check operation to perform. One of `eq`, `ne`, `like`,
            or `ilike`.
          enum:
          - eq
          - ne
          - like
          - ilike
          type: string
        reference:
          description: The reference text. This may include template strings.
          type: string
        type:
          description: The object type, which is always `string_check`.
          enum:
          - string_check
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      - input
      - reference
      - operation
      title: StringCheckGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"string_check\",\n  \"name\": \"Example string check\
          \ grader\",\n  \"input\": \"{{sample.output_text}}\",\n  \"reference\":\
          \ \"{{item.label}}\",\n  \"operation\": \"eq\"\n}\n"
        group: graders
        name: String Check Grader
    GraderTextSimilarity:
      description: 'A TextSimilarityGrader object which grades text based on similarity
        metrics.

        '
      properties:
        evaluation_metric:
          description: The evaluation metric to use. One of `fuzzy_match`, `bleu`,
            `gleu`, `meteor`, `rouge_1`, `rouge_2`, `rouge_3`, `rouge_4`, `rouge_5`,
            or `rouge_l`.
          enum:
          - fuzzy_match
          - bleu
          - gleu
          - meteor
          - rouge_1
          - rouge_2
          - rouge_3
          - rouge_4
          - rouge_5
          - rouge_l
          type: string
        input:
          description: The text being graded.
          type: string
        name:
          description: The name of the grader.
          type: string
        reference:
          description: The text being graded against.
          type: string
        type:
          default: text_similarity
          description: The type of grader.
          enum:
          - text_similarity
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      - input
      - reference
      - evaluation_metric
      title: TextSimilarityGrader
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"text_similarity\",\n  \"name\": \"Example text\
          \ similarity grader\",\n  \"input\": \"{{sample.output_text}}\",\n  \"reference\"\
          : \"{{item.label}}\",\n  \"evaluation_metric\": \"fuzzy_match\"\n}\n"
        group: graders
        name: Text Similarity Grader
    Image:
      description: Represents the content or the URL of an image generated by the
        OpenAI API.
      properties:
        b64_json:
          description: The base64-encoded JSON of the generated image. Default value
            for `gpt-image-1`, and only present if `response_format` is set to `b64_json`
            for `dall-e-2` and `dall-e-3`.
          type: string
        revised_prompt:
          description: For `dall-e-3` only, the revised prompt that was used to generate
            the image.
          type: string
        url:
          description: When using `dall-e-2` or `dall-e-3`, the URL of the generated
            image if `response_format` is set to `url` (default value). Unsupported
            for `gpt-image-1`.
          type: string
      type: object
    ImageGenTool:
      description: 'A tool that generates images using a model like `gpt-image-1`.

        '
      properties:
        background:
          default: auto
          description: "Background type for the generated image. One of `transparent`,\
            \ \n`opaque`, or `auto`. Default: `auto`.\n"
          enum:
          - transparent
          - opaque
          - auto
          type: string
        input_image_mask:
          additionalProperties: false
          description: "Optional mask for inpainting. Contains `image_url` \n(string,\
            \ optional) and `file_id` (string, optional).\n"
          properties:
            file_id:
              description: 'File ID for the mask image.

                '
              type: string
            image_url:
              description: 'Base64-encoded mask image.

                '
              type: string
          required: []
          type: object
        model:
          default: gpt-image-1
          description: 'The image generation model to use. Default: `gpt-image-1`.

            '
          enum:
          - gpt-image-1
          type: string
        moderation:
          default: auto
          description: 'Moderation level for the generated image. Default: `auto`.

            '
          enum:
          - auto
          - low
          type: string
        output_compression:
          default: 100
          description: 'Compression level for the output image. Default: 100.

            '
          format: int64
          maximum: 100
          minimum: 0
          type: integer
        output_format:
          default: png
          description: "The output format of the generated image. One of `png`, `webp`,\
            \ or \n`jpeg`. Default: `png`.\n"
          enum:
          - png
          - webp
          - jpeg
          type: string
        partial_images:
          default: 0
          description: 'Number of partial images to generate in streaming mode, from
            0 (default value) to 3.

            '
          format: int64
          maximum: 3
          minimum: 0
          type: integer
        quality:
          default: auto
          description: "The quality of the generated image. One of `low`, `medium`,\
            \ `high`, \nor `auto`. Default: `auto`.\n"
          enum:
          - low
          - medium
          - high
          - auto
          type: string
        size:
          default: auto
          description: "The size of the generated image. One of `1024x1024`, `1024x1536`,\
            \ \n`1536x1024`, or `auto`. Default: `auto`.\n"
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          - auto
          type: string
        type:
          description: 'The type of the image generation tool. Always `image_generation`.

            '
          enum:
          - image_generation
          type: string
          x-stainless-const: true
      required:
      - type
      title: Image generation tool
      type: object
    ImageGenToolCall:
      description: 'An image generation request made by the model.

        '
      properties:
        id:
          description: 'The unique ID of the image generation call.

            '
          type: string
        result:
          description: 'The generated image encoded in base64.

            '
          nullable: true
          type: string
        status:
          description: 'The status of the image generation call.

            '
          enum:
          - in_progress
          - completed
          - generating
          - failed
          type: string
        type:
          description: 'The type of the image generation call. Always `image_generation_call`.

            '
          enum:
          - image_generation_call
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - status
      - result
      title: Image generation call
      type: object
    ImagesResponse:
      description: The response from the image generation endpoint.
      properties:
        background:
          description: The background parameter used for the image generation. Either
            `transparent` or `opaque`.
          enum:
          - transparent
          - opaque
          type: string
        created:
          description: The Unix timestamp (in seconds) of when the image was created.
          format: int64
          type: integer
        data:
          description: The list of generated images.
          items:
            $ref: '#/components/schemas/Image'
          type: array
        output_format:
          description: The output format of the image generation. Either `png`, `webp`,
            or `jpeg`.
          enum:
          - png
          - webp
          - jpeg
          type: string
        quality:
          description: The quality of the image generated. Either `low`, `medium`,
            or `high`.
          enum:
          - low
          - medium
          - high
          type: string
        size:
          description: The size of the image generated. Either `1024x1024`, `1024x1536`,
            or `1536x1024`.
          enum:
          - 1024x1024
          - 1024x1536
          - 1536x1024
          type: string
        usage:
          description: 'For `gpt-image-1` only, the token usage information for the
            image generation.

            '
          properties:
            input_tokens:
              description: The number of tokens (images and text) in the input prompt.
              format: int64
              type: integer
            input_tokens_details:
              description: The input tokens detailed information for the image generation.
              properties:
                image_tokens:
                  description: The number of image tokens in the input prompt.
                  format: int64
                  type: integer
                text_tokens:
                  description: The number of text tokens in the input prompt.
                  format: int64
                  type: integer
              required:
              - text_tokens
              - image_tokens
              type: object
            output_tokens:
              description: The number of image tokens in the output image.
              format: int64
              type: integer
            total_tokens:
              description: The total number of tokens (images and text) used for the
                image generation.
              format: int64
              type: integer
          required:
          - total_tokens
          - input_tokens
          - output_tokens
          - input_tokens_details
          type: object
      required:
      - created
      title: Image generation response
      type: object
      x-oaiMeta:
        example: "{\n  \"created\": 1713833628,\n  \"data\": [\n    {\n      \"b64_json\"\
          : \"...\"\n    }\n  ],\n  \"background\": \"transparent\",\n  \"output_format\"\
          : \"png\",\n  \"size\": \"1024x1024\",\n  \"quality\": \"high\",\n  \"usage\"\
          : {\n    \"total_tokens\": 100,\n    \"input_tokens\": 50,\n    \"output_tokens\"\
          : 50,\n    \"input_tokens_details\": {\n      \"text_tokens\": 10,\n   \
          \   \"image_tokens\": 40\n    }\n  }\n}\n"
        group: images
        name: The image generation response
    Includable:
      description: "Specify additional output data to include in the model response.\
        \ Currently\nsupported values are:\n- `code_interpreter_call.outputs`: Includes\
        \ the outputs of python code execution\n  in code interpreter tool call items.\n\
        - `computer_call_output.output.image_url`: Include image urls from the computer\
        \ call output.\n- `file_search_call.results`: Include the search results of\n\
        \  the file search tool call.\n- `message.input_image.image_url`: Include\
        \ image urls from the input message.\n- `message.output_text.logprobs`: Include\
        \ logprobs with assistant messages.\n- `reasoning.encrypted_content`: Includes\
        \ an encrypted version of reasoning\n  tokens in reasoning item outputs. This\
        \ enables reasoning items to be used in\n  multi-turn conversations when using\
        \ the Responses API statelessly (like\n  when the `store` parameter is set\
        \ to `false`, or when an organization is\n  enrolled in the zero data retention\
        \ program).\n"
      enum:
      - code_interpreter_call.outputs
      - computer_call_output.output.image_url
      - file_search_call.results
      - message.input_image.image_url
      - message.output_text.logprobs
      - reasoning.encrypted_content
      type: string
    InputAudio:
      description: 'An audio input to the model.

        '
      properties:
        data:
          description: 'Base64-encoded audio data.

            '
          type: string
        format:
          description: 'The format of the audio data. Currently supported formats
            are `mp3` and

            `wav`.

            '
          enum:
          - mp3
          - wav
          type: string
        type:
          description: 'The type of the input item. Always `input_audio`.

            '
          enum:
          - input_audio
          type: string
          x-stainless-const: true
      required:
      - type
      - data
      - format
      title: Audio input
      type: object
    InputContent:
      oneOf:
      - $ref: '#/components/schemas/InputTextContent'
      - $ref: '#/components/schemas/InputImageContent'
      - $ref: '#/components/schemas/InputFileContent'
    InputFileContent:
      description: A file input to the model.
      properties:
        file_data:
          description: 'The content of the file to be sent to the model.

            '
          type: string
        file_id:
          description: The ID of the file to be sent to the model.
          nullable: true
          type: string
        filename:
          description: The name of the file to be sent to the model.
          type: string
        type:
          default: input_file
          description: The type of the input item. Always `input_file`.
          enum:
          - input_file
          type: string
          x-stainless-const: true
      required:
      - type
      title: Input file
      type: object
    InputImageContent:
      description: An image input to the model. Learn about [image inputs](/docs/guides/vision).
      properties:
        detail:
          description: The detail level of the image to be sent to the model. One
            of `high`, `low`, or `auto`. Defaults to `auto`.
          enum:
          - low
          - high
          - auto
          type: string
        file_id:
          description: The ID of the file to be sent to the model.
          nullable: true
          type: string
        image_url:
          description: The URL of the image to be sent to the model. A fully qualified
            URL or base64 encoded image in a data URL.
          nullable: true
          type: string
        type:
          default: input_image
          description: The type of the input item. Always `input_image`.
          enum:
          - input_image
          type: string
          x-stainless-const: true
      required:
      - type
      - detail
      title: Input image
      type: object
    InputItem:
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/EasyInputMessage'
      - $ref: '#/components/schemas/Item'
        description: "An item representing part of the context for the response to\
          \ be \ngenerated by the model. Can contain text, images, and audio inputs,\n\
          as well as previous assistant responses and tool call outputs.\n"
        title: Item
        type: object
      - $ref: '#/components/schemas/ItemReferenceParam'
    InputMessage:
      description: 'A message input to the model with a role indicating instruction
        following

        hierarchy. Instructions given with the `developer` or `system` role take

        precedence over instructions given with the `user` role.

        '
      properties:
        content:
          $ref: '#/components/schemas/InputMessageContentList'
        role:
          description: 'The role of the message input. One of `user`, `system`, or
            `developer`.

            '
          enum:
          - user
          - system
          - developer
          type: string
        status:
          description: 'The status of item. One of `in_progress`, `completed`, or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the message input. Always set to `message`.

            '
          enum:
          - message
          type: string
          x-stainless-const: true
      required:
      - role
      - content
      title: Input message
      type: object
    InputMessageContentList:
      description: "A list of one or many input items to the model, containing different\
        \ content \ntypes.\n"
      items:
        $ref: '#/components/schemas/InputContent'
      title: Input item content list
      type: array
    InputMessageResource:
      allOf:
      - $ref: '#/components/schemas/InputMessage'
      - properties:
          id:
            description: 'The unique ID of the message input.

              '
            type: string
        required:
        - id
        type: object
    InputTextContent:
      description: A text input to the model.
      properties:
        text:
          description: The text input to the model.
          type: string
        type:
          default: input_text
          description: The type of the input item. Always `input_text`.
          enum:
          - input_text
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      title: Input text
      type: object
    Invite:
      description: Represents an individual `invite` to the organization.
      properties:
        accepted_at:
          description: The Unix timestamp (in seconds) of when the invite was accepted.
          format: int64
          type: integer
        email:
          description: The email address of the individual to whom the invite was
            sent
          type: string
        expires_at:
          description: The Unix timestamp (in seconds) of when the invite expires.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        invited_at:
          description: The Unix timestamp (in seconds) of when the invite was sent.
          format: int64
          type: integer
        object:
          description: The object type, which is always `organization.invite`
          enum:
          - organization.invite
          type: string
          x-stainless-const: true
        projects:
          description: The projects that were granted membership upon acceptance of
            the invite.
          items:
            properties:
              id:
                description: Project's public ID
                type: string
              role:
                description: Project membership role
                enum:
                - member
                - owner
                type: string
            type: object
          type: array
        role:
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
          type: string
        status:
          description: '`accepted`,`expired`, or `pending`'
          enum:
          - accepted
          - expired
          - pending
          type: string
      required:
      - object
      - id
      - email
      - role
      - status
      - invited_at
      - expires_at
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"organization.invite\",\n  \"id\": \"invite-abc\"\
          ,\n  \"email\": \"user@example.com\",\n  \"role\": \"owner\",\n  \"status\"\
          : \"accepted\",\n  \"invited_at\": 1711471533,\n  \"expires_at\": 1711471533,\n\
          \  \"accepted_at\": 1711471533,\n  \"projects\": [\n    {\n      \"id\"\
          : \"project-xyz\",\n      \"role\": \"member\"\n    }\n  ]\n}\n"
        name: The invite object
    InviteDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          description: The object type, which is always `organization.invite.deleted`
          enum:
          - organization.invite.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    InviteListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Invite'
          type: array
        first_id:
          description: The first `invite_id` in the retrieved `list`
          type: string
        has_more:
          description: The `has_more` property is used for pagination to indicate
            there are additional results.
          type: boolean
        last_id:
          description: The last `invite_id` in the retrieved `list`
          type: string
        object:
          description: The object type, which is always `list`
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      type: object
    InviteRequest:
      properties:
        email:
          description: Send an email to this address
          type: string
        projects:
          description: An array of projects to which membership is granted at the
            same time the org invite is accepted. If omitted, the user will be invited
            to the default project for compatibility with legacy behavior.
          items:
            properties:
              id:
                description: Project's public ID
                type: string
              role:
                description: Project membership role
                enum:
                - member
                - owner
                type: string
            required:
            - id
            - role
            type: object
          type: array
        role:
          description: '`owner` or `reader`'
          enum:
          - reader
          - owner
          type: string
      required:
      - email
      - role
      type: object
    Item:
      description: 'Content item used to generate a response.

        '
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/InputMessage'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerCallOutputItemParam'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/FunctionCallOutputItemParam'
      - $ref: '#/components/schemas/ReasoningItem'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/LocalShellToolCallOutput'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      - $ref: '#/components/schemas/MCPApprovalResponse'
      - $ref: '#/components/schemas/MCPToolCall'
      type: object
    ItemReferenceParam:
      description: An internal identifier for an item to reference.
      properties:
        id:
          description: The ID of the item to reference.
          type: string
        type:
          default: item_reference
          description: The type of item to reference. Always `item_reference`.
          enum:
          - item_reference
          nullable: true
          type: string
          x-stainless-const: true
      required:
      - id
      title: Item reference
      type: object
    ItemResource:
      description: 'Content item used to generate a response.

        '
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/InputMessageResource'
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ComputerToolCallOutputResource'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCallResource'
      - $ref: '#/components/schemas/FunctionToolCallOutputResource'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/LocalShellToolCallOutput'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      - $ref: '#/components/schemas/MCPApprovalResponseResource'
      - $ref: '#/components/schemas/MCPToolCall'
    KeyPress:
      description: 'A collection of keypresses the model would like to perform.

        '
      properties:
        keys:
          description: 'The combination of keys the model is requesting to be pressed.
            This is an

            array of strings, each representing a key.

            '
          items:
            description: 'One of the keys the model is requesting to be pressed.

              '
            type: string
          type: array
        type:
          default: keypress
          description: "Specifies the event type. For a keypress action, this property\
            \ is \nalways set to `keypress`.\n"
          enum:
          - keypress
          type: string
          x-stainless-const: true
      required:
      - type
      - keys
      title: KeyPress
      type: object
    ListAssistantsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssistantObject'
          type: array
        first_id:
          example: asst_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: asst_abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\":\
          \ \"asst_abc123\",\n      \"object\": \"assistant\",\n      \"created_at\"\
          : 1698982736,\n      \"name\": \"Coding Tutor\",\n      \"description\"\
          : null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": \"You are\
          \ a helpful assistant designed to make me better at coding!\",\n      \"\
          tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n \
          \     \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\"\
          : \"auto\"\n    },\n    {\n      \"id\": \"asst_abc456\",\n      \"object\"\
          : \"assistant\",\n      \"created_at\": 1698982718,\n      \"name\": \"\
          My Assistant\",\n      \"description\": null,\n      \"model\": \"gpt-4o\"\
          ,\n      \"instructions\": \"You are a helpful assistant designed to make\
          \ me better at coding!\",\n      \"tools\": [],\n      \"tool_resources\"\
          : {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\"\
          : 1.0,\n      \"response_format\": \"auto\"\n    },\n    {\n      \"id\"\
          : \"asst_abc789\",\n      \"object\": \"assistant\",\n      \"created_at\"\
          : 1698982643,\n      \"name\": null,\n      \"description\": null,\n   \
          \   \"model\": \"gpt-4o\",\n      \"instructions\": null,\n      \"tools\"\
          : [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"\
          top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"\
          auto\"\n    }\n  ],\n  \"first_id\": \"asst_abc123\",\n  \"last_id\": \"\
          asst_abc789\",\n  \"has_more\": false\n}\n"
        group: chat
        name: List assistants response object
    ListAuditLogsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AuditLog'
          type: array
        first_id:
          example: audit_log-defb456h8dks
          type: string
        has_more:
          type: boolean
        last_id:
          example: audit_log-hnbkd8s93s
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ListBatchesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Batch'
          type: array
        first_id:
          example: batch_abc123
          type: string
        has_more:
          type: boolean
        last_id:
          example: batch_abc456
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListCertificatesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
        first_id:
          example: cert_abc
          type: string
        has_more:
          type: boolean
        last_id:
          example: cert_abc
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListFilesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        first_id:
          example: file-abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: file-abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ListFineTuningCheckpointPermissionResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningCheckpointPermission'
          type: array
        first_id:
          nullable: true
          type: string
        has_more:
          type: boolean
        last_id:
          nullable: true
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListFineTuningJobCheckpointsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobCheckpoint'
          type: array
        first_id:
          nullable: true
          type: string
        has_more:
          type: boolean
        last_id:
          nullable: true
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListFineTuningJobEventsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
          type: array
        has_more:
          type: boolean
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListMessagesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageObject'
          type: array
        first_id:
          example: msg_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: msg_abc123
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListModelsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      type: object
    ListPaginatedFineTuningJobsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJob'
          type: array
        has_more:
          type: boolean
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      type: object
    ListRunStepsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RunStepObject'
          type: array
        first_id:
          example: step_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: step_abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListRunsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RunObject'
          type: array
        first_id:
          example: run_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: run_abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ListVectorStoreFilesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
          type: array
        first_id:
          example: file-abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: file-abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    ListVectorStoresResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/VectorStoreObject'
          type: array
        first_id:
          example: vs_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: vs_abc456
          type: string
        object:
          example: list
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    LocalShellExecAction:
      description: 'Execute a shell command on the server.

        '
      properties:
        command:
          description: 'The command to run.

            '
          items:
            type: string
          type: array
        env:
          additionalProperties:
            type: string
          description: 'Environment variables to set for the command.

            '
          type: object
        timeout_ms:
          description: 'Optional timeout in milliseconds for the command.

            '
          format: int64
          nullable: true
          type: integer
        type:
          description: 'The type of the local shell action. Always `exec`.

            '
          enum:
          - exec
          type: string
          x-stainless-const: true
        user:
          description: 'Optional user to run the command as.

            '
          nullable: true
          type: string
        working_directory:
          description: 'Optional working directory to run the command in.

            '
          nullable: true
          type: string
      required:
      - type
      - command
      - env
      title: Local shell exec action
      type: object
    LocalShellTool:
      description: 'A tool that allows the model to execute shell commands in a local
        environment.

        '
      properties:
        type:
          description: The type of the local shell tool. Always `local_shell`.
          enum:
          - local_shell
          type: string
          x-stainless-const: true
      required:
      - type
      title: Local shell tool
      type: object
    LocalShellToolCall:
      description: 'A tool call to run a command on the local shell.

        '
      properties:
        action:
          $ref: '#/components/schemas/LocalShellExecAction'
        call_id:
          description: 'The unique ID of the local shell tool call generated by the
            model.

            '
          type: string
        id:
          description: 'The unique ID of the local shell call.

            '
          type: string
        status:
          description: 'The status of the local shell call.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the local shell call. Always `local_shell_call`.

            '
          enum:
          - local_shell_call
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - call_id
      - action
      - status
      title: Local shell call
      type: object
    LocalShellToolCallOutput:
      description: 'The output of a local shell tool call.

        '
      properties:
        id:
          description: 'The unique ID of the local shell tool call generated by the
            model.

            '
          type: string
        output:
          description: 'A JSON string of the output of the local shell tool call.

            '
          type: string
        status:
          description: 'The status of the item. One of `in_progress`, `completed`,
            or `incomplete`.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          nullable: true
          type: string
        type:
          description: 'The type of the local shell tool call output. Always `local_shell_call_output`.

            '
          enum:
          - local_shell_call_output
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - call_id
      - output
      title: Local shell call output
      type: object
    LogProb:
      description: The log probability of a token.
      properties:
        bytes:
          items:
            format: int64
            type: integer
          type: array
        logprob:
          type: number
        token:
          type: string
        top_logprobs:
          items:
            $ref: '#/components/schemas/TopLogProb'
          type: array
      required:
      - token
      - logprob
      - bytes
      - top_logprobs
      title: Log probability
      type: object
    LogProbProperties:
      description: 'A log probability object.

        '
      properties:
        bytes:
          description: 'The bytes that were used to generate the log probability.

            '
          items:
            format: int64
            type: integer
          type: array
        logprob:
          description: 'The log probability of the token.

            '
          type: number
        token:
          description: 'The token that was used to generate the log probability.

            '
          type: string
      required:
      - token
      - logprob
      - bytes
      type: object
    MCPApprovalRequest:
      description: 'A request for human approval of a tool invocation.

        '
      properties:
        arguments:
          description: 'A JSON string of arguments for the tool.

            '
          type: string
        id:
          description: 'The unique ID of the approval request.

            '
          type: string
        name:
          description: 'The name of the tool to run.

            '
          type: string
        server_label:
          description: 'The label of the MCP server making the request.

            '
          type: string
        type:
          description: 'The type of the item. Always `mcp_approval_request`.

            '
          enum:
          - mcp_approval_request
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - server_label
      - name
      - arguments
      title: MCP approval request
      type: object
    MCPApprovalResponse:
      description: 'A response to an MCP approval request.

        '
      properties:
        approval_request_id:
          description: 'The ID of the approval request being answered.

            '
          type: string
        approve:
          description: 'Whether the request was approved.

            '
          type: boolean
        id:
          description: 'The unique ID of the approval response

            '
          nullable: true
          type: string
        reason:
          description: 'Optional reason for the decision.

            '
          nullable: true
          type: string
        type:
          description: 'The type of the item. Always `mcp_approval_response`.

            '
          enum:
          - mcp_approval_response
          type: string
          x-stainless-const: true
      required:
      - type
      - request_id
      - approve
      - approval_request_id
      title: MCP approval response
      type: object
    MCPApprovalResponseResource:
      description: 'A response to an MCP approval request.

        '
      properties:
        approval_request_id:
          description: 'The ID of the approval request being answered.

            '
          type: string
        approve:
          description: 'Whether the request was approved.

            '
          type: boolean
        id:
          description: 'The unique ID of the approval response

            '
          type: string
        reason:
          description: 'Optional reason for the decision.

            '
          nullable: true
          type: string
        type:
          description: 'The type of the item. Always `mcp_approval_response`.

            '
          enum:
          - mcp_approval_response
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - request_id
      - approve
      - approval_request_id
      title: MCP approval response
      type: object
    MCPListTools:
      description: 'A list of tools available on an MCP server.

        '
      properties:
        error:
          description: 'Error message if the server could not list tools.

            '
          nullable: true
          type: string
        id:
          description: 'The unique ID of the list.

            '
          type: string
        server_label:
          description: 'The label of the MCP server.

            '
          type: string
        tools:
          description: 'The tools available on the server.

            '
          items:
            $ref: '#/components/schemas/MCPListToolsTool'
          type: array
        type:
          description: 'The type of the item. Always `mcp_list_tools`.

            '
          enum:
          - mcp_list_tools
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - server_label
      - tools
      title: MCP list tools
      type: object
    MCPListToolsTool:
      description: 'A tool available on an MCP server.

        '
      properties:
        annotations:
          description: 'Additional annotations about the tool.

            '
          nullable: true
          type: object
        description:
          description: 'The description of the tool.

            '
          nullable: true
          type: string
        input_schema:
          description: 'The JSON schema describing the tool''s input.

            '
          type: object
        name:
          description: 'The name of the tool.

            '
          type: string
      required:
      - name
      - input_schema
      title: MCP list tools tool
      type: object
    MCPTool:
      description: "Give the model access to additional tools via remote Model Context\
        \ Protocol \n(MCP) servers. [Learn more about MCP](/docs/guides/tools-remote-mcp).\n"
      properties:
        allowed_tools:
          description: 'List of allowed tool names or a filter object.

            '
          nullable: true
          oneOf:
          - description: A string array of allowed tool names
            items:
              type: string
            title: MCP allowed tools
            type: array
          - additionalProperties: false
            description: 'A filter object to specify which tools are allowed.

              '
            properties:
              tool_names:
                description: List of allowed tool names.
                items:
                  type: string
                title: MCP allowed tools
                type: array
            required: []
            title: MCP allowed tools filter
            type: object
        headers:
          additionalProperties:
            type: string
          description: 'Optional HTTP headers to send to the MCP server. Use for authentication

            or other purposes.

            '
          nullable: true
          type: object
        require_approval:
          default: always
          description: Specify which of the MCP server's tools require approval.
          nullable: true
          oneOf:
          - additionalProperties: false
            properties:
              always:
                description: 'A list of tools that always require approval.

                  '
                properties:
                  tool_names:
                    description: List of tools that require approval.
                    items:
                      type: string
                    type: array
                type: object
              never:
                description: 'A list of tools that never require approval.

                  '
                properties:
                  tool_names:
                    description: List of tools that do not require approval.
                    items:
                      type: string
                    type: array
                type: object
            title: MCP tool approval filter
            type: object
          - description: "Specify a single approval policy for all tools. One of `always`\
              \ or \n`never`. When set to `always`, all tools will require approval.\
              \ When \nset to `never`, all tools will not require approval.\n"
            enum:
            - always
            - never
            title: MCP tool approval setting
            type: string
        server_label:
          description: 'A label for this MCP server, used to identify it in tool calls.

            '
          type: string
        server_url:
          description: 'The URL for the MCP server.

            '
          type: string
        type:
          description: The type of the MCP tool. Always `mcp`.
          enum:
          - mcp
          type: string
          x-stainless-const: true
      required:
      - type
      - server_label
      - server_url
      title: MCP tool
      type: object
    MCPToolCall:
      description: 'An invocation of a tool on an MCP server.

        '
      properties:
        arguments:
          description: 'A JSON string of the arguments passed to the tool.

            '
          type: string
        error:
          description: 'The error from the tool call, if any.

            '
          nullable: true
          type: string
        id:
          description: 'The unique ID of the tool call.

            '
          type: string
        name:
          description: 'The name of the tool that was run.

            '
          type: string
        output:
          description: 'The output from the tool call.

            '
          nullable: true
          type: string
        server_label:
          description: 'The label of the MCP server running the tool.

            '
          type: string
        type:
          description: 'The type of the item. Always `mcp_call`.

            '
          enum:
          - mcp_call
          type: string
          x-stainless-const: true
      required:
      - type
      - id
      - server_label
      - name
      - arguments
      title: MCP tool call
      type: object
    MessageContentImageFileObject:
      description: References an image [File](/docs/api-reference/files) in the content
        of a message.
      properties:
        image_file:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image if specified by
                the user. `low` uses fewer tokens, you can opt in to high resolution
                using `high`.
              enum:
              - auto
              - low
              - high
              type: string
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in
                the message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
          required:
          - file_id
          type: object
        type:
          description: Always `image_file`.
          enum:
          - image_file
          type: string
          x-stainless-const: true
      required:
      - type
      - image_file
      title: Image file
      type: object
    MessageContentImageUrlObject:
      description: References an image URL in the content of a message.
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. `low` uses fewer
                tokens, you can opt in to high resolution using `high`. Default value
                is `auto`
              enum:
              - auto
              - low
              - high
              type: string
            url:
              description: 'The external URL of the image, must be a supported image
                types: jpeg, jpg, png, gif, webp.'
              format: uri
              type: string
          required:
          - url
          type: object
        type:
          description: The type of the content part.
          enum:
          - image_url
          type: string
          x-stainless-const: true
      required:
      - type
      - image_url
      title: Image URL
      type: object
    MessageContentRefusalObject:
      description: The refusal content generated by the assistant.
      properties:
        refusal:
          nullable: false
          type: string
        type:
          description: Always `refusal`.
          enum:
          - refusal
          type: string
          x-stainless-const: true
      required:
      - type
      - refusal
      title: Refusal
      type: object
    MessageContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
      properties:
        end_index:
          format: int64
          minimum: 0
          type: integer
        file_citation:
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
          - file_id
          type: object
        start_index:
          format: int64
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_citation`.
          enum:
          - file_citation
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      - file_citation
      - start_index
      - end_index
      title: File citation
      type: object
    MessageContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        end_index:
          format: int64
          minimum: 0
          type: integer
        file_path:
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
          - file_id
          type: object
        start_index:
          format: int64
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_path`.
          enum:
          - file_path
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      - file_path
      - start_index
      - end_index
      title: File path
      type: object
    MessageContentTextObject:
      description: The text content that is part of a message.
      properties:
        text:
          properties:
            annotations:
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
                - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
              type: array
            value:
              description: The data that makes up the text.
              type: string
          required:
          - value
          - annotations
          type: object
        type:
          description: Always `text`.
          enum:
          - text
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      title: Text
      type: object
    MessageDeltaContentImageFileObject:
      description: References an image [File](/docs/api-reference/files) in the content
        of a message.
      properties:
        image_file:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image if specified by
                the user. `low` uses fewer tokens, you can opt in to high resolution
                using `high`.
              enum:
              - auto
              - low
              - high
              type: string
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in
                the message content. Set `purpose="vision"` when uploading the File
                if you need to later display the file content.
              type: string
          type: object
        index:
          description: The index of the content part in the message.
          format: int64
          type: integer
        type:
          description: Always `image_file`.
          enum:
          - image_file
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Image file
      type: object
    MessageDeltaContentImageUrlObject:
      description: References an image URL in the content of a message.
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. `low` uses fewer
                tokens, you can opt in to high resolution using `high`.
              enum:
              - auto
              - low
              - high
              type: string
            url:
              description: 'The URL of the image, must be a supported image types:
                jpeg, jpg, png, gif, webp.'
              type: string
          type: object
        index:
          description: The index of the content part in the message.
          format: int64
          type: integer
        type:
          description: Always `image_url`.
          enum:
          - image_url
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Image URL
      type: object
    MessageDeltaContentRefusalObject:
      description: The refusal content that is part of a message.
      properties:
        index:
          description: The index of the refusal part in the message.
          format: int64
          type: integer
        refusal:
          type: string
        type:
          description: Always `refusal`.
          enum:
          - refusal
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Refusal
      type: object
    MessageDeltaContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "file_search" tool to search files.
      properties:
        end_index:
          format: int64
          minimum: 0
          type: integer
        file_citation:
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
            quote:
              description: The specific quote in the file.
              type: string
          type: object
        index:
          description: The index of the annotation in the text content part.
          format: int64
          type: integer
        start_index:
          format: int64
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_citation`.
          enum:
          - file_citation
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: File citation
      type: object
    MessageDeltaContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        end_index:
          format: int64
          minimum: 0
          type: integer
        file_path:
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          type: object
        index:
          description: The index of the annotation in the text content part.
          format: int64
          type: integer
        start_index:
          format: int64
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_path`.
          enum:
          - file_path
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: File path
      type: object
    MessageDeltaContentTextObject:
      description: The text content that is part of a message.
      properties:
        index:
          description: The index of the content part in the message.
          format: int64
          type: integer
        text:
          properties:
            annotations:
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject'
                - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject'
              type: array
            value:
              description: The data that makes up the text.
              type: string
          type: object
        type:
          description: Always `text`.
          enum:
          - text
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Text
      type: object
    MessageDeltaObject:
      description: 'Represents a message delta i.e. any changed fields on a message
        during streaming.

        '
      properties:
        delta:
          description: The delta containing the fields that have changed on the Message.
          properties:
            content:
              description: The content of the message in array of text and/or images.
              items:
                oneOf:
                - $ref: '#/components/schemas/MessageDeltaContentImageFileObject'
                - $ref: '#/components/schemas/MessageDeltaContentTextObject'
                - $ref: '#/components/schemas/MessageDeltaContentRefusalObject'
                - $ref: '#/components/schemas/MessageDeltaContentImageUrlObject'
              type: array
            role:
              description: The entity that produced the message. One of `user` or
                `assistant`.
              enum:
              - user
              - assistant
              type: string
          type: object
        id:
          description: The identifier of the message, which can be referenced in API
            endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message.delta`.
          enum:
          - thread.message.delta
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - delta
      title: Message delta object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"msg_123\",\n  \"object\": \"thread.message.delta\"\
          ,\n  \"delta\": {\n    \"content\": [\n      {\n        \"index\": 0,\n\
          \        \"type\": \"text\",\n        \"text\": { \"value\": \"Hello\",\
          \ \"annotations\": [] }\n      }\n    ]\n  }\n}\n"
        name: The message delta object
    MessageObject:
      description: Represents a message within a [thread](/docs/api-reference/threads).
      properties:
        assistant_id:
          description: If applicable, the ID of the [assistant](/docs/api-reference/assistants)
            that authored this message.
          nullable: true
          type: string
        attachments:
          description: A list of files attached to the message, and the tools they
            were added to.
          items:
            properties:
              file_id:
                description: The ID of the file to attach to the message.
                type: string
              tools:
                description: The tools to add this file to.
                items:
                  oneOf:
                  - $ref: '#/components/schemas/AssistantToolsCode'
                  - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
                type: array
            type: object
          nullable: true
          type: array
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          format: int64
          nullable: true
          type: integer
        content:
          description: The content of the message in array of text and/or images.
          items:
            oneOf:
            - $ref: '#/components/schemas/MessageContentImageFileObject'
            - $ref: '#/components/schemas/MessageContentImageUrlObject'
            - $ref: '#/components/schemas/MessageContentTextObject'
            - $ref: '#/components/schemas/MessageContentRefusalObject'
          type: array
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked
            as incomplete.
          format: int64
          nullable: true
          type: integer
        incomplete_details:
          description: On an incomplete message, details about why the message is
            incomplete.
          nullable: true
          properties:
            reason:
              description: The reason the message is incomplete.
              enum:
              - content_filter
              - max_tokens
              - run_cancelled
              - run_expired
              - run_failed
              type: string
          required:
          - reason
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread.message`.
          enum:
          - thread.message
          type: string
          x-stainless-const: true
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
          - user
          - assistant
          type: string
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) associated with
            the creation of this message. Value is `null` when messages are created
            manually using the create message or create thread endpoints.
          nullable: true
          type: string
        status:
          description: The status of the message, which can be either `in_progress`,
            `incomplete`, or `completed`.
          enum:
          - in_progress
          - incomplete
          - completed
          type: string
        thread_id:
          description: The [thread](/docs/api-reference/threads) ID that this message
            belongs to.
          type: string
      required:
      - id
      - object
      - created_at
      - thread_id
      - status
      - incomplete_details
      - completed_at
      - incomplete_at
      - role
      - content
      - assistant_id
      - run_id
      - attachments
      - metadata
      title: The message object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message\",\n\
          \  \"created_at\": 1698983503,\n  \"thread_id\": \"thread_abc123\",\n  \"\
          role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\"\
          ,\n      \"text\": {\n        \"value\": \"Hi! How can I help you today?\"\
          ,\n        \"annotations\": []\n      }\n    }\n  ],\n  \"assistant_id\"\
          : \"asst_abc123\",\n  \"run_id\": \"run_abc123\",\n  \"attachments\": [],\n\
          \  \"metadata\": {}\n}\n"
        name: The message object
    MessageRequestContentTextObject:
      description: The text content that is part of a message.
      properties:
        text:
          description: Text content to be sent to the model
          type: string
        type:
          description: Always `text`.
          enum:
          - text
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      title: Text
      type: object
    MessageStreamEvent:
      oneOf:
      - description: Occurs when a [message](/docs/api-reference/messages/object)
          is created.
        properties:
          data:
            $ref: '#/components/schemas/MessageObject'
          event:
            enum:
            - thread.message.created
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
      - description: Occurs when a [message](/docs/api-reference/messages/object)
          moves to an `in_progress` state.
        properties:
          data:
            $ref: '#/components/schemas/MessageObject'
          event:
            enum:
            - thread.message.in_progress
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
      - description: Occurs when parts of a [Message](/docs/api-reference/messages/object)
          are being streamed.
        properties:
          data:
            $ref: '#/components/schemas/MessageDeltaObject'
          event:
            enum:
            - thread.message.delta
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [message delta](/docs/api-reference/assistants-streaming/message-delta-object)'
      - description: Occurs when a [message](/docs/api-reference/messages/object)
          is completed.
        properties:
          data:
            $ref: '#/components/schemas/MessageObject'
          event:
            enum:
            - thread.message.completed
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
      - description: Occurs when a [message](/docs/api-reference/messages/object)
          ends before it is completed.
        properties:
          data:
            $ref: '#/components/schemas/MessageObject'
          event:
            enum:
            - thread.message.incomplete
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
    Metadata:
      additionalProperties:
        type: string
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be\nuseful for storing additional information about the object in a\
        \ structured\nformat, and querying for objects via API or the dashboard. \n\
        \nKeys are strings with a maximum length of 64 characters. Values are strings\n\
        with a maximum length of 512 characters.\n"
      nullable: true
      type: object
      x-oaiTypeLabel: map
    Model:
      description: Describes an OpenAI model offering that can be used with the API.
      properties:
        created:
          description: The Unix timestamp (in seconds) when the model was created.
          format: int64
          type: integer
        id:
          description: The model identifier, which can be referenced in the API endpoints.
          type: string
        object:
          description: The object type, which is always "model".
          enum:
          - model
          type: string
          x-stainless-const: true
        owned_by:
          description: The organization that owns the model.
          type: string
      required:
      - id
      - object
      - created
      - owned_by
      title: Model
      x-oaiMeta:
        example: "{\n  \"id\": \"VAR_chat_model_id\",\n  \"object\": \"model\",\n\
          \  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
        name: The model object
    ModelIds:
      anyOf:
      - $ref: '#/components/schemas/ModelIdsShared'
      - $ref: '#/components/schemas/ModelIdsResponses'
    ModelIdsResponses:
      anyOf:
      - $ref: '#/components/schemas/ModelIdsShared'
      - enum:
        - o1-pro
        - o1-pro-2025-03-19
        - o3-pro
        - o3-pro-2025-06-10
        - o3-deep-research
        - o3-deep-research-2025-06-26
        - o4-mini-deep-research
        - o4-mini-deep-research-2025-06-26
        - computer-use-preview
        - computer-use-preview-2025-03-11
        title: ResponsesOnlyModel
        type: string
      example: gpt-4o
    ModelIdsShared:
      anyOf:
      - type: string
      - enum:
        - gpt-4.1
        - gpt-4.1-mini
        - gpt-4.1-nano
        - gpt-4.1-2025-04-14
        - gpt-4.1-mini-2025-04-14
        - gpt-4.1-nano-2025-04-14
        - o4-mini
        - o4-mini-2025-04-16
        - o3
        - o3-2025-04-16
        - o3-mini
        - o3-mini-2025-01-31
        - o1
        - o1-2024-12-17
        - o1-preview
        - o1-preview-2024-09-12
        - o1-mini
        - o1-mini-2024-09-12
        - gpt-4o
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-audio-preview
        - gpt-4o-audio-preview-2024-10-01
        - gpt-4o-audio-preview-2024-12-17
        - gpt-4o-audio-preview-2025-06-03
        - gpt-4o-mini-audio-preview
        - gpt-4o-mini-audio-preview-2024-12-17
        - gpt-4o-search-preview
        - gpt-4o-mini-search-preview
        - gpt-4o-search-preview-2025-03-11
        - gpt-4o-mini-search-preview-2025-03-11
        - chatgpt-4o-latest
        - codex-mini-latest
        - gpt-4o-mini
        - gpt-4o-mini-2024-07-18
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0301
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
        type: string
      example: gpt-4o
    ModelResponseProperties:
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        service_tier:
          $ref: '#/components/schemas/ServiceTier'
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_logprobs:
          description: 'An integer between 0 and 20 specifying the number of most
            likely tokens to

            return at each token position, each with an associated log probability.

            '
          format: int64
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling,

            where the model considers the results of the tokens with top_p probability

            mass. So 0.1 means only the tokens comprising the top 10% probability
            mass

            are considered.


            We generally recommend altering this or `temperature` but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: "A stable identifier for your end-users. \nUsed to boost cache\
            \ hit rates by better bucketing similar requests and  to help OpenAI detect\
            \ and prevent abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      type: object
    ModifyAssistantRequest:
      additionalProperties: false
      properties:
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
          - type: string
          - $ref: '#/components/schemas/AssistantSupportedModels'
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models)
            for descriptions of them.

            '
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          maxLength: 256
          nullable: true
          type: string
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'Overrides the list of [file](/docs/api-reference/files)
                    IDs made available to the `code_interpreter` tool. There can be
                    a maximum of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: 'Overrides the [vector store](/docs/api-reference/vector-stores/object)
                    attached to this assistant. There can be a maximum of 1 vector
                    store attached to the assistant.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      type: object
    ModifyCertificateRequest:
      properties:
        name:
          description: The updated name for the certificate
          type: string
      required:
      - name
      type: object
    ModifyMessageRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    ModifyRunRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    ModifyThreadRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        tool_resources:
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
      type: object
    Move:
      description: 'A mouse move action.

        '
      properties:
        type:
          default: move
          description: "Specifies the event type. For a move action, this property\
            \ is \nalways set to `move`.\n"
          enum:
          - move
          type: string
          x-stainless-const: true
        x:
          description: 'The x-coordinate to move to.

            '
          format: int64
          type: integer
        y:
          description: 'The y-coordinate to move to.

            '
          format: int64
          type: integer
      required:
      - type
      - x
      - y
      title: Move
      type: object
    OpenAIFile:
      description: The `File` object represents a document that has been uploaded
        to OpenAI.
      properties:
        bytes:
          description: The size of the file, in bytes.
          format: int64
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the file was created.
          format: int64
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the file will expire.
          format: int64
          type: integer
        filename:
          description: The name of the file.
          type: string
        id:
          description: The file identifier, which can be referenced in the API endpoints.
          type: string
        object:
          description: The object type, which is always `file`.
          enum:
          - file
          type: string
          x-stainless-const: true
        purpose:
          description: The intended purpose of the file. Supported values are `assistants`,
            `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`
            and `vision`.
          enum:
          - assistants
          - assistants_output
          - batch
          - batch_output
          - fine-tune
          - fine-tune-results
          - vision
          type: string
        status:
          deprecated: true
          description: Deprecated. The current status of the file, which can be either
            `uploaded`, `processed`, or `error`.
          enum:
          - uploaded
          - processed
          - error
          type: string
        status_details:
          deprecated: true
          description: Deprecated. For details on why a fine-tuning training file
            failed validation, see the `error` field on `fine_tuning.job`.
          type: string
      required:
      - id
      - object
      - bytes
      - created_at
      - filename
      - purpose
      - status
      title: OpenAIFile
      x-oaiMeta:
        example: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\"\
          : 120000,\n  \"created_at\": 1677610602,\n  \"expires_at\": 1680202602,\n\
          \  \"filename\": \"salesOverview.pdf\",\n  \"purpose\": \"assistants\",\n\
          }\n"
        name: The file object
    OtherChunkingStrategyResponseParam:
      additionalProperties: false
      description: This is returned when the chunking strategy is unknown. Typically,
        this is because the file was indexed before the `chunking_strategy` concept
        was introduced in the API.
      properties:
        type:
          description: Always `other`.
          enum:
          - other
          type: string
          x-stainless-const: true
      required:
      - type
      title: Other Chunking Strategy
      type: object
    OutputAudio:
      description: 'An audio output from the model.

        '
      properties:
        data:
          description: 'Base64-encoded audio data from the model.

            '
          type: string
        transcript:
          description: 'The transcript of the audio data from the model.

            '
          type: string
        type:
          description: 'The type of the output audio. Always `output_audio`.

            '
          enum:
          - output_audio
          type: string
          x-stainless-const: true
      required:
      - type
      - data
      - transcript
      title: Output audio
      type: object
    OutputContent:
      oneOf:
      - $ref: '#/components/schemas/OutputTextContent'
      - $ref: '#/components/schemas/RefusalContent'
    OutputItem:
      anyOf:
      - $ref: '#/components/schemas/OutputMessage'
      - $ref: '#/components/schemas/FileSearchToolCall'
      - $ref: '#/components/schemas/FunctionToolCall'
      - $ref: '#/components/schemas/WebSearchToolCall'
      - $ref: '#/components/schemas/ComputerToolCall'
      - $ref: '#/components/schemas/ReasoningItem'
      - $ref: '#/components/schemas/ImageGenToolCall'
      - $ref: '#/components/schemas/CodeInterpreterToolCall'
      - $ref: '#/components/schemas/LocalShellToolCall'
      - $ref: '#/components/schemas/MCPToolCall'
      - $ref: '#/components/schemas/MCPListTools'
      - $ref: '#/components/schemas/MCPApprovalRequest'
      discriminator:
        propertyName: type
    OutputMessage:
      description: 'An output message from the model.

        '
      properties:
        content:
          description: 'The content of the output message.

            '
          items:
            $ref: '#/components/schemas/OutputContent'
          type: array
        id:
          description: 'The unique ID of the output message.

            '
          type: string
        role:
          description: 'The role of the output message. Always `assistant`.

            '
          enum:
          - assistant
          type: string
          x-stainless-const: true
        status:
          description: 'The status of the message input. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when input items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the output message. Always `message`.

            '
          enum:
          - message
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - role
      - content
      - status
      title: Output message
      type: object
    OutputTextContent:
      description: A text output from the model.
      properties:
        annotations:
          description: The annotations of the text output.
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        logprobs:
          items:
            $ref: '#/components/schemas/LogProb'
          type: array
        text:
          description: The text output from the model.
          type: string
        type:
          default: output_text
          description: The type of the output text. Always `output_text`.
          enum:
          - output_text
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      - annotations
      title: Output text
      type: object
    ParallelToolCalls:
      default: true
      description: Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling)
        during tool use.
      type: boolean
    PredictionContent:
      description: 'Static predicted output content, such as the content of a text
        file that is

        being regenerated.

        '
      properties:
        content:
          description: 'The content that should be matched when generating a model
            response.

            If generated tokens would match this content, the entire model response

            can be returned much more quickly.

            '
          oneOf:
          - description: 'The content used for a Predicted Output. This is often the

              text of a file you are regenerating with minor changes.

              '
            title: Text content
            type: string
          - description: An array of content parts with a defined type. Supported
              options differ based on the [model](/docs/models) being used to generate
              the response. Can contain text inputs.
            items:
              $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
            minItems: 1
            title: Array of content parts
            type: array
        type:
          description: 'The type of the predicted content you want to provide. This
            type is

            currently always `content`.

            '
          enum:
          - content
          type: string
          x-stainless-const: true
      required:
      - type
      - content
      title: Static Content
      type: object
    Project:
      description: Represents an individual project.
      properties:
        archived_at:
          description: The Unix timestamp (in seconds) of when the project was archived
            or `null`.
          format: int64
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) of when the project was created.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the project. This appears in reporting.
          type: string
        object:
          description: The object type, which is always `organization.project`
          enum:
          - organization.project
          type: string
          x-stainless-const: true
        status:
          description: '`active` or `archived`'
          enum:
          - active
          - archived
          type: string
      required:
      - id
      - object
      - name
      - created_at
      - status
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\"\
          ,\n    \"name\": \"Project example\",\n    \"created_at\": 1711471533,\n\
          \    \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        name: The project object
    ProjectApiKey:
      description: Represents an individual API key in a project.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) of when the API key was created
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        last_used_at:
          description: The Unix timestamp (in seconds) of when the API key was last
            used.
          format: int64
          type: integer
        name:
          description: The name of the API key
          type: string
        object:
          description: The object type, which is always `organization.project.api_key`
          enum:
          - organization.project.api_key
          type: string
          x-stainless-const: true
        owner:
          properties:
            service_account:
              $ref: '#/components/schemas/ProjectServiceAccount'
            type:
              description: '`user` or `service_account`'
              enum:
              - user
              - service_account
              type: string
            user:
              $ref: '#/components/schemas/ProjectUser'
          type: object
        redacted_value:
          description: The redacted value of the API key
          type: string
      required:
      - object
      - redacted_value
      - name
      - created_at
      - last_used_at
      - id
      - owner
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.api_key\",\n    \"redacted_value\"\
          : \"sk-abc...def\",\n    \"name\": \"My API Key\",\n    \"created_at\":\
          \ 1711471533,\n    \"last_used_at\": 1711471534,\n    \"id\": \"key_abc\"\
          ,\n    \"owner\": {\n        \"type\": \"user\",\n        \"user\": {\n\
          \            \"object\": \"organization.project.user\",\n            \"\
          id\": \"user_abc\",\n            \"name\": \"First Last\",\n           \
          \ \"email\": \"user@example.com\",\n            \"role\": \"owner\",\n \
          \           \"created_at\": 1711471533\n        }\n    }\n}\n"
        name: The project API key object
    ProjectApiKeyDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - organization.project.api_key.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    ProjectApiKeyListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectApiKey'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ProjectCreateRequest:
      properties:
        name:
          description: The friendly name of the project, this name appears in reports.
          type: string
      required:
      - name
      type: object
    ProjectListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Project'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ProjectRateLimit:
      description: Represents a project rate limit config.
      properties:
        batch_1_day_max_input_tokens:
          description: The maximum batch input tokens per day. Only present for relevant
            models.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        max_audio_megabytes_per_1_minute:
          description: The maximum audio megabytes per minute. Only present for relevant
            models.
          format: int64
          type: integer
        max_images_per_1_minute:
          description: The maximum images per minute. Only present for relevant models.
          format: int64
          type: integer
        max_requests_per_1_day:
          description: The maximum requests per day. Only present for relevant models.
          format: int64
          type: integer
        max_requests_per_1_minute:
          description: The maximum requests per minute.
          format: int64
          type: integer
        max_tokens_per_1_minute:
          description: The maximum tokens per minute.
          format: int64
          type: integer
        model:
          description: The model this rate limit applies to.
          type: string
        object:
          description: The object type, which is always `project.rate_limit`
          enum:
          - project.rate_limit
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - model
      - max_requests_per_1_minute
      - max_tokens_per_1_minute
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"project.rate_limit\",\n    \"id\": \"rl_ada\"\
          ,\n    \"model\": \"ada\",\n    \"max_requests_per_1_minute\": 600,\n  \
          \  \"max_tokens_per_1_minute\": 150000,\n    \"max_images_per_1_minute\"\
          : 10\n}\n"
        name: The project rate limit object
    ProjectRateLimitListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectRateLimit'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ProjectRateLimitUpdateRequest:
      properties:
        batch_1_day_max_input_tokens:
          description: The maximum batch input tokens per day. Only relevant for certain
            models.
          format: int64
          type: integer
        max_audio_megabytes_per_1_minute:
          description: The maximum audio megabytes per minute. Only relevant for certain
            models.
          format: int64
          type: integer
        max_images_per_1_minute:
          description: The maximum images per minute. Only relevant for certain models.
          format: int64
          type: integer
        max_requests_per_1_day:
          description: The maximum requests per day. Only relevant for certain models.
          format: int64
          type: integer
        max_requests_per_1_minute:
          description: The maximum requests per minute.
          format: int64
          type: integer
        max_tokens_per_1_minute:
          description: The maximum tokens per minute.
          format: int64
          type: integer
      type: object
    ProjectServiceAccount:
      description: Represents an individual service account in a project.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) of when the service account
            was created
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the service account
          type: string
        object:
          description: The object type, which is always `organization.project.service_account`
          enum:
          - organization.project.service_account
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `member`'
          enum:
          - owner
          - member
          type: string
      required:
      - object
      - id
      - name
      - role
      - created_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.service_account\",\n \
          \   \"id\": \"svc_acct_abc\",\n    \"name\": \"Service Account\",\n    \"\
          role\": \"owner\",\n    \"created_at\": 1711471533\n}\n"
        name: The project service account object
    ProjectServiceAccountApiKey:
      properties:
        created_at:
          format: int64
          type: integer
        id:
          type: string
        name:
          type: string
        object:
          description: The object type, which is always `organization.project.service_account.api_key`
          enum:
          - organization.project.service_account.api_key
          type: string
          x-stainless-const: true
        value:
          type: string
      required:
      - object
      - value
      - name
      - created_at
      - id
      type: object
    ProjectServiceAccountCreateRequest:
      properties:
        name:
          description: The name of the service account being created.
          type: string
      required:
      - name
      type: object
    ProjectServiceAccountCreateResponse:
      properties:
        api_key:
          $ref: '#/components/schemas/ProjectServiceAccountApiKey'
        created_at:
          format: int64
          type: integer
        id:
          type: string
        name:
          type: string
        object:
          enum:
          - organization.project.service_account
          type: string
          x-stainless-const: true
        role:
          description: Service accounts can only have one role of type `member`
          enum:
          - member
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - name
      - role
      - created_at
      - api_key
      type: object
    ProjectServiceAccountDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - organization.project.service_account.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    ProjectServiceAccountListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectServiceAccount'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ProjectUpdateRequest:
      properties:
        name:
          description: The updated name of the project, this name appears in reports.
          type: string
      required:
      - name
      type: object
    ProjectUser:
      description: Represents an individual user in a project.
      properties:
        added_at:
          description: The Unix timestamp (in seconds) of when the project was added.
          format: int64
          type: integer
        email:
          description: The email address of the user
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the user
          type: string
        object:
          description: The object type, which is always `organization.project.user`
          enum:
          - organization.project.user
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `member`'
          enum:
          - owner
          - member
          type: string
      required:
      - object
      - id
      - name
      - email
      - role
      - added_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.user\",\n    \"id\": \"\
          user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\"\
          ,\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        name: The project user object
    ProjectUserCreateRequest:
      properties:
        role:
          description: '`owner` or `member`'
          enum:
          - owner
          - member
          type: string
        user_id:
          description: The ID of the user.
          type: string
      required:
      - user_id
      - role
      type: object
    ProjectUserDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - organization.project.user.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    ProjectUserListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectUser'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          type: string
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    ProjectUserUpdateRequest:
      properties:
        role:
          description: '`owner` or `member`'
          enum:
          - owner
          - member
          type: string
      required:
      - role
      type: object
    Prompt:
      description: "Reference to a prompt template and its variables. \n[Learn more](/docs/guides/text?api-mode=responses#reusable-prompts).\n"
      nullable: true
      properties:
        id:
          description: The unique identifier of the prompt template to use.
          type: string
        variables:
          $ref: '#/components/schemas/ResponsePromptVariables'
        version:
          description: Optional version of the prompt template.
          nullable: true
          type: string
      required:
      - id
      type: object
    RankingOptions:
      properties:
        ranker:
          description: The ranker to use for the file search.
          enum:
          - auto
          - default-2024-11-15
          type: string
        score_threshold:
          description: The score threshold for the file search, a number between 0
            and 1. Numbers closer to 1 will attempt to return only the most relevant
            results, but may return fewer results.
          type: number
      required: []
      type: object
    RealtimeClientEvent:
      anyOf:
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemCreate'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemDelete'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemRetrieve'
      - $ref: '#/components/schemas/RealtimeClientEventConversationItemTruncate'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferAppend'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferClear'
      - $ref: '#/components/schemas/RealtimeClientEventOutputAudioBufferClear'
      - $ref: '#/components/schemas/RealtimeClientEventInputAudioBufferCommit'
      - $ref: '#/components/schemas/RealtimeClientEventResponseCancel'
      - $ref: '#/components/schemas/RealtimeClientEventResponseCreate'
      - $ref: '#/components/schemas/RealtimeClientEventSessionUpdate'
      - $ref: '#/components/schemas/RealtimeClientEventTranscriptionSessionUpdate'
      description: 'A realtime client event.

        '
      discriminator:
        propertyName: type
    RealtimeClientEventConversationItemCreate:
      description: "Add a new Item to the Conversation's context, including messages,\
        \ function \ncalls, and function call responses. This event can be used both\
        \ to populate a \n\"history\" of the conversation and to add new items mid-stream,\
        \ but has the \ncurrent limitation that it cannot populate assistant audio\
        \ messages.\n\nIf successful, the server will respond with a `conversation.item.created`\
        \ \nevent, otherwise an `error` event will be sent.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        previous_item_id:
          description: "The ID of the preceding item after which the new item will\
            \ be inserted. \nIf not set, the new item will be appended to the end\
            \ of the conversation.\nIf set to `root`, the new item will be added to\
            \ the beginning of the conversation.\nIf set to an existing ID, it allows\
            \ an item to be inserted mid-conversation. If the\nID cannot be found,\
            \ an error will be returned and the item will not be added.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.create`.
          enum:
          - conversation.item.create
          type: string
          x-stainless-const: true
      required:
      - type
      - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_345\",\n    \"type\": \"conversation.item.create\"\
          ,\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"\
          msg_001\",\n        \"type\": \"message\",\n        \"role\": \"user\",\n\
          \        \"content\": [\n            {\n                \"type\": \"input_text\"\
          ,\n                \"text\": \"Hello, how are you?\"\n            }\n  \
          \      ]\n    }\n}\n"
        group: realtime
        name: conversation.item.create
    RealtimeClientEventConversationItemDelete:
      description: "Send this event when you want to remove any item from the conversation\
        \ \nhistory. The server will respond with a `conversation.item.deleted` event,\
        \ \nunless the item does not exist in the conversation history, in which case\
        \ the \nserver will respond with an error.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item_id:
          description: The ID of the item to delete.
          type: string
        type:
          description: The event type, must be `conversation.item.delete`.
          enum:
          - conversation.item.delete
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_901\",\n    \"type\": \"conversation.item.delete\"\
          ,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: conversation.item.delete
    RealtimeClientEventConversationItemRetrieve:
      description: "Send this event when you want to retrieve the server's representation\
        \ of a specific item in the conversation history. This is useful, for example,\
        \ to inspect user audio after noise cancellation and VAD.\nThe server will\
        \ respond with a `conversation.item.retrieved` event, \nunless the item does\
        \ not exist in the conversation history, in which case the \nserver will respond\
        \ with an error.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item_id:
          description: The ID of the item to retrieve.
          type: string
        type:
          description: The event type, must be `conversation.item.retrieve`.
          enum:
          - conversation.item.retrieve
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_901\",\n    \"type\": \"conversation.item.retrieve\"\
          ,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: conversation.item.retrieve
    RealtimeClientEventConversationItemTruncate:
      description: "Send this event to truncate a previous assistant message\u2019\
        s audio. The server \nwill produce audio faster than realtime, so this event\
        \ is useful when the user \ninterrupts to truncate audio that has already\
        \ been sent to the client but not \nyet played. This will synchronize the\
        \ server's understanding of the audio with \nthe client's playback.\n\nTruncating\
        \ audio will delete the server-side text transcript to ensure there \nis not\
        \ text in the context that hasn't been heard by the user.\n\nIf successful,\
        \ the server will respond with a `conversation.item.truncated` \nevent. \n"
      properties:
        audio_end_ms:
          description: "Inclusive duration up to which audio is truncated, in milliseconds.\
            \ If \nthe audio_end_ms is greater than the actual audio duration, the\
            \ server \nwill respond with an error.\n"
          format: int64
          type: integer
        content_index:
          description: The index of the content part to truncate. Set this to 0.
          format: int64
          type: integer
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item_id:
          description: "The ID of the assistant message item to truncate. Only assistant\
            \ message \nitems can be truncated.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.truncate`.
          enum:
          - conversation.item.truncate
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - content_index
      - audio_end_ms
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_678\",\n    \"type\": \"conversation.item.truncate\"\
          ,\n    \"item_id\": \"msg_002\",\n    \"content_index\": 0,\n    \"audio_end_ms\"\
          : 1500\n}\n"
        group: realtime
        name: conversation.item.truncate
    RealtimeClientEventInputAudioBufferAppend:
      description: "Send this event to append audio bytes to the input audio buffer.\
        \ The audio \nbuffer is temporary storage you can write to and later commit.\
        \ In Server VAD \nmode, the audio buffer is used to detect speech and the\
        \ server will decide \nwhen to commit. When Server VAD is disabled, you must\
        \ commit the audio buffer\nmanually.\n\nThe client may choose how much audio\
        \ to place in each event up to a maximum \nof 15 MiB, for example streaming\
        \ smaller chunks from the client may allow the \nVAD to be more responsive.\
        \ Unlike made other client events, the server will \nnot send a confirmation\
        \ response to this event.\n"
      properties:
        audio:
          description: "Base64-encoded audio bytes. This must be in the format specified\
            \ by the \n`input_audio_format` field in the session configuration.\n"
          type: string
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.append`.
          enum:
          - input_audio_buffer.append
          type: string
          x-stainless-const: true
      required:
      - type
      - audio
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_456\",\n    \"type\": \"input_audio_buffer.append\"\
          ,\n    \"audio\": \"Base64EncodedAudioData\"\n}\n"
        group: realtime
        name: input_audio_buffer.append
    RealtimeClientEventInputAudioBufferClear:
      description: "Send this event to clear the audio bytes in the buffer. The server\
        \ will \nrespond with an `input_audio_buffer.cleared` event.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.clear`.
          enum:
          - input_audio_buffer.clear
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_012\",\n    \"type\": \"input_audio_buffer.clear\"\
          \n}\n"
        group: realtime
        name: input_audio_buffer.clear
    RealtimeClientEventInputAudioBufferCommit:
      description: "Send this event to commit the user input audio buffer, which will\
        \ create a \nnew user message item in the conversation. This event will produce\
        \ an error \nif the input audio buffer is empty. When in Server VAD mode,\
        \ the client does \nnot need to send this event, the server will commit the\
        \ audio buffer \nautomatically.\n\nCommitting the input audio buffer will\
        \ trigger input audio transcription \n(if enabled in session configuration),\
        \ but it will not create a response \nfrom the model. The server will respond\
        \ with an `input_audio_buffer.committed` \nevent.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.commit`.
          enum:
          - input_audio_buffer.commit
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_789\",\n    \"type\": \"input_audio_buffer.commit\"\
          \n}\n"
        group: realtime
        name: input_audio_buffer.commit
    RealtimeClientEventOutputAudioBufferClear:
      description: "**WebRTC Only:** Emit to cut off the current audio response. This\
        \ will trigger the server to\nstop generating audio and emit a `output_audio_buffer.cleared`\
        \ event. This \nevent should be preceded by a `response.cancel` client event\
        \ to stop the \ngeneration of the current response.\n[Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\n"
      properties:
        event_id:
          description: The unique ID of the client event used for error handling.
          type: string
        type:
          description: The event type, must be `output_audio_buffer.clear`.
          enum:
          - output_audio_buffer.clear
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"optional_client_event_id\",\n    \"type\"\
          : \"output_audio_buffer.clear\"\n}\n"
        group: realtime
        name: output_audio_buffer.clear
    RealtimeClientEventResponseCancel:
      description: "Send this event to cancel an in-progress response. The server\
        \ will respond \nwith a `response.cancelled` event or an error if there is\
        \ no response to \ncancel.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        response_id:
          description: "A specific response ID to cancel - if not provided, will cancel\
            \ an \nin-progress response in the default conversation.\n"
          type: string
        type:
          description: The event type, must be `response.cancel`.
          enum:
          - response.cancel
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_567\",\n    \"type\": \"response.cancel\"\
          \n}\n"
        group: realtime
        name: response.cancel
    RealtimeClientEventResponseCreate:
      description: "This event instructs the server to create a Response, which means\
        \ triggering \nmodel inference. When in Server VAD mode, the server will create\
        \ Responses \nautomatically.\n\nA Response will include at least one Item,\
        \ and may have two, in which case \nthe second will be a function call. These\
        \ Items will be appended to the \nconversation history.\n\nThe server will\
        \ respond with a `response.created` event, events for Items \nand content\
        \ created, and finally a `response.done` event to indicate the \nResponse\
        \ is complete.\n\nThe `response.create` event includes inference configuration\
        \ like \n`instructions`, and `temperature`. These fields will override the\
        \ Session's \nconfiguration for this Response only.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponseCreateParams'
        type:
          description: The event type, must be `response.create`.
          enum:
          - response.create
          type: string
          x-stainless-const: true
      required:
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_234\",\n    \"type\": \"response.create\"\
          ,\n    \"response\": {\n        \"modalities\": [\"text\", \"audio\"],\n\
          \        \"instructions\": \"Please assist the user.\",\n        \"voice\"\
          : \"sage\",\n        \"output_audio_format\": \"pcm16\",\n        \"tools\"\
          : [\n            {\n                \"type\": \"function\",\n          \
          \      \"name\": \"calculate_sum\",\n                \"description\": \"\
          Calculates the sum of two numbers.\",\n                \"parameters\": {\n\
          \                    \"type\": \"object\",\n                    \"properties\"\
          : {\n                        \"a\": { \"type\": \"number\" },\n        \
          \                \"b\": { \"type\": \"number\" }\n                    },\n\
          \                    \"required\": [\"a\", \"b\"]\n                }\n \
          \           }\n        ],\n        \"tool_choice\": \"auto\",\n        \"\
          temperature\": 0.8,\n        \"max_output_tokens\": 1024\n    }\n}\n"
        group: realtime
        name: response.create
    RealtimeClientEventSessionUpdate:
      description: "Send this event to update the session\u2019s default configuration.\n\
        The client may send this event at any time to update any field,\nexcept for\
        \ `voice`. However, note that once a session has been\ninitialized with a\
        \ particular `model`, it can\u2019t be changed to\nanother model using `session.update`.\n\
        \nWhen the server receives a `session.update`, it will respond\nwith a `session.updated`\
        \ event showing the full, effective configuration.\nOnly the fields that are\
        \ present are updated. To clear a field like\n`instructions`, pass an empty\
        \ string.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSessionCreateRequest'
        type:
          description: The event type, must be `session.update`.
          enum:
          - session.update
          type: string
          x-stainless-const: true
      required:
      - type
      - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_123\",\n    \"type\": \"session.update\"\
          ,\n    \"session\": {\n        \"modalities\": [\"text\", \"audio\"],\n\
          \        \"instructions\": \"You are a helpful assistant.\",\n        \"\
          voice\": \"sage\",\n        \"input_audio_format\": \"pcm16\",\n       \
          \ \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\"\
          : {\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\"\
          : {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n\
          \            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\"\
          : 500,\n            \"create_response\": true\n        },\n        \"tools\"\
          : [\n            {\n                \"type\": \"function\",\n          \
          \      \"name\": \"get_weather\",\n                \"description\": \"Get\
          \ the current weather...\",\n                \"parameters\": {\n       \
          \             \"type\": \"object\",\n                    \"properties\"\
          : {\n                        \"location\": { \"type\": \"string\" }\n  \
          \                  },\n                    \"required\": [\"location\"]\n\
          \                }\n            }\n        ],\n        \"tool_choice\":\
          \ \"auto\",\n        \"temperature\": 0.8,\n        \"max_response_output_tokens\"\
          : \"inf\",\n        \"speed\": 1.1,\n        \"tracing\": \"auto\"\n   \
          \ }\n}\n"
        group: realtime
        name: session.update
    RealtimeClientEventTranscriptionSessionUpdate:
      description: 'Send this event to update a transcription session.

        '
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeTranscriptionSessionCreateRequest'
        type:
          description: The event type, must be `transcription_session.update`.
          enum:
          - transcription_session.update
          type: string
          x-stainless-const: true
      required:
      - type
      - session
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"transcription_session.update\",\n  \"session\"\
          : {\n    \"input_audio_format\": \"pcm16\",\n    \"input_audio_transcription\"\
          : {\n      \"model\": \"gpt-4o-transcribe\",\n      \"prompt\": \"\",\n\
          \      \"language\": \"\"\n    },\n    \"turn_detection\": {\n      \"type\"\
          : \"server_vad\",\n      \"threshold\": 0.5,\n      \"prefix_padding_ms\"\
          : 300,\n      \"silence_duration_ms\": 500,\n      \"create_response\":\
          \ true,\n    },\n    \"input_audio_noise_reduction\": {\n      \"type\"\
          : \"near_field\"\n    },\n    \"include\": [\n      \"item.input_audio_transcription.logprobs\"\
          ,\n    ]\n  }\n}\n"
        group: realtime
        name: transcription_session.update
    RealtimeConversationItem:
      description: The item to add to the conversation.
      properties:
        arguments:
          description: 'The arguments of the function call (for `function_call` items).

            '
          type: string
        call_id:
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
          type: string
        content:
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            properties:
              audio:
                description: 'Base64-encoded audio bytes, used for `input_audio` content
                  type.

                  '
                type: string
              id:
                description: 'ID of a previous conversation item to reference (for
                  `item_reference`

                  content types in `response.create` events). These can reference
                  both

                  client and server created items.

                  '
                type: string
              text:
                description: 'The text content, used for `input_text` and `text` content
                  types.

                  '
                type: string
              transcript:
                description: 'The transcript of the audio, used for `input_audio`
                  content type.

                  '
                type: string
              type:
                description: 'The content type (`input_text`, `input_audio`, `item_reference`,
                  `text`).

                  '
                enum:
                - input_audio
                - input_text
                - item_reference
                - text
                type: string
            type: object
          type: array
        id:
          description: "The unique ID of the item, this can be generated by the client\
            \ to help \nmanage server-side context, but is not required because the\
            \ server will \ngenerate one if not provided.\n"
          type: string
        name:
          description: 'The name of the function being called (for `function_call`
            items).

            '
          type: string
        object:
          description: 'Identifier for the API object being returned - always `realtime.item`.

            '
          enum:
          - realtime.item
          type: string
          x-stainless-const: true
        output:
          description: 'The output of the function call (for `function_call_output`
            items).

            '
          type: string
        role:
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
          enum:
          - user
          - assistant
          - system
          type: string
        status:
          description: "The status of the item (`completed`, `incomplete`). These\
            \ have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
          enum:
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the item (`message`, `function_call`, `function_call_output`).

            '
          enum:
          - message
          - function_call
          - function_call_output
          type: string
      type: object
    RealtimeConversationItemWithReference:
      description: The item to add to the conversation.
      properties:
        arguments:
          description: 'The arguments of the function call (for `function_call` items).

            '
          type: string
        call_id:
          description: "The ID of the function call (for `function_call` and \n`function_call_output`\
            \ items). If passed on a `function_call_output` \nitem, the server will\
            \ check that a `function_call` item with the same \nID exists in the conversation\
            \ history.\n"
          type: string
        content:
          description: "The content of the message, applicable for `message` items.\
            \ \n- Message items of role `system` support only `input_text` content\n\
            - Message items of role `user` support `input_text` and `input_audio`\
            \ \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            properties:
              audio:
                description: 'Base64-encoded audio bytes, used for `input_audio` content
                  type.

                  '
                type: string
              id:
                description: 'ID of a previous conversation item to reference (for
                  `item_reference`

                  content types in `response.create` events). These can reference
                  both

                  client and server created items.

                  '
                type: string
              text:
                description: 'The text content, used for `input_text` and `text` content
                  types.

                  '
                type: string
              transcript:
                description: 'The transcript of the audio, used for `input_audio`
                  content type.

                  '
                type: string
              type:
                description: 'The content type (`input_text`, `input_audio`, `item_reference`,
                  `text`).

                  '
                enum:
                - input_audio
                - input_text
                - item_reference
                - text
                type: string
            type: object
          type: array
        id:
          description: 'For an item of type (`message` | `function_call` | `function_call_output`)

            this field allows the client to assign the unique ID of the item. It is

            not required because the server will generate one if not provided.


            For an item of type `item_reference`, this field is required and is a

            reference to any item that has previously existed in the conversation.

            '
          type: string
        name:
          description: 'The name of the function being called (for `function_call`
            items).

            '
          type: string
        object:
          description: 'Identifier for the API object being returned - always `realtime.item`.

            '
          enum:
          - realtime.item
          type: string
          x-stainless-const: true
        output:
          description: 'The output of the function call (for `function_call_output`
            items).

            '
          type: string
        role:
          description: "The role of the message sender (`user`, `assistant`, `system`),\
            \ only \napplicable for `message` items.\n"
          enum:
          - user
          - assistant
          - system
          type: string
        status:
          description: "The status of the item (`completed`, `incomplete`). These\
            \ have no effect \non the conversation, but are accepted for consistency\
            \ with the \n`conversation.item.created` event.\n"
          enum:
          - completed
          - incomplete
          type: string
        type:
          description: 'The type of the item (`message`, `function_call`, `function_call_output`,
            `item_reference`).

            '
          enum:
          - message
          - function_call
          - function_call_output
          type: string
      type: object
    RealtimeResponse:
      description: The response resource.
      properties:
        conversation_id:
          description: 'Which conversation the response is added to, determined by
            the `conversation`

            field in the `response.create` event. If `auto`, the response will be
            added to

            the default conversation and the value of `conversation_id` will be an
            id like

            `conv_1234`. If `none`, the response will not be added to any conversation
            and

            the value of `conversation_id` will be `null`. If responses are being
            triggered

            by server VAD, the response will be added to the default conversation,
            thus

            the `conversation_id` will be an id like `conv_1234`.

            '
          type: string
        id:
          description: The unique ID of the response.
          type: string
        max_output_tokens:
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls, that was used in this response.

            '
          oneOf:
          - format: int64
            type: integer
          - enum:
            - inf
            type: string
            x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        modalities:
          description: 'The set of modalities the model used to respond. If there
            are multiple modalities,

            the model will pick one, for example if `modalities` is `["text", "audio"]`,
            the model

            could be responding in either text or audio.

            '
          items:
            enum:
            - text
            - audio
            type: string
          type: array
        object:
          description: The object type, must be `realtime.response`.
          enum:
          - realtime.response
          type: string
          x-stainless-const: true
        output:
          description: The list of output items generated by the response.
          items:
            $ref: '#/components/schemas/RealtimeConversationItem'
          type: array
        output_audio_format:
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        status:
          description: "The final status of the response (`completed`, `cancelled`,\
            \ `failed`, or \n`incomplete`).\n"
          enum:
          - completed
          - cancelled
          - failed
          - incomplete
          type: string
        status_details:
          description: Additional details about the status.
          properties:
            error:
              description: "A description of the error that caused the response to\
                \ fail, \npopulated when the `status` is `failed`.\n"
              properties:
                code:
                  description: Error code, if any.
                  type: string
                type:
                  description: The type of error.
                  type: string
              type: object
            reason:
              description: "The reason the Response did not complete. For a `cancelled`\
                \ Response, \none of `turn_detected` (the server VAD detected a new\
                \ start of speech) \nor `client_cancelled` (the client sent a cancel\
                \ event). For an \n`incomplete` Response, one of `max_output_tokens`\
                \ or `content_filter` \n(the server-side safety filter activated and\
                \ cut off the response).\n"
              enum:
              - turn_detected
              - client_cancelled
              - max_output_tokens
              - content_filter
              type: string
            type:
              description: "The type of error that caused the response to fail, corresponding\
                \ \nwith the `status` field (`completed`, `cancelled`, `incomplete`,\
                \ \n`failed`).\n"
              enum:
              - completed
              - cancelled
              - failed
              - incomplete
              type: string
          type: object
        temperature:
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
          type: number
        usage:
          description: "Usage statistics for the Response, this will correspond to\
            \ billing. A \nRealtime API session will maintain a conversation context\
            \ and append new \nItems to the Conversation, thus output from previous\
            \ turns (text and \naudio tokens) will become the input for later turns.\n"
          properties:
            input_token_details:
              description: Details about the input tokens used in the Response.
              properties:
                audio_tokens:
                  description: The number of audio tokens used in the Response.
                  format: int64
                  type: integer
                cached_tokens:
                  description: The number of cached tokens used in the Response.
                  format: int64
                  type: integer
                text_tokens:
                  description: The number of text tokens used in the Response.
                  format: int64
                  type: integer
              type: object
            input_tokens:
              description: "The number of input tokens used in the Response, including\
                \ text and \naudio tokens.\n"
              format: int64
              type: integer
            output_token_details:
              description: Details about the output tokens used in the Response.
              properties:
                audio_tokens:
                  description: The number of audio tokens used in the Response.
                  format: int64
                  type: integer
                text_tokens:
                  description: The number of text tokens used in the Response.
                  format: int64
                  type: integer
              type: object
            output_tokens:
              description: "The number of output tokens sent in the Response, including\
                \ text and \naudio tokens.\n"
              format: int64
              type: integer
            total_tokens:
              description: "The total number of tokens in the Response including input\
                \ and output \ntext and audio tokens.\n"
              format: int64
              type: integer
          type: object
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model used to respond.

            Current voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`,

            `onyx`, `nova`, `sage`, `shimmer`, and `verse`.

            '
      type: object
    RealtimeResponseCreateParams:
      description: Create a new Realtime response with these parameters
      properties:
        conversation:
          description: "Controls which conversation the response is added to. Currently\
            \ supports\n`auto` and `none`, with `auto` as the default value. The `auto`\
            \ value\nmeans that the contents of the response will be added to the\
            \ default\nconversation. Set this to `none` to create an out-of-band response\
            \ which \nwill not add items to default conversation.\n"
          oneOf:
          - type: string
          - default: auto
            enum:
            - auto
            - none
            type: string
        input:
          description: 'Input items to include in the prompt for the model. Using
            this field

            creates a new context for this Response instead of using the default

            conversation. An empty array `[]` will clear the context for this Response.

            Note that this can include references to items from the default conversation.

            '
          items:
            $ref: '#/components/schemas/RealtimeConversationItemWithReference'
          type: array
        instructions:
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
          oneOf:
          - format: int64
            type: integer
          - enum:
            - inf
            type: string
            x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            enum:
            - text
            - audio
            type: string
          type: array
        output_audio_format:
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        temperature:
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function, like `{\"type\": \"function\", \"function\"\
            : {\"name\": \"my_function\"}}`.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: "The voice the model uses to respond. Voice cannot be changed\
            \ during the \nsession once the model has responded with audio at least\
            \ once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`,\
            \ `echo`, `fable`,\n`onyx`, `nova`, `sage`, `shimmer`, and `verse`.\n"
      type: object
    RealtimeServerEvent:
      anyOf:
      - $ref: '#/components/schemas/RealtimeServerEventConversationCreated'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemCreated'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemDeleted'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionCompleted'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionDelta'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemInputAudioTranscriptionFailed'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemRetrieved'
      - $ref: '#/components/schemas/RealtimeServerEventConversationItemTruncated'
      - $ref: '#/components/schemas/RealtimeServerEventError'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferCleared'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferCommitted'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStarted'
      - $ref: '#/components/schemas/RealtimeServerEventInputAudioBufferSpeechStopped'
      - $ref: '#/components/schemas/RealtimeServerEventRateLimitsUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioTranscriptDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseAudioTranscriptDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseContentPartAdded'
      - $ref: '#/components/schemas/RealtimeServerEventResponseContentPartDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseCreated'
      - $ref: '#/components/schemas/RealtimeServerEventResponseDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseFunctionCallArgumentsDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseOutputItemAdded'
      - $ref: '#/components/schemas/RealtimeServerEventResponseOutputItemDone'
      - $ref: '#/components/schemas/RealtimeServerEventResponseTextDelta'
      - $ref: '#/components/schemas/RealtimeServerEventResponseTextDone'
      - $ref: '#/components/schemas/RealtimeServerEventSessionCreated'
      - $ref: '#/components/schemas/RealtimeServerEventSessionUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventTranscriptionSessionUpdated'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferStarted'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferStopped'
      - $ref: '#/components/schemas/RealtimeServerEventOutputAudioBufferCleared'
      description: 'A realtime server event.

        '
      discriminator:
        propertyName: type
    RealtimeServerEventConversationCreated:
      description: 'Returned when a conversation is created. Emitted right after session
        creation.

        '
      properties:
        conversation:
          description: The conversation resource.
          properties:
            id:
              description: The unique ID of the conversation.
              type: string
            object:
              description: The object type, must be `realtime.conversation`.
              type: string
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `conversation.created`.
          enum:
          - conversation.created
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - conversation
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_9101\",\n    \"type\": \"conversation.created\"\
          ,\n    \"conversation\": {\n        \"id\": \"conv_001\",\n        \"object\"\
          : \"realtime.conversation\"\n    }\n}\n"
        group: realtime
        name: conversation.created
    RealtimeServerEventConversationItemCreated:
      description: "Returned when a conversation item is created. There are several\
        \ scenarios that produce this event:\n  - The server is generating a Response,\
        \ which if successful will produce \n    either one or two Items, which will\
        \ be of type `message` \n    (role `assistant`) or type `function_call`.\n\
        \  - The input audio buffer has been committed, either by the client or the\
        \ \n    server (in `server_vad` mode). The server will take the content of\
        \ the \n    input audio buffer and add it to a new user message Item.\n  -\
        \ The client has sent a `conversation.item.create` event to add a new Item\
        \ \n    to the Conversation.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        previous_item_id:
          description: "The ID of the preceding item in the Conversation context,\
            \ allows the \nclient to understand the order of the conversation.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.created`.
          enum:
          - conversation.item.created
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - previous_item_id
      - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1920\",\n    \"type\": \"conversation.item.created\"\
          ,\n    \"previous_item_id\": \"msg_002\",\n    \"item\": {\n        \"id\"\
          : \"msg_003\",\n        \"object\": \"realtime.item\",\n        \"type\"\
          : \"message\",\n        \"status\": \"completed\",\n        \"role\": \"\
          user\",\n        \"content\": []\n    }\n}\n"
        group: realtime
        name: conversation.item.created
    RealtimeServerEventConversationItemDeleted:
      description: "Returned when an item in the conversation is deleted by the client\
        \ with a \n`conversation.item.delete` event. This event is used to synchronize\
        \ the \nserver's understanding of the conversation history with the client's\
        \ view.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item that was deleted.
          type: string
        type:
          description: The event type, must be `conversation.item.deleted`.
          enum:
          - conversation.item.deleted
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2728\",\n    \"type\": \"conversation.item.deleted\"\
          ,\n    \"item_id\": \"msg_005\"\n}\n"
        group: realtime
        name: conversation.item.deleted
    RealtimeServerEventConversationItemInputAudioTranscriptionCompleted:
      description: "This event is the output of audio transcription for user audio\
        \ written to the \nuser audio buffer. Transcription begins when the input\
        \ audio buffer is \ncommitted by the client or server (in `server_vad` mode).\
        \ Transcription runs \nasynchronously with Response creation, so this event\
        \ may come before or after \nthe Response events.\n\nRealtime API models accept\
        \ audio natively, and thus input transcription is a\nseparate process run\
        \ on a separate ASR (Automatic Speech Recognition) model.\nThe transcript\
        \ may diverge somewhat from the model's interpretation, and\nshould be treated\
        \ as a rough guide.\n"
      properties:
        content_index:
          description: The index of the content part containing the audio.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item containing the audio.
          type: string
        logprobs:
          description: The log probabilities of the transcription.
          items:
            $ref: '#/components/schemas/LogProbProperties'
          nullable: true
          type: array
        transcript:
          description: The transcribed text.
          type: string
        type:
          description: 'The event type, must be

            `conversation.item.input_audio_transcription.completed`.

            '
          enum:
          - conversation.item.input_audio_transcription.completed
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item_id
      - content_index
      - transcript
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2122\",\n    \"type\": \"conversation.item.input_audio_transcription.completed\"\
          ,\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"transcript\"\
          : \"Hello, how are you?\"\n}\n"
        group: realtime
        name: conversation.item.input_audio_transcription.completed
    RealtimeServerEventConversationItemInputAudioTranscriptionDelta:
      description: 'Returned when the text value of an input audio transcription content
        part is updated.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        delta:
          description: The text delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        logprobs:
          description: The log probabilities of the transcription.
          items:
            $ref: '#/components/schemas/LogProbProperties'
          nullable: true
          type: array
        type:
          description: The event type, must be `conversation.item.input_audio_transcription.delta`.
          enum:
          - conversation.item.input_audio_transcription.delta
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"conversation.item.input_audio_transcription.delta\"\
          ,\n  \"event_id\": \"event_001\",\n  \"item_id\": \"item_001\",\n  \"content_index\"\
          : 0,\n  \"delta\": \"Hello\"\n}\n"
        group: realtime
        name: conversation.item.input_audio_transcription.delta
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed:
      description: "Returned when input audio transcription is configured, and a transcription\
        \ \nrequest for a user message failed. These events are separate from other\
        \ \n`error` events so that the client can identify the related Item.\n"
      properties:
        content_index:
          description: The index of the content part containing the audio.
          format: int64
          type: integer
        error:
          description: Details of the transcription error.
          properties:
            code:
              description: Error code, if any.
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: Parameter related to the error, if any.
              type: string
            type:
              description: The type of error.
              type: string
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item.
          type: string
        type:
          description: 'The event type, must be

            `conversation.item.input_audio_transcription.failed`.

            '
          enum:
          - conversation.item.input_audio_transcription.failed
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item_id
      - content_index
      - error
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2324\",\n    \"type\": \"conversation.item.input_audio_transcription.failed\"\
          ,\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"error\"\
          : {\n        \"type\": \"transcription_error\",\n        \"code\": \"audio_unintelligible\"\
          ,\n        \"message\": \"The audio could not be transcribed.\",\n     \
          \   \"param\": null\n    }\n}\n"
        group: realtime
        name: conversation.item.input_audio_transcription.failed
    RealtimeServerEventConversationItemRetrieved:
      description: 'Returned when a conversation item is retrieved with `conversation.item.retrieve`.

        '
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        type:
          description: The event type, must be `conversation.item.retrieved`.
          enum:
          - conversation.item.retrieved
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1920\",\n    \"type\": \"conversation.item.created\"\
          ,\n    \"previous_item_id\": \"msg_002\",\n    \"item\": {\n        \"id\"\
          : \"msg_003\",\n        \"object\": \"realtime.item\",\n        \"type\"\
          : \"message\",\n        \"status\": \"completed\",\n        \"role\": \"\
          user\",\n        \"content\": [\n            {\n                \"type\"\
          : \"input_audio\",\n                \"transcript\": \"hello how are you\"\
          ,\n                \"audio\": \"base64encodedaudio==\"\n            }\n\
          \        ]\n    }\n}\n"
        group: realtime
        name: conversation.item.retrieved
    RealtimeServerEventConversationItemTruncated:
      description: "Returned when an earlier assistant audio message item is truncated\
        \ by the \nclient with a `conversation.item.truncate` event. This event is\
        \ used to \nsynchronize the server's understanding of the audio with the client's\
        \ playback.\n\nThis action will truncate the audio and remove the server-side\
        \ text transcript \nto ensure there is no text in the context that hasn't\
        \ been heard by the user.\n"
      properties:
        audio_end_ms:
          description: 'The duration up to which the audio was truncated, in milliseconds.

            '
          format: int64
          type: integer
        content_index:
          description: The index of the content part that was truncated.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the assistant message item that was truncated.
          type: string
        type:
          description: The event type, must be `conversation.item.truncated`.
          enum:
          - conversation.item.truncated
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - item_id
      - content_index
      - audio_end_ms
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2526\",\n    \"type\": \"conversation.item.truncated\"\
          ,\n    \"item_id\": \"msg_004\",\n    \"content_index\": 0,\n    \"audio_end_ms\"\
          : 1500\n}\n"
        group: realtime
        name: conversation.item.truncated
    RealtimeServerEventError:
      description: "Returned when an error occurs, which could be a client problem\
        \ or a server \nproblem. Most errors are recoverable and the session will\
        \ stay open, we \nrecommend to implementors to monitor and log error messages\
        \ by default.\n"
      properties:
        error:
          description: Details of the error.
          properties:
            code:
              description: Error code, if any.
              nullable: true
              type: string
            event_id:
              description: 'The event_id of the client event that caused the error,
                if applicable.

                '
              nullable: true
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: Parameter related to the error, if any.
              nullable: true
              type: string
            type:
              description: 'The type of error (e.g., "invalid_request_error", "server_error").

                '
              type: string
          required:
          - type
          - message
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `error`.
          enum:
          - error
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - error
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_890\",\n    \"type\": \"error\",\n\
          \    \"error\": {\n        \"type\": \"invalid_request_error\",\n      \
          \  \"code\": \"invalid_event\",\n        \"message\": \"The 'type' field\
          \ is missing.\",\n        \"param\": null,\n        \"event_id\": \"event_567\"\
          \n    }\n}\n"
        group: realtime
        name: error
    RealtimeServerEventInputAudioBufferCleared:
      description: "Returned when the input audio buffer is cleared by the client\
        \ with a \n`input_audio_buffer.clear` event.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.cleared`.
          enum:
          - input_audio_buffer.cleared
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1314\",\n    \"type\": \"input_audio_buffer.cleared\"\
          \n}\n"
        group: realtime
        name: input_audio_buffer.cleared
    RealtimeServerEventInputAudioBufferCommitted:
      description: "Returned when an input audio buffer is committed, either by the\
        \ client or \nautomatically in server VAD mode. The `item_id` property is\
        \ the ID of the user\nmessage item that will be created, thus a `conversation.item.created`\
        \ event \nwill also be sent to the client.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item that will be created.
          type: string
        previous_item_id:
          description: 'The ID of the preceding item after which the new item will
            be inserted.

            '
          type: string
        type:
          description: The event type, must be `input_audio_buffer.committed`.
          enum:
          - input_audio_buffer.committed
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - previous_item_id
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1121\",\n    \"type\": \"input_audio_buffer.committed\"\
          ,\n    \"previous_item_id\": \"msg_001\",\n    \"item_id\": \"msg_002\"\n\
          }\n"
        group: realtime
        name: input_audio_buffer.committed
    RealtimeServerEventInputAudioBufferSpeechStarted:
      description: "Sent by the server when in `server_vad` mode to indicate that\
        \ speech has been \ndetected in the audio buffer. This can happen any time\
        \ audio is added to the \nbuffer (unless speech is already detected). The\
        \ client may want to use this \nevent to interrupt audio playback or provide\
        \ visual feedback to the user. \n\nThe client should expect to receive a `input_audio_buffer.speech_stopped`\
        \ event \nwhen speech stops. The `item_id` property is the ID of the user\
        \ message item \nthat will be created when speech stops and will also be included\
        \ in the \n`input_audio_buffer.speech_stopped` event (unless the client manually\
        \ commits \nthe audio buffer during VAD activation).\n"
      properties:
        audio_start_ms:
          description: "Milliseconds from the start of all audio written to the buffer\
            \ during the \nsession when speech was first detected. This will correspond\
            \ to the \nbeginning of audio sent to the model, and thus includes the\
            \ \n`prefix_padding_ms` configured in the Session.\n"
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: 'The ID of the user message item that will be created when
            speech stops.

            '
          type: string
        type:
          description: The event type, must be `input_audio_buffer.speech_started`.
          enum:
          - input_audio_buffer.speech_started
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - audio_start_ms
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1516\",\n    \"type\": \"input_audio_buffer.speech_started\"\
          ,\n    \"audio_start_ms\": 1000,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: input_audio_buffer.speech_started
    RealtimeServerEventInputAudioBufferSpeechStopped:
      description: "Returned in `server_vad` mode when the server detects the end\
        \ of speech in \nthe audio buffer. The server will also send an `conversation.item.created`\
        \ \nevent with the user message item that is created from the audio buffer.\n"
      properties:
        audio_end_ms:
          description: "Milliseconds since the session started when speech stopped.\
            \ This will \ncorrespond to the end of audio sent to the model, and thus\
            \ includes the \n`min_silence_duration_ms` configured in the Session.\n"
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item that will be created.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.speech_stopped`.
          enum:
          - input_audio_buffer.speech_stopped
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - audio_end_ms
      - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1718\",\n    \"type\": \"input_audio_buffer.speech_stopped\"\
          ,\n    \"audio_end_ms\": 2000,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: input_audio_buffer.speech_stopped
    RealtimeServerEventOutputAudioBufferCleared:
      description: '**WebRTC Only:** Emitted when the output audio buffer is cleared.
        This happens either in VAD

        mode when the user has interrupted (`input_audio_buffer.speech_started`),

        or when the client has emitted the `output_audio_buffer.clear` event to manually

        cut off the current audio response.

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response_id:
          description: The unique ID of the response that produced the audio.
          type: string
        type:
          description: The event type, must be `output_audio_buffer.cleared`.
          enum:
          - output_audio_buffer.cleared
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_abc123\",\n    \"type\": \"output_audio_buffer.cleared\"\
          ,\n    \"response_id\": \"resp_abc123\"\n}\n"
        group: realtime
        name: output_audio_buffer.cleared
    RealtimeServerEventOutputAudioBufferStarted:
      description: '**WebRTC Only:** Emitted when the server begins streaming audio
        to the client. This event is

        emitted after an audio content part has been added (`response.content_part.added`)

        to the response.

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response_id:
          description: The unique ID of the response that produced the audio.
          type: string
        type:
          description: The event type, must be `output_audio_buffer.started`.
          enum:
          - output_audio_buffer.started
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_abc123\",\n    \"type\": \"output_audio_buffer.started\"\
          ,\n    \"response_id\": \"resp_abc123\"\n}\n"
        group: realtime
        name: output_audio_buffer.started
    RealtimeServerEventOutputAudioBufferStopped:
      description: '**WebRTC Only:** Emitted when the output audio buffer has been
        completely drained on the server,

        and no more audio is forthcoming. This event is emitted after the full response

        data has been sent to the client (`response.done`).

        [Learn more](/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).

        '
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response_id:
          description: The unique ID of the response that produced the audio.
          type: string
        type:
          description: The event type, must be `output_audio_buffer.stopped`.
          enum:
          - output_audio_buffer.stopped
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_abc123\",\n    \"type\": \"output_audio_buffer.stopped\"\
          ,\n    \"response_id\": \"resp_abc123\"\n}\n"
        group: realtime
        name: output_audio_buffer.stopped
    RealtimeServerEventRateLimitsUpdated:
      description: "Emitted at the beginning of a Response to indicate the updated\
        \ rate limits. \nWhen a Response is created some tokens will be \"reserved\"\
        \ for the output \ntokens, the rate limits shown here reflect that reservation,\
        \ which is then \nadjusted accordingly once the Response is completed.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        rate_limits:
          description: List of rate limit information.
          items:
            properties:
              limit:
                description: The maximum allowed value for the rate limit.
                format: int64
                type: integer
              name:
                description: 'The name of the rate limit (`requests`, `tokens`).

                  '
                enum:
                - requests
                - tokens
                type: string
              remaining:
                description: The remaining value before the limit is reached.
                format: int64
                type: integer
              reset_seconds:
                description: Seconds until the rate limit resets.
                type: number
            type: object
          type: array
        type:
          description: The event type, must be `rate_limits.updated`.
          enum:
          - rate_limits.updated
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - rate_limits
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5758\",\n    \"type\": \"rate_limits.updated\"\
          ,\n    \"rate_limits\": [\n        {\n            \"name\": \"requests\"\
          ,\n            \"limit\": 1000,\n            \"remaining\": 999,\n     \
          \       \"reset_seconds\": 60\n        },\n        {\n            \"name\"\
          : \"tokens\",\n            \"limit\": 50000,\n            \"remaining\"\
          : 49950,\n            \"reset_seconds\": 60\n        }\n    ]\n}\n"
        group: realtime
        name: rate_limits.updated
    RealtimeServerEventResponseAudioDelta:
      description: Returned when the model-generated audio is updated.
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        delta:
          description: Base64-encoded audio data delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio.delta`.
          enum:
          - response.audio.delta
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4950\",\n    \"type\": \"response.audio.delta\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Base64EncodedAudioDelta\"\
          \n}\n"
        group: realtime
        name: response.audio.delta
    RealtimeServerEventResponseAudioDone:
      description: 'Returned when the model-generated audio is done. Also emitted
        when a Response

        is interrupted, incomplete, or cancelled.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio.done`.
          enum:
          - response.audio.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5152\",\n    \"type\": \"response.audio.done\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0\n}\n"
        group: realtime
        name: response.audio.done
    RealtimeServerEventResponseAudioTranscriptDelta:
      description: 'Returned when the model-generated transcription of audio output
        is updated.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        delta:
          description: The transcript delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio_transcript.delta`.
          enum:
          - response.audio_transcript.delta
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4546\",\n    \"type\": \"response.audio_transcript.delta\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hello,\
          \ how can I a\"\n}\n"
        group: realtime
        name: response.audio_transcript.delta
    RealtimeServerEventResponseAudioTranscriptDone:
      description: 'Returned when the model-generated transcription of audio output
        is done

        streaming. Also emitted when a Response is interrupted, incomplete, or

        cancelled.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        transcript:
          description: The final transcript of the audio.
          type: string
        type:
          description: The event type, must be `response.audio_transcript.done`.
          enum:
          - response.audio_transcript.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - transcript
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4748\",\n    \"type\": \"response.audio_transcript.done\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\"\
          : \"Hello, how can I assist you today?\"\n}\n"
        group: realtime
        name: response.audio_transcript.done
    RealtimeServerEventResponseContentPartAdded:
      description: 'Returned when a new content part is added to an assistant message
        item during

        response generation.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item to which the content part was added.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        part:
          description: The content part that was added.
          properties:
            audio:
              description: Base64-encoded audio data (if type is "audio").
              type: string
            text:
              description: The text content (if type is "text").
              type: string
            transcript:
              description: The transcript of the audio (if type is "audio").
              type: string
            type:
              description: The content type ("text", "audio").
              enum:
              - audio
              - text
              type: string
          type: object
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.content_part.added`.
          enum:
          - response.content_part.added
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - part
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3738\",\n    \"type\": \"response.content_part.added\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n \
          \       \"type\": \"text\",\n        \"text\": \"\"\n    }\n}\n"
        group: realtime
        name: response.content_part.added
    RealtimeServerEventResponseContentPartDone:
      description: 'Returned when a content part is done streaming in an assistant
        message item.

        Also emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        part:
          description: The content part that is done.
          properties:
            audio:
              description: Base64-encoded audio data (if type is "audio").
              type: string
            text:
              description: The text content (if type is "text").
              type: string
            transcript:
              description: The transcript of the audio (if type is "audio").
              type: string
            type:
              description: The content type ("text", "audio").
              enum:
              - audio
              - text
              type: string
          type: object
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.content_part.done`.
          enum:
          - response.content_part.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - part
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3940\",\n    \"type\": \"response.content_part.done\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n \
          \       \"type\": \"text\",\n        \"text\": \"Sure, I can help with that.\"\
          \n    }\n}\n"
        group: realtime
        name: response.content_part.done
    RealtimeServerEventResponseCreated:
      description: 'Returned when a new Response is created. The first event of response
        creation,

        where the response is in an initial state of `in_progress`.

        '
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponse'
        type:
          description: The event type, must be `response.created`.
          enum:
          - response.created
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2930\",\n    \"type\": \"response.created\"\
          ,\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\"\
          : \"realtime.response\",\n        \"status\": \"in_progress\",\n       \
          \ \"status_details\": null,\n        \"output\": [],\n        \"usage\"\
          : null\n    }\n}\n"
        group: realtime
        name: response.created
    RealtimeServerEventResponseDone:
      description: "Returned when a Response is done streaming. Always emitted, no\
        \ matter the \nfinal state. The Response object included in the `response.done`\
        \ event will \ninclude all output Items in the Response but will omit the\
        \ raw audio data.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponse'
        type:
          description: The event type, must be `response.done`.
          enum:
          - response.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3132\",\n    \"type\": \"response.done\"\
          ,\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\"\
          : \"realtime.response\",\n        \"status\": \"completed\",\n        \"\
          status_details\": null,\n        \"output\": [\n            {\n        \
          \        \"id\": \"msg_006\",\n                \"object\": \"realtime.item\"\
          ,\n                \"type\": \"message\",\n                \"status\": \"\
          completed\",\n                \"role\": \"assistant\",\n               \
          \ \"content\": [\n                    {\n                        \"type\"\
          : \"text\",\n                        \"text\": \"Sure, how can I assist\
          \ you today?\"\n                    }\n                ]\n            }\n\
          \        ],\n        \"usage\": {\n            \"total_tokens\":275,\n \
          \           \"input_tokens\":127,\n            \"output_tokens\":148,\n\
          \            \"input_token_details\": {\n                \"cached_tokens\"\
          :384,\n                \"text_tokens\":119,\n                \"audio_tokens\"\
          :8,\n                \"cached_tokens_details\": {\n                    \"\
          text_tokens\": 128,\n                    \"audio_tokens\": 256\n       \
          \         }\n            },\n            \"output_token_details\": {\n \
          \             \"text_tokens\":36,\n              \"audio_tokens\":112\n\
          \            }\n        }\n    }\n}\n"
        group: realtime
        name: response.done
    RealtimeServerEventResponseFunctionCallArgumentsDelta:
      description: 'Returned when the model-generated function call arguments are
        updated.

        '
      properties:
        call_id:
          description: The ID of the function call.
          type: string
        delta:
          description: The arguments delta as a JSON string.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the function call item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: 'The event type, must be `response.function_call_arguments.delta`.

            '
          enum:
          - response.function_call_arguments.delta
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - call_id
      - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5354\",\n    \"type\": \"response.function_call_arguments.delta\"\
          ,\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n  \
          \  \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"delta\":\
          \ \"{\\\"location\\\": \\\"San\\\"\"\n}\n"
        group: realtime
        name: response.function_call_arguments.delta
    RealtimeServerEventResponseFunctionCallArgumentsDone:
      description: 'Returned when the model-generated function call arguments are
        done streaming.

        Also emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        arguments:
          description: The final arguments as a JSON string.
          type: string
        call_id:
          description: The ID of the function call.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the function call item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: 'The event type, must be `response.function_call_arguments.done`.

            '
          enum:
          - response.function_call_arguments.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - call_id
      - arguments
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5556\",\n    \"type\": \"response.function_call_arguments.done\"\
          ,\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n  \
          \  \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"arguments\"\
          : \"{\\\"location\\\": \\\"San Francisco\\\"}\"\n}\n"
        group: realtime
        name: response.function_call_arguments.done
    RealtimeServerEventResponseOutputItemAdded:
      description: Returned when a new Item is created during Response generation.
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        output_index:
          description: The index of the output item in the Response.
          format: int64
          type: integer
        response_id:
          description: The ID of the Response to which the item belongs.
          type: string
        type:
          description: The event type, must be `response.output_item.added`.
          enum:
          - response.output_item.added
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - output_index
      - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3334\",\n    \"type\": \"response.output_item.added\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"\
          item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\"\
          ,\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n\
          \        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n"
        group: realtime
        name: response.output_item.added
    RealtimeServerEventResponseOutputItemDone:
      description: "Returned when an Item is done streaming. Also emitted when a Response\
        \ is \ninterrupted, incomplete, or cancelled.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        output_index:
          description: The index of the output item in the Response.
          format: int64
          type: integer
        response_id:
          description: The ID of the Response to which the item belongs.
          type: string
        type:
          description: The event type, must be `response.output_item.done`.
          enum:
          - response.output_item.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - output_index
      - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3536\",\n    \"type\": \"response.output_item.done\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"\
          item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\"\
          ,\n        \"type\": \"message\",\n        \"status\": \"completed\",\n\
          \        \"role\": \"assistant\",\n        \"content\": [\n            {\n\
          \                \"type\": \"text\",\n                \"text\": \"Sure,\
          \ I can help with that.\"\n            }\n        ]\n    }\n}\n"
        group: realtime
        name: response.output_item.done
    RealtimeServerEventResponseTextDelta:
      description: Returned when the text value of a "text" content part is updated.
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        delta:
          description: The text delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.text.delta`.
          enum:
          - response.text.delta
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4142\",\n    \"type\": \"response.text.delta\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Sure,\
          \ I can h\"\n}\n"
        group: realtime
        name: response.text.delta
    RealtimeServerEventResponseTextDone:
      description: 'Returned when the text value of a "text" content part is done
        streaming. Also

        emitted when a Response is interrupted, incomplete, or cancelled.

        '
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          format: int64
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          format: int64
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        text:
          description: The final text content.
          type: string
        type:
          description: The event type, must be `response.text.done`.
          enum:
          - response.text.done
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - response_id
      - item_id
      - output_index
      - content_index
      - text
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4344\",\n    \"type\": \"response.text.done\"\
          ,\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n \
          \   \"output_index\": 0,\n    \"content_index\": 0,\n    \"text\": \"Sure,\
          \ I can help with that.\"\n}\n"
        group: realtime
        name: response.text.done
    RealtimeServerEventSessionCreated:
      description: "Returned when a Session is created. Emitted automatically when\
        \ a new \nconnection is established as the first server event. This event\
        \ will contain \nthe default Session configuration.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSession'
        type:
          description: The event type, must be `session.created`.
          enum:
          - session.created
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1234\",\n    \"type\": \"session.created\"\
          ,\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\"\
          : \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview\"\
          ,\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\"\
          : \"...model instructions here...\",\n        \"voice\": \"sage\",\n   \
          \     \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\"\
          : \"pcm16\",\n        \"input_audio_transcription\": null,\n        \"turn_detection\"\
          : {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n\
          \            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\"\
          : 200\n        },\n        \"tools\": [],\n        \"tool_choice\": \"auto\"\
          ,\n        \"temperature\": 0.8,\n        \"max_response_output_tokens\"\
          : \"inf\",\n        \"speed\": 1.1,\n        \"tracing\": \"auto\"\n   \
          \ }\n}\n"
        group: realtime
        name: session.created
    RealtimeServerEventSessionUpdated:
      description: "Returned when a session is updated with a `session.update` event,\
        \ unless \nthere is an error.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSession'
        type:
          description: The event type, must be `session.updated`.
          enum:
          - session.updated
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5678\",\n    \"type\": \"session.updated\"\
          ,\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\"\
          : \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview\"\
          ,\n        \"modalities\": [\"text\"],\n        \"instructions\": \"New\
          \ instructions\",\n        \"voice\": \"sage\",\n        \"input_audio_format\"\
          : \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\"\
          : {\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\"\
          : null,\n        \"tools\": [],\n        \"tool_choice\": \"none\",\n  \
          \      \"temperature\": 0.7,\n        \"max_response_output_tokens\": 200,\n\
          \        \"speed\": 1.1,\n        \"tracing\": \"auto\"\n    }\n}\n"
        group: realtime
        name: session.updated
    RealtimeServerEventTranscriptionSessionUpdated:
      description: "Returned when a transcription session is updated with a `transcription_session.update`\
        \ event, unless \nthere is an error.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeTranscriptionSessionCreateResponse'
        type:
          description: The event type, must be `transcription_session.updated`.
          enum:
          - transcription_session.updated
          type: string
          x-stainless-const: true
      required:
      - event_id
      - type
      - session
      type: object
      x-oaiMeta:
        example: "{\n  \"event_id\": \"event_5678\",\n  \"type\": \"transcription_session.updated\"\
          ,\n  \"session\": {\n    \"id\": \"sess_001\",\n    \"object\": \"realtime.transcription_session\"\
          ,\n    \"input_audio_format\": \"pcm16\",\n    \"input_audio_transcription\"\
          : {\n      \"model\": \"gpt-4o-transcribe\",\n      \"prompt\": \"\",\n\
          \      \"language\": \"\"\n    },\n    \"turn_detection\": {\n      \"type\"\
          : \"server_vad\",\n      \"threshold\": 0.5,\n      \"prefix_padding_ms\"\
          : 300,\n      \"silence_duration_ms\": 500,\n      \"create_response\":\
          \ true,\n      // \"interrupt_response\": false  -- this will NOT be returned\n\
          \    },\n    \"input_audio_noise_reduction\": {\n      \"type\": \"near_field\"\
          \n    },\n    \"include\": [\n      \"item.input_audio_transcription.avg_logprob\"\
          ,\n    ],\n  }\n}\n"
        group: realtime
        name: transcription_session.updated
    RealtimeSession:
      description: Realtime session object configuration.
      properties:
        id:
          description: 'Unique identifier for the session that looks like `sess_1234567890abcdef`.

            '
          type: string
        input_audio_format:
          default: pcm16
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`,\
            \ or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz\
            \ sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        input_audio_noise_reduction:
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
              enum:
              - near_field
              - far_field
              type: string
          type: object
        input_audio_transcription:
          description: 'Configuration for input audio transcription, defaults to off
            and can be  set to `null` to turn off once on. Input audio transcription
            is not native to the model, since the model consumes audio directly. Transcription
            runs  asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)
            and should be treated as guidance of input audio content rather than precisely
            what the model heard. The client can optionally set the language and prompt
            for transcription, these offer additional guidance to the transcription
            service.

            '
          properties:
            language:
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
              type: string
            model:
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
              type: string
            prompt:
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
              type: string
          type: object
        instructions:
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not\nguaranteed to be followed by the model, but\
            \ they provide guidance to the \nmodel on the desired behavior.\n\n\n\
            Note that the server sets default instructions which will be used if this\n\
            field is not set and are visible in the `session.created` event at the\n\
            start of the session.\n"
          type: string
        max_response_output_tokens:
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
          oneOf:
          - format: int64
            type: integer
          - enum:
            - inf
            type: string
            x-stainless-const: true
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            default:
            - text
            - audio
            enum:
            - text
            - audio
            type: string
        model:
          description: 'The Realtime model used for this session.

            '
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-realtime-preview-2025-06-03
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
          type: string
        output_audio_format:
          default: pcm16
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, output audio is sampled at a rate of 24kHz.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        speed:
          default: 1
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
          maximum: 1.5
          minimum: 0.25
          type: number
        temperature:
          default: 0.8
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            For audio models a temperature of 0.8 is highly recommended for best performance.

            '
          type: number
        tool_choice:
          default: auto
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        tracing:
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            type: string
            x-stainless-const: true
          - description: 'Granular configuration for tracing.

              '
            properties:
              group_id:
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
                type: string
              metadata:
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
                type: object
              workflow_name:
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
                type: string
            title: Tracing Configuration
            type: object
          title: Tracing Configuration
        turn_detection:
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            create_response:
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs.

                '
              type: boolean
            eagerness:
              default: auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
              enum:
              - low
              - medium
              - high
              - auto
              type: string
            interrupt_response:
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs.

                '
              type: boolean
            prefix_padding_ms:
              description: "Used only for `server_vad` mode. Amount of audio to include\
                \ before the VAD detected speech (in \nmilliseconds). Defaults to\
                \ 300ms.\n"
              format: int64
              type: integer
            silence_duration_ms:
              description: "Used only for `server_vad` mode. Duration of silence to\
                \ detect speech stop (in milliseconds). Defaults \nto 500ms. With\
                \ shorter values the model will respond more quickly, \nbut may jump\
                \ in on short pauses from the user.\n"
              format: int64
              type: integer
            threshold:
              description: "Used only for `server_vad` mode. Activation threshold\
                \ for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold\
                \ will require louder audio to activate the model, and \nthus might\
                \ perform better in noisy environments.\n"
              type: number
            type:
              default: server_vad
              description: 'Type of turn detection.

                '
              enum:
              - server_vad
              - semantic_vad
              type: string
          type: object
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model uses to respond. Voice cannot be changed
            during the

            session once the model has responded with audio at least once. Current

            voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`,

            `onyx`, `nova`, `sage`, `shimmer`, and `verse`.

            '
      type: object
    RealtimeSessionCreateRequest:
      description: Realtime session object configuration.
      properties:
        client_secret:
          description: 'Configuration options for the generated client secret.

            '
          properties:
            expires_after:
              description: 'Configuration for the ephemeral token expiration.

                '
              properties:
                anchor:
                  description: 'The anchor point for the ephemeral token expiration.
                    Only `created_at` is currently supported.

                    '
                  enum:
                  - created_at
                  type: string
                seconds:
                  default: 600
                  description: 'The number of seconds from the anchor point to the
                    expiration. Select a value between `10` and `7200`.

                    '
                  format: int64
                  type: integer
              required:
              - anchor
              type: object
          type: object
        input_audio_format:
          default: pcm16
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,

            single channel (mono), and little-endian byte order.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        input_audio_noise_reduction:
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
              enum:
              - near_field
              - far_field
              type: string
          type: object
        input_audio_transcription:
          description: 'Configuration for input audio transcription, defaults to off
            and can be set to `null` to turn off once on. Input audio transcription
            is not native to the model, since the model consumes audio directly. Transcription
            runs asynchronously through [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)
            and should be treated as guidance of input audio content rather than precisely
            what the model heard. The client can optionally set the language and prompt
            for transcription, these offer additional guidance to the transcription
            service.

            '
          properties:
            language:
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
              type: string
            model:
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
              type: string
            prompt:
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
              type: string
          type: object
        instructions:
          description: 'The default system instructions (i.e. system message) prepended
            to model calls. This field allows the client to guide the model on desired
            responses. The model can be instructed on response content and format,
            (e.g. "be extremely succinct", "act friendly", "here are examples of good
            responses") and on audio behavior (e.g. "talk quickly", "inject emotion
            into your voice", "laugh frequently"). The instructions are not guaranteed
            to be followed by the model, but they provide guidance to the model on
            the desired behavior.


            Note that the server sets default instructions which will be used if this
            field is not set and are visible in the `session.created` event at the
            start of the session.

            '
          type: string
        max_response_output_tokens:
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
          oneOf:
          - format: int64
            type: integer
          - enum:
            - inf
            type: string
            x-stainless-const: true
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            default:
            - text
            - audio
            enum:
            - text
            - audio
            type: string
        model:
          description: 'The Realtime model used for this session.

            '
          enum:
          - gpt-4o-realtime-preview
          - gpt-4o-realtime-preview-2024-10-01
          - gpt-4o-realtime-preview-2024-12-17
          - gpt-4o-realtime-preview-2025-06-03
          - gpt-4o-mini-realtime-preview
          - gpt-4o-mini-realtime-preview-2024-12-17
          type: string
        output_audio_format:
          default: pcm16
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, output audio is sampled at a rate of 24kHz.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        speed:
          default: 1
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
          maximum: 1.5
          minimum: 0.25
          type: number
        temperature:
          default: 0.8
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            For audio models a temperature of 0.8 is highly recommended for best performance.

            '
          type: number
        tool_choice:
          default: auto
          description: 'How the model chooses tools. Options are `auto`, `none`, `required`,
            or

            specify a function.

            '
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: 'The description of the function, including guidance
                  on when and how

                  to call it, and guidance about what to tell the user when calling

                  (if anything).

                  '
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        tracing:
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            type: string
            x-stainless-const: true
          - description: 'Granular configuration for tracing.

              '
            properties:
              group_id:
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
                type: string
              metadata:
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
                type: object
              workflow_name:
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
                type: string
            title: Tracing Configuration
            type: object
          title: Tracing Configuration
        turn_detection:
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            create_response:
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs.

                '
              type: boolean
            eagerness:
              default: auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
              enum:
              - low
              - medium
              - high
              - auto
              type: string
            interrupt_response:
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs.

                '
              type: boolean
            prefix_padding_ms:
              description: 'Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in

                milliseconds). Defaults to 300ms.

                '
              format: int64
              type: integer
            silence_duration_ms:
              description: 'Used only for `server_vad` mode. Duration of silence to
                detect speech stop (in milliseconds). Defaults

                to 500ms. With shorter values the model will respond more quickly,

                but may jump in on short pauses from the user.

                '
              format: int64
              type: integer
            threshold:
              description: 'Used only for `server_vad` mode. Activation threshold
                for VAD (0.0 to 1.0), this defaults to 0.5. A

                higher threshold will require louder audio to activate the model,
                and

                thus might perform better in noisy environments.

                '
              type: number
            type:
              default: server_vad
              description: 'Type of turn detection.

                '
              enum:
              - server_vad
              - semantic_vad
              type: string
          type: object
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: 'The voice the model uses to respond. Voice cannot be changed
            during the

            session once the model has responded with audio at least once. Current

            voice options are `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`,

            `onyx`, `nova`, `sage`, `shimmer`, and `verse`.

            '
      type: object
    RealtimeSessionCreateResponse:
      description: 'A new Realtime session configuration, with an ephermeral key.
        Default TTL

        for keys is one minute.

        '
      properties:
        client_secret:
          description: Ephemeral key returned by the API.
          properties:
            expires_at:
              description: 'Timestamp for when the token expires. Currently, all tokens
                expire

                after one minute.

                '
              format: int64
              type: integer
            value:
              description: 'Ephemeral key usable in client environments to authenticate
                connections

                to the Realtime API. Use this in client-side environments rather than

                a standard API token, which should only be used server-side.

                '
              type: string
          required:
          - value
          - expires_at
          type: object
        input_audio_format:
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
          type: string
        input_audio_transcription:
          description: "Configuration for input audio transcription, defaults to off\
            \ and can be \nset to `null` to turn off once on. Input audio transcription\
            \ is not native \nto the model, since the model consumes audio directly.\
            \ Transcription runs\nasynchronously and should be treated as rough guidance\n\
            rather than the representation understood by the model.\n"
          properties:
            model:
              description: 'The model to use for transcription.

                '
              type: string
          type: object
        instructions:
          description: "The default system instructions (i.e. system message) prepended\
            \ to model \ncalls. This field allows the client to guide the model on\
            \ desired \nresponses. The model can be instructed on response content\
            \ and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"\
            here are examples of good \nresponses\") and on audio behavior (e.g. \"\
            talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"\
            ). The instructions are not guaranteed \nto be followed by the model,\
            \ but they provide guidance to the model on the \ndesired behavior.\n\n\
            Note that the server sets default instructions which will be used if this\
            \ \nfield is not set and are visible in the `session.created` event at\
            \ the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: 'Maximum number of output tokens for a single assistant response,

            inclusive of tool calls. Provide an integer between 1 and 4096 to

            limit output tokens, or `inf` for the maximum available tokens for a

            given model. Defaults to `inf`.

            '
          oneOf:
          - format: int64
            type: integer
          - enum:
            - inf
            type: string
            x-stainless-const: true
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            enum:
            - text
            - audio
            type: string
        output_audio_format:
          description: 'The format of output audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
          type: string
        speed:
          default: 1
          description: 'The speed of the model''s spoken response. 1.0 is the default
            speed. 0.25 is

            the minimum speed. 1.5 is the maximum speed. This value can only be changed

            in between model turns, not while a response is in progress.

            '
          maximum: 1.5
          minimum: 0.25
          type: number
        temperature:
          description: 'Sampling temperature for the model, limited to [0.6, 1.2].
            Defaults to 0.8.

            '
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`,\
            \ or \nspecify a function.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance\
                  \ on when and how \nto call it, and guidance about what to tell\
                  \ the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        tracing:
          description: "Configuration options for tracing. Set to null to disable\
            \ tracing. Once \ntracing is enabled for a session, the configuration\
            \ cannot be modified.\n\n`auto` will create a trace for the session with\
            \ default values for the \nworkflow name, group id, and metadata.\n"
          oneOf:
          - default: auto
            description: 'Default tracing mode for the session.

              '
            enum:
            - auto
            type: string
            x-stainless-const: true
          - description: 'Granular configuration for tracing.

              '
            properties:
              group_id:
                description: "The group id to attach to this trace to enable filtering\
                  \ and \ngrouping in the traces dashboard.\n"
                type: string
              metadata:
                description: "The arbitrary metadata to attach to this trace to enable\
                  \ \nfiltering in the traces dashboard.\n"
                type: object
              workflow_name:
                description: "The name of the workflow to attach to this trace. This\
                  \ is used to \nname the trace in the traces dashboard.\n"
                type: string
            title: Tracing Configuration
            type: object
          title: Tracing Configuration
        turn_detection:
          description: "Configuration for turn detection. Can be set to `null` to\
            \ turn off. Server \nVAD means that the model will detect the start and\
            \ end of speech based on \naudio volume and respond at the end of user\
            \ speech.\n"
          properties:
            prefix_padding_ms:
              description: "Amount of audio to include before the VAD detected speech\
                \ (in \nmilliseconds). Defaults to 300ms.\n"
              format: int64
              type: integer
            silence_duration_ms:
              description: "Duration of silence to detect speech stop (in milliseconds).\
                \ Defaults \nto 500ms. With shorter values the model will respond\
                \ more quickly, \nbut may jump in on short pauses from the user.\n"
              format: int64
              type: integer
            threshold:
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults\
                \ to 0.5. A \nhigher threshold will require louder audio to activate\
                \ the model, and \nthus might perform better in noisy environments.\n"
              type: number
            type:
              description: 'Type of turn detection, only `server_vad` is currently
                supported.

                '
              type: string
          type: object
        voice:
          $ref: '#/components/schemas/VoiceIdsShared'
          description: "The voice the model uses to respond. Voice cannot be changed\
            \ during the \nsession once the model has responded with audio at least\
            \ once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`,\
            \ `echo` `sage`, \n`shimmer` and `verse`.\n"
      required:
      - client_secret
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"sess_001\",\n  \"object\": \"realtime.session\",\n\
          \  \"model\": \"gpt-4o-realtime-preview\",\n  \"modalities\": [\"audio\"\
          , \"text\"],\n  \"instructions\": \"You are a friendly assistant.\",\n \
          \ \"voice\": \"alloy\",\n  \"input_audio_format\": \"pcm16\",\n  \"output_audio_format\"\
          : \"pcm16\",\n  \"input_audio_transcription\": {\n      \"model\": \"whisper-1\"\
          \n  },\n  \"turn_detection\": null,\n  \"tools\": [],\n  \"tool_choice\"\
          : \"none\",\n  \"temperature\": 0.7,\n  \"speed\": 1.1,\n  \"tracing\":\
          \ \"auto\",\n  \"max_response_output_tokens\": 200,\n  \"client_secret\"\
          : {\n    \"value\": \"ek_abc123\", \n    \"expires_at\": 1234567890\n  }\n\
          }\n"
        group: realtime
        name: The session object
    RealtimeTranscriptionSessionCreateRequest:
      description: Realtime transcription session object configuration.
      properties:
        client_secret:
          description: 'Configuration options for the generated client secret.

            '
          properties:
            expires_at:
              description: 'Configuration for the ephemeral token expiration.

                '
              properties:
                anchor:
                  default: created_at
                  description: 'The anchor point for the ephemeral token expiration.
                    Only `created_at` is currently supported.

                    '
                  enum:
                  - created_at
                  type: string
                seconds:
                  default: 600
                  description: 'The number of seconds from the anchor point to the
                    expiration. Select a value between `10` and `7200`.

                    '
                  format: int64
                  type: integer
              type: object
          type: object
        include:
          description: 'The set of items to include in the transcription. Current
            available items are:

            - `item.input_audio_transcription.logprobs`

            '
          items:
            type: string
          type: array
        input_audio_format:
          default: pcm16
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            For `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,

            single channel (mono), and little-endian byte order.

            '
          enum:
          - pcm16
          - g711_ulaw
          - g711_alaw
          type: string
        input_audio_noise_reduction:
          default: null
          description: 'Configuration for input audio noise reduction. This can be
            set to `null` to turn off.

            Noise reduction filters audio added to the input audio buffer before it
            is sent to VAD and the model.

            Filtering the audio can improve VAD and turn detection accuracy (reducing
            false positives) and model performance by improving perception of the
            input audio.

            '
          properties:
            type:
              description: 'Type of noise reduction. `near_field` is for close-talking
                microphones such as headphones, `far_field` is for far-field microphones
                such as laptop or conference room microphones.

                '
              enum:
              - near_field
              - far_field
              type: string
          type: object
        input_audio_transcription:
          description: 'Configuration for input audio transcription. The client can
            optionally set the language and prompt for transcription, these offer
            additional guidance to the transcription service.

            '
          properties:
            language:
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
              type: string
            model:
              description: 'The model to use for transcription, current options are
                `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.

                '
              enum:
              - gpt-4o-transcribe
              - gpt-4o-mini-transcribe
              - whisper-1
              type: string
            prompt:
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment.

                For `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).

                For `gpt-4o-transcribe` models, the prompt is a free text string,
                for example "expect words related to technology".

                '
              type: string
          type: object
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            default:
            - text
            - audio
            enum:
            - text
            - audio
            type: string
        turn_detection:
          description: 'Configuration for turn detection, ether Server VAD or Semantic
            VAD. This can be set to `null` to turn off, in which case the client must
            manually trigger model response.

            Server VAD means that the model will detect the start and end of speech
            based on audio volume and respond at the end of user speech.

            Semantic VAD is more advanced and uses a turn detection model (in conjuction
            with VAD) to semantically estimate whether the user has finished speaking,
            then dynamically sets a timeout based on this probability. For example,
            if user audio trails off with "uhhm", the model will score a low probability
            of turn end and wait longer for the user to continue speaking. This can
            be useful for more natural conversations, but may have a higher latency.

            '
          properties:
            create_response:
              default: true
              description: 'Whether or not to automatically generate a response when
                a VAD stop event occurs. Not available for transcription sessions.

                '
              type: boolean
            eagerness:
              default: auto
              description: 'Used only for `semantic_vad` mode. The eagerness of the
                model to respond. `low` will wait longer for the user to continue
                speaking, `high` will respond more quickly. `auto` is the default
                and is equivalent to `medium`.

                '
              enum:
              - low
              - medium
              - high
              - auto
              type: string
            interrupt_response:
              default: true
              description: 'Whether or not to automatically interrupt any ongoing
                response with output to the default

                conversation (i.e. `conversation` of `auto`) when a VAD start event
                occurs. Not available for transcription sessions.

                '
              type: boolean
            prefix_padding_ms:
              description: 'Used only for `server_vad` mode. Amount of audio to include
                before the VAD detected speech (in

                milliseconds). Defaults to 300ms.

                '
              format: int64
              type: integer
            silence_duration_ms:
              description: 'Used only for `server_vad` mode. Duration of silence to
                detect speech stop (in milliseconds). Defaults

                to 500ms. With shorter values the model will respond more quickly,

                but may jump in on short pauses from the user.

                '
              format: int64
              type: integer
            threshold:
              description: 'Used only for `server_vad` mode. Activation threshold
                for VAD (0.0 to 1.0), this defaults to 0.5. A

                higher threshold will require louder audio to activate the model,
                and

                thus might perform better in noisy environments.

                '
              type: number
            type:
              default: server_vad
              description: 'Type of turn detection.

                '
              enum:
              - server_vad
              - semantic_vad
              type: string
          type: object
      type: object
    RealtimeTranscriptionSessionCreateResponse:
      description: "A new Realtime transcription session configuration.\n\nWhen a\
        \ session is created on the server via REST API, the session object\nalso\
        \ contains an ephemeral key. Default TTL for keys is 10 minutes. This \nproperty\
        \ is not present when a session is updated via the WebSocket API.\n"
      properties:
        client_secret:
          description: 'Ephemeral key returned by the API. Only present when the session
            is

            created on the server via REST API.

            '
          properties:
            expires_at:
              description: 'Timestamp for when the token expires. Currently, all tokens
                expire

                after one minute.

                '
              format: int64
              type: integer
            value:
              description: 'Ephemeral key usable in client environments to authenticate
                connections

                to the Realtime API. Use this in client-side environments rather than

                a standard API token, which should only be used server-side.

                '
              type: string
          required:
          - value
          - expires_at
          type: object
        input_audio_format:
          description: 'The format of input audio. Options are `pcm16`, `g711_ulaw`,
            or `g711_alaw`.

            '
          type: string
        input_audio_transcription:
          description: 'Configuration of the transcription model.

            '
          properties:
            language:
              description: 'The language of the input audio. Supplying the input language
                in

                [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)
                (e.g. `en`) format

                will improve accuracy and latency.

                '
              type: string
            model:
              description: 'The model to use for transcription. Can be `gpt-4o-transcribe`,
                `gpt-4o-mini-transcribe`, or `whisper-1`.

                '
              enum:
              - gpt-4o-transcribe
              - gpt-4o-mini-transcribe
              - whisper-1
              type: string
            prompt:
              description: 'An optional text to guide the model''s style or continue
                a previous audio

                segment. The [prompt](/docs/guides/speech-to-text#prompting) should
                match

                the audio language.

                '
              type: string
          type: object
        modalities:
          description: 'The set of modalities the model can respond with. To disable
            audio,

            set this to ["text"].

            '
          items:
            enum:
            - text
            - audio
            type: string
        turn_detection:
          description: "Configuration for turn detection. Can be set to `null` to\
            \ turn off. Server \nVAD means that the model will detect the start and\
            \ end of speech based on \naudio volume and respond at the end of user\
            \ speech.\n"
          properties:
            prefix_padding_ms:
              description: "Amount of audio to include before the VAD detected speech\
                \ (in \nmilliseconds). Defaults to 300ms.\n"
              format: int64
              type: integer
            silence_duration_ms:
              description: "Duration of silence to detect speech stop (in milliseconds).\
                \ Defaults \nto 500ms. With shorter values the model will respond\
                \ more quickly, \nbut may jump in on short pauses from the user.\n"
              format: int64
              type: integer
            threshold:
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults\
                \ to 0.5. A \nhigher threshold will require louder audio to activate\
                \ the model, and \nthus might perform better in noisy environments.\n"
              type: number
            type:
              description: 'Type of turn detection, only `server_vad` is currently
                supported.

                '
              type: string
          type: object
      required:
      - client_secret
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"sess_BBwZc7cFV3XizEyKGDCGL\",\n  \"object\": \"realtime.transcription_session\"\
          ,\n  \"expires_at\": 1742188264,\n  \"modalities\": [\"audio\", \"text\"\
          ],\n  \"turn_detection\": {\n    \"type\": \"server_vad\",\n    \"threshold\"\
          : 0.5,\n    \"prefix_padding_ms\": 300,\n    \"silence_duration_ms\": 200\n\
          \  },\n  \"input_audio_format\": \"pcm16\",\n  \"input_audio_transcription\"\
          : {\n    \"model\": \"gpt-4o-transcribe\",\n    \"language\": null,\n  \
          \  \"prompt\": \"\"\n  },\n  \"client_secret\": null\n}\n"
        group: realtime
        name: The transcription session object
    Reasoning:
      description: "**o-series models only**\n\nConfiguration options for \n[reasoning\
        \ models](https://platform.openai.com/docs/guides/reasoning).\n"
      properties:
        effort:
          $ref: '#/components/schemas/ReasoningEffort'
        generate_summary:
          deprecated: true
          description: '**Deprecated:** use `summary` instead.


            A summary of the reasoning performed by the model. This can be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
          type: string
        summary:
          description: 'A summary of the reasoning performed by the model. This can
            be

            useful for debugging and understanding the model''s reasoning process.

            One of `auto`, `concise`, or `detailed`.

            '
          enum:
          - auto
          - concise
          - detailed
          nullable: true
          type: string
      title: Reasoning
      type: object
    ReasoningEffort:
      default: medium
      description: "**o-series models only** \n\nConstrains effort on reasoning for\
        \ \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\
        Currently supported values are `low`, `medium`, and `high`. Reducing\nreasoning\
        \ effort can result in faster responses and fewer tokens used\non reasoning\
        \ in a response.\n"
      enum:
      - low
      - medium
      - high
      nullable: true
      type: string
    ReasoningItem:
      description: "A description of the chain of thought used by a reasoning model\
        \ while generating\na response. Be sure to include these items in your `input`\
        \ to the Responses API\nfor subsequent turns of a conversation if you are\
        \ manually \n[managing context](/docs/guides/conversation-state).\n"
      properties:
        encrypted_content:
          description: 'The encrypted content of the reasoning item - populated when
            a response is

            generated with `reasoning.encrypted_content` in the `include` parameter.

            '
          nullable: true
          type: string
        id:
          description: 'The unique identifier of the reasoning content.

            '
          type: string
        status:
          description: 'The status of the item. One of `in_progress`, `completed`,
            or

            `incomplete`. Populated when items are returned via API.

            '
          enum:
          - in_progress
          - completed
          - incomplete
          type: string
        summary:
          description: 'Reasoning text contents.

            '
          items:
            properties:
              text:
                description: 'A short summary of the reasoning used by the model when
                  generating

                  the response.

                  '
                type: string
              type:
                description: 'The type of the object. Always `summary_text`.

                  '
                enum:
                - summary_text
                type: string
                x-stainless-const: true
            required:
            - type
            - text
            type: object
          type: array
        type:
          description: 'The type of the object. Always `reasoning`.

            '
          enum:
          - reasoning
          type: string
          x-stainless-const: true
      required:
      - id
      - summary
      - type
      title: Reasoning
      type: object
    RefusalContent:
      description: A refusal from the model.
      properties:
        refusal:
          description: The refusal explanationfrom the model.
          type: string
        type:
          default: refusal
          description: The type of the refusal. Always `refusal`.
          enum:
          - refusal
          type: string
          x-stainless-const: true
      required:
      - type
      - refusal
      title: Refusal
      type: object
    Response:
      allOf:
      - $ref: '#/components/schemas/ModelResponseProperties'
      - $ref: '#/components/schemas/ResponseProperties'
      - properties:
          created_at:
            description: 'Unix timestamp (in seconds) of when this Response was created.

              '
            type: number
          error:
            $ref: '#/components/schemas/ResponseError'
          id:
            description: 'Unique identifier for this Response.

              '
            type: string
          incomplete_details:
            description: 'Details about why the response is incomplete.

              '
            nullable: true
            properties:
              reason:
                description: The reason why the response is incomplete.
                enum:
                - max_output_tokens
                - content_filter
                type: string
            type: object
          instructions:
            description: 'A system (or developer) message inserted into the model''s
              context.


              When using along with `previous_response_id`, the instructions from
              a previous

              response will not be carried over to the next response. This makes it
              simple

              to swap out system (or developer) messages in new responses.

              '
            nullable: true
            oneOf:
            - description: "A text input to the model, equivalent to a text input\
                \ with the \n`developer` role.\n"
              type: string
            - description: "A list of one or many input items to the model, containing\
                \ \ndifferent content types.\n"
              items:
                $ref: '#/components/schemas/InputItem'
              title: Input item list
              type: array
          object:
            description: 'The object type of this resource - always set to `response`.

              '
            enum:
            - response
            type: string
            x-stainless-const: true
          output:
            description: "An array of content items generated by the model.\n\n- The\
              \ length and order of items in the `output` array is dependent\n  on\
              \ the model's response.\n- Rather than accessing the first item in the\
              \ `output` array and \n  assuming it's an `assistant` message with the\
              \ content generated by\n  the model, you might consider using the `output_text`\
              \ property where\n  supported in SDKs.\n"
            items:
              $ref: '#/components/schemas/OutputItem'
            type: array
          output_text:
            description: "SDK-only convenience property that contains the aggregated\
              \ text output \nfrom all `output_text` items in the `output` array,\
              \ if any are present. \nSupported in the Python and JavaScript SDKs.\n"
            nullable: true
            type: string
            x-oaiSupportedSDKs:
            - python
            - javascript
          parallel_tool_calls:
            default: true
            description: 'Whether to allow the model to run tool calls in parallel.

              '
            type: boolean
          status:
            description: "The status of the response generation. One of `completed`,\
              \ `failed`, \n`in_progress`, `cancelled`, `queued`, or `incomplete`.\n"
            enum:
            - completed
            - failed
            - in_progress
            - cancelled
            - queued
            - incomplete
            type: string
          usage:
            $ref: '#/components/schemas/ResponseUsage'
        required:
        - id
        - object
        - created_at
        - error
        - incomplete_details
        - instructions
        - model
        - tools
        - output
        - parallel_tool_calls
        - metadata
        - tool_choice
        - temperature
        - top_p
        type: object
      example:
        created_at: 1741476777
        error: null
        id: resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41
        incomplete_details: null
        instructions: null
        max_output_tokens: null
        metadata: {}
        model: gpt-4o-2024-08-06
        object: response
        output:
        - content:
          - annotations: []
            text: The image depicts a scenic landscape with a wooden boardwalk or
              pathway leading through lush, green grass under a blue sky with some
              clouds. The setting suggests a peaceful natural area, possibly a park
              or nature reserve. There are trees and shrubs in the background.
            type: output_text
          id: msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41
          role: assistant
          status: completed
          type: message
        parallel_tool_calls: true
        previous_response_id: null
        reasoning:
          effort: null
          summary: null
        status: completed
        store: true
        temperature: 1
        text:
          format:
            type: text
        tool_choice: auto
        tools: []
        top_p: 1
        truncation: disabled
        usage:
          input_tokens: 328
          input_tokens_details:
            cached_tokens: 0
          output_tokens: 52
          output_tokens_details:
            reasoning_tokens: 0
          total_tokens: 380
        user: null
      title: The response object
    ResponseAudioDeltaEvent:
      description: Emitted when there is a partial audio response.
      properties:
        delta:
          description: 'A chunk of Base64 encoded response audio bytes.

            '
          type: string
        sequence_number:
          description: 'A sequence number for this chunk of the stream response.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.audio.delta`.

            '
          enum:
          - response.audio.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.delta\",\n  \"response_id\": \"\
          resp_123\",\n  \"delta\": \"base64encoded...\",\n  \"sequence_number\":\
          \ 1\n}\n"
        group: responses
        name: response.audio.delta
    ResponseAudioDoneEvent:
      description: Emitted when the audio response is complete.
      properties:
        sequence_number:
          description: 'The sequence number of the delta.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.audio.done`.

            '
          enum:
          - response.audio.done
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      - response_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.done\",\n  \"response_id\": \"resp-123\"\
          ,\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.audio.done
    ResponseAudioTranscriptDeltaEvent:
      description: Emitted when there is a partial transcript of audio.
      properties:
        delta:
          description: 'The partial transcript of the audio response.

            '
          type: string
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.audio.transcript.delta`.

            '
          enum:
          - response.audio.transcript.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - response_id
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.transcript.delta\",\n  \"response_id\"\
          : \"resp_123\",\n  \"delta\": \" ... partial transcript ... \",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.audio.transcript.delta
    ResponseAudioTranscriptDoneEvent:
      description: Emitted when the full audio transcript is completed.
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.audio.transcript.done`.

            '
          enum:
          - response.audio.transcript.done
          type: string
          x-stainless-const: true
      required:
      - type
      - response_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.transcript.done\",\n  \"response_id\"\
          : \"resp_123\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.audio.transcript.done
    ResponseCodeInterpreterCallCodeDeltaEvent:
      description: Emitted when a partial code snippet is streamed by the code interpreter.
      properties:
        delta:
          description: The partial code snippet being streamed by the code interpreter.
          type: string
        item_id:
          description: The unique identifier of the code interpreter tool call item.
          type: string
        output_index:
          description: The index of the output item in the response for which the
            code is being streamed.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event, used to order streaming
            events.
          format: int64
          type: integer
        type:
          description: The type of the event. Always `response.code_interpreter_call_code.delta`.
          enum:
          - response.code_interpreter_call_code.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call_code.delta\",\n\
          \  \"output_index\": 0,\n  \"item_id\": \"ci_12345\",\n  \"delta\": \"print('Hello,\
          \ world')\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.code_interpreter_call_code.delta
    ResponseCodeInterpreterCallCodeDoneEvent:
      description: Emitted when the code snippet is finalized by the code interpreter.
      properties:
        code:
          description: The final code snippet output by the code interpreter.
          type: string
        item_id:
          description: The unique identifier of the code interpreter tool call item.
          type: string
        output_index:
          description: The index of the output item in the response for which the
            code is finalized.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event, used to order streaming
            events.
          format: int64
          type: integer
        type:
          description: The type of the event. Always `response.code_interpreter_call_code.done`.
          enum:
          - response.code_interpreter_call_code.done
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - code
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call_code.done\",\n \
          \ \"output_index\": 3,\n  \"item_id\": \"ci_12345\",\n  \"code\": \"print('done')\"\
          ,\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.code_interpreter_call_code.done
    ResponseCodeInterpreterCallCompletedEvent:
      description: Emitted when the code interpreter call is completed.
      properties:
        item_id:
          description: The unique identifier of the code interpreter tool call item.
          type: string
        output_index:
          description: The index of the output item in the response for which the
            code interpreter call is completed.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event, used to order streaming
            events.
          format: int64
          type: integer
        type:
          description: The type of the event. Always `response.code_interpreter_call.completed`.
          enum:
          - response.code_interpreter_call.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.completed\",\n \
          \ \"output_index\": 5,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.code_interpreter_call.completed
    ResponseCodeInterpreterCallInProgressEvent:
      description: Emitted when a code interpreter call is in progress.
      properties:
        item_id:
          description: The unique identifier of the code interpreter tool call item.
          type: string
        output_index:
          description: The index of the output item in the response for which the
            code interpreter call is in progress.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event, used to order streaming
            events.
          format: int64
          type: integer
        type:
          description: The type of the event. Always `response.code_interpreter_call.in_progress`.
          enum:
          - response.code_interpreter_call.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.in_progress\",\n\
          \  \"output_index\": 0,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.code_interpreter_call.in_progress
    ResponseCodeInterpreterCallInterpretingEvent:
      description: Emitted when the code interpreter is actively interpreting the
        code snippet.
      properties:
        item_id:
          description: The unique identifier of the code interpreter tool call item.
          type: string
        output_index:
          description: The index of the output item in the response for which the
            code interpreter is interpreting code.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event, used to order streaming
            events.
          format: int64
          type: integer
        type:
          description: The type of the event. Always `response.code_interpreter_call.interpreting`.
          enum:
          - response.code_interpreter_call.interpreting
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.interpreting\",\n\
          \  \"output_index\": 4,\n  \"item_id\": \"ci_12345\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.code_interpreter_call.interpreting
    ResponseCompletedEvent:
      description: Emitted when the model response is complete.
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: 'Properties of the completed response.

            '
        sequence_number:
          description: The sequence number for this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.completed`.

            '
          enum:
          - response.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.completed\",\n  \"response\": {\n    \"\
          id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\":\
          \ 1740855869,\n    \"status\": \"completed\",\n    \"error\": null,\n  \
          \  \"incomplete_details\": null,\n    \"input\": [],\n    \"instructions\"\
          : null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\"\
          ,\n    \"output\": [\n      {\n        \"id\": \"msg_123\",\n        \"\
          type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\"\
          : [\n          {\n            \"type\": \"output_text\",\n            \"\
          text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn\
          \ named Lila discovered a hidden pond that glowed with moonlight. Every\
          \ night, she would leave sparkling, magical flowers by the water's edge,\
          \ hoping to share her beauty with others. One enchanting evening, she woke\
          \ to find a group of friendly animals gathered around, eager to be friends\
          \ and share in her magic.\",\n            \"annotations\": []\n        \
          \  }\n        ]\n      }\n    ],\n    \"previous_response_id\": null,\n\
          \    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\"\
          : 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n\
          \      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n \
          \   \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": {\n\
          \      \"input_tokens\": 0,\n      \"output_tokens\": 0,\n      \"output_tokens_details\"\
          : {\n        \"reasoning_tokens\": 0\n      },\n      \"total_tokens\":\
          \ 0\n    },\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.completed
    ResponseContentPartAddedEvent:
      description: Emitted when a new content part is added.
      properties:
        content_index:
          description: 'The index of the content part that was added.

            '
          format: int64
          type: integer
        item_id:
          description: 'The ID of the output item that the content part was added
            to.

            '
          type: string
        output_index:
          description: 'The index of the output item that the content part was added
            to.

            '
          format: int64
          type: integer
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that was added.

            '
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.content_part.added`.

            '
          enum:
          - response.content_part.added
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.content_part.added\",\n  \"item_id\":\
          \ \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\"\
          : {\n    \"type\": \"output_text\",\n    \"text\": \"\",\n    \"annotations\"\
          : []\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.content_part.added
    ResponseContentPartDoneEvent:
      description: Emitted when a content part is done.
      properties:
        content_index:
          description: 'The index of the content part that is done.

            '
          format: int64
          type: integer
        item_id:
          description: 'The ID of the output item that the content part was added
            to.

            '
          type: string
        output_index:
          description: 'The index of the output item that the content part was added
            to.

            '
          format: int64
          type: integer
        part:
          $ref: '#/components/schemas/OutputContent'
          description: 'The content part that is done.

            '
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.content_part.done`.

            '
          enum:
          - response.content_part.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - part
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.content_part.done\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"sequence_number\"\
          : 1,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"In\
          \ a shimmering forest under a sky full of stars, a lonely unicorn named\
          \ Lila discovered a hidden pond that glowed with moonlight. Every night,\
          \ she would leave sparkling, magical flowers by the water's edge, hoping\
          \ to share her beauty with others. One enchanting evening, she woke to find\
          \ a group of friendly animals gathered around, eager to be friends and share\
          \ in her magic.\",\n    \"annotations\": []\n  }\n}\n"
        group: responses
        name: response.content_part.done
    ResponseCreatedEvent:
      description: 'An event that is emitted when a response is created.

        '
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was created.

            '
        sequence_number:
          description: The sequence number for this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.created`.

            '
          enum:
          - response.created
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.created\",\n  \"response\": {\n    \"\
          id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"\
          object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\"\
          : \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n\
          \    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\"\
          : \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\"\
          : true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n   \
          \   \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n\
          \    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n       \
          \ \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n\
          \    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\"\
          ,\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n\
          \  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.created
    ResponseError:
      description: 'An error object returned when the model fails to generate a Response.

        '
      nullable: true
      properties:
        code:
          $ref: '#/components/schemas/ResponseErrorCode'
        message:
          description: 'A human-readable description of the error.

            '
          type: string
      required:
      - code
      - message
      type: object
    ResponseErrorCode:
      description: 'The error code for the response.

        '
      enum:
      - server_error
      - rate_limit_exceeded
      - invalid_prompt
      - vector_store_timeout
      - invalid_image
      - invalid_image_format
      - invalid_base64_image
      - invalid_image_url
      - image_too_large
      - image_too_small
      - image_parse_error
      - image_content_policy_violation
      - invalid_image_mode
      - image_file_too_large
      - unsupported_image_media_type
      - empty_image_file
      - failed_to_download_image
      - image_file_not_found
      type: string
    ResponseErrorEvent:
      description: Emitted when an error occurs.
      properties:
        code:
          description: 'The error code.

            '
          nullable: true
          type: string
        message:
          description: 'The error message.

            '
          type: string
        param:
          description: 'The error parameter.

            '
          nullable: true
          type: string
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `error`.

            '
          enum:
          - error
          type: string
          x-stainless-const: true
      required:
      - type
      - code
      - message
      - param
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"error\",\n  \"code\": \"ERR_SOMETHING\",\n  \"\
          message\": \"Something went wrong\",\n  \"param\": null,\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: error
    ResponseFailedEvent:
      description: 'An event that is emitted when a response fails.

        '
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that failed.

            '
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.failed`.

            '
          enum:
          - response.failed
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.failed\",\n  \"response\": {\n    \"id\"\
          : \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n\
          \    \"status\": \"failed\",\n    \"error\": {\n      \"code\": \"server_error\"\
          ,\n      \"message\": \"The model failed to generate a response.\"\n   \
          \ },\n    \"incomplete_details\": null,\n    \"instructions\": null,\n \
          \   \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\"\
          ,\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\"\
          : null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n\
          \      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"\
          tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"\
          truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n\
          \    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.failed
    ResponseFileSearchCallCompletedEvent:
      description: Emitted when a file search call is completed (results found).
      properties:
        item_id:
          description: 'The ID of the output item that the file search call is initiated.

            '
          type: string
        output_index:
          description: 'The index of the output item that the file search call is
            initiated.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.file_search_call.completed`.

            '
          enum:
          - response.file_search_call.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.completed\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.file_search_call.completed
    ResponseFileSearchCallInProgressEvent:
      description: Emitted when a file search call is initiated.
      properties:
        item_id:
          description: 'The ID of the output item that the file search call is initiated.

            '
          type: string
        output_index:
          description: 'The index of the output item that the file search call is
            initiated.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.file_search_call.in_progress`.

            '
          enum:
          - response.file_search_call.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.in_progress\",\n  \"\
          output_index\": 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n\
          }\n"
        group: responses
        name: response.file_search_call.in_progress
    ResponseFileSearchCallSearchingEvent:
      description: Emitted when a file search is currently searching.
      properties:
        item_id:
          description: 'The ID of the output item that the file search call is initiated.

            '
          type: string
        output_index:
          description: 'The index of the output item that the file search call is
            searching.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.file_search_call.searching`.

            '
          enum:
          - response.file_search_call.searching
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.searching\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"fs_123\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.file_search_call.searching
    ResponseFormatJsonObject:
      description: 'JSON object response format. An older method of generating JSON
        responses.

        Using `json_schema` is recommended for models that support it. Note that the

        model will not generate JSON without a system or user message instructing
        it

        to do so.

        '
      properties:
        type:
          description: The type of response format being defined. Always `json_object`.
          enum:
          - json_object
          type: string
          x-stainless-const: true
      required:
      - type
      title: JSON object
      type: object
    ResponseFormatJsonSchema:
      description: 'JSON Schema response format. Used to generate structured JSON
        responses.

        Learn more about [Structured Outputs](/docs/guides/structured-outputs).

        '
      properties:
        json_schema:
          description: 'Structured Outputs configuration options, including a JSON
            Schema.

            '
          properties:
            description:
              description: 'A description of what the response format is for, used
                by the model to

                determine how to respond in the format.

                '
              type: string
            name:
              description: 'The name of the response format. Must be a-z, A-Z, 0-9,
                or contain

                underscores and dashes, with a maximum length of 64.

                '
              type: string
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              default: false
              description: 'Whether to enable strict schema adherence when generating
                the output.

                If set to true, the model will always follow the exact schema defined

                in the `schema` field. Only a subset of JSON Schema is supported when

                `strict` is `true`. To learn more, read the [Structured Outputs

                guide](/docs/guides/structured-outputs).

                '
              nullable: true
              type: boolean
          required:
          - name
          title: JSON schema
          type: object
        type:
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          type: string
          x-stainless-const: true
      required:
      - type
      - json_schema
      title: JSON schema
      type: object
    ResponseFormatJsonSchemaSchema:
      additionalProperties: true
      description: 'The schema for the response format, described as a JSON Schema
        object.

        Learn how to build JSON schemas [here](https://json-schema.org/).

        '
      title: JSON schema
      type: object
    ResponseFormatText:
      description: 'Default response format. Used to generate text responses.

        '
      properties:
        type:
          description: The type of response format being defined. Always `text`.
          enum:
          - text
          type: string
          x-stainless-const: true
      required:
      - type
      title: Text
      type: object
    ResponseFunctionCallArgumentsDeltaEvent:
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        delta:
          description: 'The function-call arguments delta that is added.

            '
          type: string
        item_id:
          description: 'The ID of the output item that the function-call arguments
            delta is added to.

            '
          type: string
        output_index:
          description: 'The index of the output item that the function-call arguments
            delta is added to.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.function_call_arguments.delta`.

            '
          enum:
          - response.function_call_arguments.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.function_call_arguments.delta\",\n  \"\
          item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"delta\": \"{ \\\"\
          arg\\\":\"\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.function_call_arguments.delta
    ResponseFunctionCallArgumentsDoneEvent:
      description: Emitted when function-call arguments are finalized.
      properties:
        arguments:
          description: The function-call arguments.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          enum:
          - response.function_call_arguments.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - arguments
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.function_call_arguments.done\",\n  \"\
          item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"arguments\": \"{ \\\
          \"arg\\\": 123 }\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.function_call_arguments.done
    ResponseImageGenCallCompletedEvent:
      description: 'Emitted when an image generation tool call has completed and the
        final image is available.

        '
      properties:
        item_id:
          description: The unique identifier of the image generation item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.image_generation_call.completed'.
          enum:
          - response.image_generation_call.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      title: ResponseImageGenCallCompletedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.image_generation_call.completed\",\n \
          \ \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.image_generation_call.completed
    ResponseImageGenCallGeneratingEvent:
      description: 'Emitted when an image generation tool call is actively generating
        an image (intermediate state).

        '
      properties:
        item_id:
          description: The unique identifier of the image generation item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the image generation item being processed.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.image_generation_call.generating'.
          enum:
          - response.image_generation_call.generating
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      title: ResponseImageGenCallGeneratingEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.image_generation_call.generating\",\n\
          \  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\"\
          : 0\n}\n"
        group: responses
        name: response.image_generation_call.generating
    ResponseImageGenCallInProgressEvent:
      description: 'Emitted when an image generation tool call is in progress.

        '
      properties:
        item_id:
          description: The unique identifier of the image generation item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the image generation item being processed.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.image_generation_call.in_progress'.
          enum:
          - response.image_generation_call.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      title: ResponseImageGenCallInProgressEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.image_generation_call.in_progress\",\n\
          \  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\"\
          : 0\n}\n"
        group: responses
        name: response.image_generation_call.in_progress
    ResponseImageGenCallPartialImageEvent:
      description: 'Emitted when a partial image is available during image generation
        streaming.

        '
      properties:
        item_id:
          description: The unique identifier of the image generation item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        partial_image_b64:
          description: Base64-encoded partial image data, suitable for rendering as
            an image.
          type: string
        partial_image_index:
          description: 0-based index for the partial image (backend is 1-based, but
            this is 0-based for the user).
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the image generation item being processed.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.image_generation_call.partial_image'.
          enum:
          - response.image_generation_call.partial_image
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      - partial_image_index
      - partial_image_b64
      title: ResponseImageGenCallPartialImageEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.image_generation_call.partial_image\"\
          ,\n  \"output_index\": 0,\n  \"item_id\": \"item-123\",\n  \"sequence_number\"\
          : 0,\n  \"partial_image_index\": 0,\n  \"partial_image_b64\": \"...\"\n\
          }\n"
        group: responses
        name: response.image_generation_call.partial_image
    ResponseInProgressEvent:
      description: Emitted when the response is in progress.
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that is in progress.

            '
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.in_progress`.

            '
          enum:
          - response.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.in_progress\",\n  \"response\": {\n  \
          \  \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n\
          \    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"\
          status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\"\
          : null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n\
          \    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\"\
          : true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n   \
          \   \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n\
          \    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n       \
          \ \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n\
          \    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\"\
          ,\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n\
          \  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.in_progress
    ResponseIncompleteEvent:
      description: 'An event that is emitted when a response finishes as incomplete.

        '
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: 'The response that was incomplete.

            '
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.incomplete`.

            '
          enum:
          - response.incomplete
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n   \
          \ \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\"\
          : 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null, \n\
          \    \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n\
          \    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\"\
          : \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\"\
          : null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"\
          temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\"\
          : \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\"\
          : [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\"\
          : null,\n    \"user\": null,\n    \"metadata\": {}\n  },\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.incomplete
    ResponseItemList:
      description: A list of Response items.
      properties:
        data:
          description: A list of items used to generate this response.
          items:
            $ref: '#/components/schemas/ItemResource'
          type: array
        first_id:
          description: The ID of the first item in the list.
          type: string
        has_more:
          description: Whether there are more items available.
          type: boolean
        last_id:
          description: The ID of the last item in the list.
          type: string
        object:
          description: The type of object returned, must be `list`.
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      - first_id
      - last_id
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\":\
          \ \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\"\
          ,\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n\
          \          \"text\": \"Tell me a three sentence bedtime story about a unicorn.\"\
          \n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"\
          last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
        group: responses
        name: The input item list
    ResponseMCPCallArgumentsDeltaEvent:
      description: 'Emitted when there is a delta (partial update) to the arguments
        of an MCP tool call.

        '
      properties:
        delta:
          description: The partial update to the arguments for the MCP tool call.
          type: object
        item_id:
          description: The unique identifier of the MCP tool call item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_call.arguments_delta'.
          enum:
          - response.mcp_call.arguments_delta
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - delta
      - sequence_number
      title: ResponseMCPCallArgumentsDeltaEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_call.arguments.delta\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"item-abc\",\n  \"delta\": {\n    \"arg1\": \"new_value1\"\
          ,\n    \"arg2\": \"new_value2\"\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.mcp_call.arguments.delta
    ResponseMCPCallArgumentsDoneEvent:
      description: 'Emitted when the arguments for an MCP tool call are finalized.

        '
      properties:
        arguments:
          description: The finalized arguments for the MCP tool call.
          type: object
        item_id:
          description: The unique identifier of the MCP tool call item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_call.arguments_done'.
          enum:
          - response.mcp_call.arguments_done
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - arguments
      - sequence_number
      title: ResponseMCPCallArgumentsDoneEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_call.arguments.done\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"item-abc\",\n  \"arguments\": {\n    \"arg1\": \"\
          value1\",\n    \"arg2\": \"value2\"\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.mcp_call.arguments.done
    ResponseMCPCallCompletedEvent:
      description: 'Emitted when an MCP  tool call has completed successfully.

        '
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_call.completed'.
          enum:
          - response.mcp_call.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      title: ResponseMCPCallCompletedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_call.completed\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.mcp_call.completed
    ResponseMCPCallFailedEvent:
      description: 'Emitted when an MCP  tool call has failed.

        '
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_call.failed'.
          enum:
          - response.mcp_call.failed
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      title: ResponseMCPCallFailedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_call.failed\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.mcp_call.failed
    ResponseMCPCallInProgressEvent:
      description: 'Emitted when an MCP  tool call is in progress.

        '
      properties:
        item_id:
          description: The unique identifier of the MCP tool call item being processed.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_call.in_progress'.
          enum:
          - response.mcp_call.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      title: ResponseMCPCallInProgressEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_call.in_progress\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"item-abc\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.mcp_call.in_progress
    ResponseMCPListToolsCompletedEvent:
      description: 'Emitted when the list of available MCP tools has been successfully
        retrieved.

        '
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_list_tools.completed'.
          enum:
          - response.mcp_list_tools.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      title: ResponseMCPListToolsCompletedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_list_tools.completed\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.mcp_list_tools.completed
    ResponseMCPListToolsFailedEvent:
      description: 'Emitted when the attempt to list available MCP tools has failed.

        '
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_list_tools.failed'.
          enum:
          - response.mcp_list_tools.failed
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      title: ResponseMCPListToolsFailedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_list_tools.failed\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.mcp_list_tools.failed
    ResponseMCPListToolsInProgressEvent:
      description: 'Emitted when the system is in the process of retrieving the list
        of available MCP tools.

        '
      properties:
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.mcp_list_tools.in_progress'.
          enum:
          - response.mcp_list_tools.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - sequence_number
      title: ResponseMCPListToolsInProgressEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.mcp_list_tools.in_progress\",\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.mcp_list_tools.in_progress
    ResponseModalities:
      description: "Output types that you would like the model to generate.\nMost\
        \ models are capable of generating text, which is the default:\n\n`[\"text\"\
        ]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio).\
        \ To request that this model generate \nboth text and audio responses, you\
        \ can use:\n\n`[\"text\", \"audio\"]`\n"
      items:
        enum:
        - text
        - audio
        type: string
      nullable: true
      type: array
    ResponseOutputItemAddedEvent:
      description: Emitted when a new output item is added.
      properties:
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was added.

            '
        output_index:
          description: 'The index of the output item that was added.

            '
          format: int64
          type: integer
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.output_item.added`.

            '
          enum:
          - response.output_item.added
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_item.added\",\n  \"output_index\"\
          : 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"in_progress\"\
          ,\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\"\
          : []\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.output_item.added
    ResponseOutputItemDoneEvent:
      description: Emitted when an output item is marked done.
      properties:
        item:
          $ref: '#/components/schemas/OutputItem'
          description: 'The output item that was marked done.

            '
        output_index:
          description: 'The index of the output item that was marked done.

            '
          format: int64
          type: integer
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.output_item.done`.

            '
          enum:
          - response.output_item.done
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_item.done\",\n  \"output_index\"\
          : 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"completed\"\
          ,\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\"\
          : [\n      {\n        \"type\": \"output_text\",\n        \"text\": \"In\
          \ a shimmering forest under a sky full of stars, a lonely unicorn named\
          \ Lila discovered a hidden pond that glowed with moonlight. Every night,\
          \ she would leave sparkling, magical flowers by the water's edge, hoping\
          \ to share her beauty with others. One enchanting evening, she woke to find\
          \ a group of friendly animals gathered around, eager to be friends and share\
          \ in her magic.\",\n        \"annotations\": []\n      }\n    ]\n  },\n\
          \  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.output_item.done
    ResponseOutputTextAnnotationAddedEvent:
      description: 'Emitted when an annotation is added to output text content.

        '
      properties:
        annotation:
          description: The annotation object being added. (See annotation schema for
            details.)
          type: object
        annotation_index:
          description: The index of the annotation within the content part.
          format: int64
          type: integer
        content_index:
          description: The index of the content part within the output item.
          format: int64
          type: integer
        item_id:
          description: The unique identifier of the item to which the annotation is
            being added.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.output_text_annotation.added'.
          enum:
          - response.output_text_annotation.added
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - annotation_index
      - annotation
      - sequence_number
      title: ResponseOutputTextAnnotationAddedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text_annotation.added\",\n  \"\
          item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n\
          \  \"annotation_index\": 0,\n  \"annotation\": {\n    \"type\": \"text_annotation\"\
          ,\n    \"text\": \"This is a test annotation\",\n    \"start\": 0,\n   \
          \ \"end\": 10\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.output_text_annotation.added
    ResponsePromptVariables:
      additionalProperties:
        oneOf:
        - type: string
        - $ref: '#/components/schemas/InputTextContent'
        - $ref: '#/components/schemas/InputImageContent'
        - $ref: '#/components/schemas/InputFileContent'
        x-oaiExpandable: true
        x-oaiTypeLabel: map
      description: 'Optional map of values to substitute in for variables in your

        prompt. The substitution values can either be strings, or other

        Response input types like images or files.

        '
      nullable: true
      title: Prompt Variables
      type: object
      x-oaiExpandable: true
      x-oaiTypeLabel: map
    ResponseProperties:
      properties:
        background:
          default: false
          description: "Whether to run the model response in the background. \n[Learn\
            \ more](/docs/guides/background).\n"
          nullable: true
          type: boolean
        max_output_tokens:
          description: 'An upper bound for the number of tokens that can be generated
            for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).

            '
          format: int64
          nullable: true
          type: integer
        max_tool_calls:
          description: 'The maximum number of total calls to built-in tools that can
            be processed in a response. This maximum number applies across all built-in
            tool calls, not per individual tool. Any further attempts to call a tool
            by the model will be ignored.

            '
          format: int64
          nullable: true
          type: integer
        model:
          $ref: '#/components/schemas/ModelIdsResponses'
          description: 'Model ID used to generate the response, like `gpt-4o` or `o3`.
            OpenAI

            offers a wide range of models with different capabilities, performance

            characteristics, and price points. Refer to the [model guide](/docs/models)

            to browse and compare available models.

            '
        previous_response_id:
          description: "The unique ID of the previous response to the model. Use this\
            \ to\ncreate multi-turn conversations. Learn more about \n[conversation\
            \ state](/docs/guides/conversation-state).\n"
          nullable: true
          type: string
        prompt:
          $ref: '#/components/schemas/Prompt'
        reasoning:
          $ref: '#/components/schemas/Reasoning'
          nullable: true
        text:
          description: 'Configuration options for a text response from the model.
            Can be plain

            text or structured JSON data. Learn more:

            - [Text inputs and outputs](/docs/guides/text)

            - [Structured Outputs](/docs/guides/structured-outputs)

            '
          properties:
            format:
              $ref: '#/components/schemas/TextResponseFormatConfiguration'
          type: object
        tool_choice:
          description: 'How the model should select which tool (or tools) to use when
            generating

            a response. See the `tools` parameter to see how to specify which tools

            the model can call.

            '
          oneOf:
          - $ref: '#/components/schemas/ToolChoiceOptions'
          - $ref: '#/components/schemas/ToolChoiceTypes'
          - $ref: '#/components/schemas/ToolChoiceFunction'
          - $ref: '#/components/schemas/ToolChoiceMCP'
        tools:
          description: "An array of tools the model may call while generating a response.\
            \ You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\
            \nThe two categories of tools you can provide the model are:\n\n- **Built-in\
            \ tools**: Tools that are provided by OpenAI that extend the\n  model's\
            \ capabilities, like [web search](/docs/guides/tools-web-search)\n  or\
            \ [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in\
            \ tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions\
            \ that are defined by you,\n  enabling the model to call your own code.\
            \ Learn more about\n  [function calling](/docs/guides/function-calling).\n"
          items:
            $ref: '#/components/schemas/Tool'
          type: array
        truncation:
          default: disabled
          description: "The truncation strategy to use for the model response.\n-\
            \ `auto`: If the context of this response and previous ones exceeds\n\
            \  the model's context window size, the model will truncate the \n  response\
            \ to fit the context window by dropping input items in the\n  middle of\
            \ the conversation. \n- `disabled` (default): If a model response will\
            \ exceed the context window \n  size for a model, the request will fail\
            \ with a 400 error.\n"
          enum:
          - auto
          - disabled
          nullable: true
          type: string
      type: object
    ResponseQueuedEvent:
      description: 'Emitted when a response is queued and waiting to be processed.

        '
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: The full response object that is queued.
        sequence_number:
          description: The sequence number for this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.queued'.
          enum:
          - response.queued
          type: string
          x-stainless-const: true
      required:
      - type
      - response
      - sequence_number
      title: ResponseQueuedEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.queued\",\n  \"response\": {\n    \"id\"\
          : \"res_123\",\n    \"status\": \"queued\",\n    \"created_at\": \"2021-01-01T00:00:00Z\"\
          ,\n    \"updated_at\": \"2021-01-01T00:00:00Z\"\n  },\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.queued
    ResponseReasoningDeltaEvent:
      description: 'Emitted when there is a delta (partial update) to the reasoning
        content.

        '
      properties:
        content_index:
          description: The index of the reasoning content part within the output item.
          format: int64
          type: integer
        delta:
          description: The partial update to the reasoning content.
          type: object
        item_id:
          description: The unique identifier of the item for which reasoning is being
            updated.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.reasoning.delta'.
          enum:
          - response.reasoning.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      - sequence_number
      title: ResponseReasoningDeltaEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning.delta\",\n  \"item_id\": \"\
          item-abc\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\"\
          : {\n    \"text\": \"This is a test delta\"\n  },\n  \"sequence_number\"\
          : 1\n}\n"
        group: responses
        name: response.reasoning.delta
    ResponseReasoningDoneEvent:
      description: 'Emitted when the reasoning content is finalized for an item.

        '
      properties:
        content_index:
          description: The index of the reasoning content part within the output item.
          format: int64
          type: integer
        item_id:
          description: The unique identifier of the item for which reasoning is finalized.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        text:
          description: The finalized reasoning text.
          type: string
        type:
          description: The type of the event. Always 'response.reasoning.done'.
          enum:
          - response.reasoning.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - text
      - sequence_number
      title: ResponseReasoningDoneEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning.done\",\n  \"item_id\": \"item-abc\"\
          ,\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\": \"This is\
          \ a test reasoning\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning.done
    ResponseReasoningSummaryDeltaEvent:
      description: 'Emitted when there is a delta (partial update) to the reasoning
        summary content.

        '
      properties:
        delta:
          description: The partial update to the reasoning summary content.
          type: object
        item_id:
          description: The unique identifier of the item for which the reasoning summary
            is being updated.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        summary_index:
          description: The index of the summary part within the output item.
          format: int64
          type: integer
        type:
          description: The type of the event. Always 'response.reasoning_summary.delta'.
          enum:
          - response.reasoning_summary.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - delta
      - sequence_number
      title: ResponseReasoningSummaryDeltaEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary.delta\",\n  \"item_id\"\
          : \"item-abc\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"delta\"\
          : {\n    \"text\": \"delta text\"\n  },\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning_summary.delta
    ResponseReasoningSummaryDoneEvent:
      description: 'Emitted when the reasoning summary content is finalized for an
        item.

        '
      properties:
        item_id:
          description: The unique identifier of the item for which the reasoning summary
            is finalized.
          type: string
        output_index:
          description: The index of the output item in the response's output array.
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of this event.
          format: int64
          type: integer
        summary_index:
          description: The index of the summary part within the output item.
          format: int64
          type: integer
        text:
          description: The finalized reasoning summary text.
          type: string
        type:
          description: The type of the event. Always 'response.reasoning_summary.done'.
          enum:
          - response.reasoning_summary.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - text
      - sequence_number
      title: ResponseReasoningSummaryDoneEvent
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary.done\",\n  \"item_id\"\
          : \"item-abc\",\n  \"output_index\": 0,\n  \"summary_index\": 0,\n  \"text\"\
          : \"This is a test reasoning summary\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning_summary.done
    ResponseReasoningSummaryPartAddedEvent:
      description: Emitted when a new reasoning summary part is added.
      properties:
        item_id:
          description: 'The ID of the item this summary part is associated with.

            '
          type: string
        output_index:
          description: 'The index of the output item this summary part is associated
            with.

            '
          format: int64
          type: integer
        part:
          description: 'The summary part that was added.

            '
          properties:
            text:
              description: The text of the summary part.
              type: string
            type:
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              type: string
              x-stainless-const: true
          required:
          - type
          - text
          type: object
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        summary_index:
          description: 'The index of the summary part within the reasoning summary.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.reasoning_summary_part.added`.

            '
          enum:
          - response.reasoning_summary_part.added
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary_part.added\",\n  \"\
          item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"\
          output_index\": 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\"\
          : \"summary_text\",\n    \"text\": \"\"\n  },\n  \"sequence_number\": 1\n\
          }\n"
        group: responses
        name: response.reasoning_summary_part.added
    ResponseReasoningSummaryPartDoneEvent:
      description: Emitted when a reasoning summary part is completed.
      properties:
        item_id:
          description: 'The ID of the item this summary part is associated with.

            '
          type: string
        output_index:
          description: 'The index of the output item this summary part is associated
            with.

            '
          format: int64
          type: integer
        part:
          description: 'The completed summary part.

            '
          properties:
            text:
              description: The text of the summary part.
              type: string
            type:
              description: The type of the summary part. Always `summary_text`.
              enum:
              - summary_text
              type: string
              x-stainless-const: true
          required:
          - type
          - text
          type: object
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        summary_index:
          description: 'The index of the summary part within the reasoning summary.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.reasoning_summary_part.done`.

            '
          enum:
          - response.reasoning_summary_part.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - part
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary_part.done\",\n  \"item_id\"\
          : \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\"\
          : 0,\n  \"summary_index\": 0,\n  \"part\": {\n    \"type\": \"summary_text\"\
          ,\n    \"text\": \"**Responding to a greeting**\\n\\nThe user just said,\
          \ \\\"Hello!\\\" So, it seems I need to engage. I'll greet them back and\
          \ offer help since they're looking to chat. I could say something like,\
          \ \\\"Hello! How can I assist you today?\\\" That feels friendly and open.\
          \ They didn't ask a specific question, so this approach will work well for\
          \ starting a conversation. Let's see where it goes from there!\"\n  },\n\
          \  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning_summary_part.done
    ResponseReasoningSummaryTextDeltaEvent:
      description: Emitted when a delta is added to a reasoning summary text.
      properties:
        delta:
          description: 'The text delta that was added to the summary.

            '
          type: string
        item_id:
          description: 'The ID of the item this summary text delta is associated with.

            '
          type: string
        output_index:
          description: 'The index of the output item this summary text delta is associated
            with.

            '
          format: int64
          type: integer
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        summary_index:
          description: 'The index of the summary part within the reasoning summary.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.reasoning_summary_text.delta`.

            '
          enum:
          - response.reasoning_summary_text.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary_text.delta\",\n  \"\
          item_id\": \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"\
          output_index\": 0,\n  \"summary_index\": 0,\n  \"delta\": \"**Responding\
          \ to a greeting**\\n\\nThe user just said, \\\"Hello!\\\" So, it seems I\
          \ need to engage. I'll greet them back and offer help since they're looking\
          \ to chat. I could say something like, \\\"Hello! How can I assist you today?\\\
          \" That feels friendly and open. They didn't ask a specific question, so\
          \ this approach will work well for starting a conversation. Let's see where\
          \ it goes from there!\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning_summary_text.delta
    ResponseReasoningSummaryTextDoneEvent:
      description: Emitted when a reasoning summary text is completed.
      properties:
        item_id:
          description: 'The ID of the item this summary text is associated with.

            '
          type: string
        output_index:
          description: 'The index of the output item this summary text is associated
            with.

            '
          format: int64
          type: integer
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        summary_index:
          description: 'The index of the summary part within the reasoning summary.

            '
          format: int64
          type: integer
        text:
          description: 'The full text of the completed reasoning summary.

            '
          type: string
        type:
          description: 'The type of the event. Always `response.reasoning_summary_text.done`.

            '
          enum:
          - response.reasoning_summary_text.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - summary_index
      - text
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.reasoning_summary_text.done\",\n  \"item_id\"\
          : \"rs_6806bfca0b2481918a5748308061a2600d3ce51bdffd5476\",\n  \"output_index\"\
          : 0,\n  \"summary_index\": 0,\n  \"text\": \"**Responding to a greeting**\\\
          n\\nThe user just said, \\\"Hello!\\\" So, it seems I need to engage. I'll\
          \ greet them back and offer help since they're looking to chat. I could\
          \ say something like, \\\"Hello! How can I assist you today?\\\" That feels\
          \ friendly and open. They didn't ask a specific question, so this approach\
          \ will work well for starting a conversation. Let's see where it goes from\
          \ there!\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.reasoning_summary_text.done
    ResponseRefusalDeltaEvent:
      description: Emitted when there is a partial refusal text.
      properties:
        content_index:
          description: 'The index of the content part that the refusal text is added
            to.

            '
          format: int64
          type: integer
        delta:
          description: 'The refusal text that is added.

            '
          type: string
        item_id:
          description: 'The ID of the output item that the refusal text is added to.

            '
          type: string
        output_index:
          description: 'The index of the output item that the refusal text is added
            to.

            '
          format: int64
          type: integer
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.refusal.delta`.

            '
          enum:
          - response.refusal.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.refusal.delta\",\n  \"item_id\": \"msg_123\"\
          ,\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"refusal\
          \ text so far\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.refusal.delta
    ResponseRefusalDoneEvent:
      description: Emitted when refusal text is finalized.
      properties:
        content_index:
          description: 'The index of the content part that the refusal text is finalized.

            '
          format: int64
          type: integer
        item_id:
          description: 'The ID of the output item that the refusal text is finalized.

            '
          type: string
        output_index:
          description: 'The index of the output item that the refusal text is finalized.

            '
          format: int64
          type: integer
        refusal:
          description: 'The refusal text that is finalized.

            '
          type: string
        sequence_number:
          description: 'The sequence number of this event.

            '
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.refusal.done`.

            '
          enum:
          - response.refusal.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - refusal
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.refusal.done\",\n  \"item_id\": \"item-abc\"\
          ,\n  \"output_index\": 1,\n  \"content_index\": 2,\n  \"refusal\": \"final\
          \ refusal text\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.refusal.done
    ResponseStreamEvent:
      anyOf:
      - $ref: '#/components/schemas/ResponseAudioDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioDoneEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDeltaEvent'
      - $ref: '#/components/schemas/ResponseAudioTranscriptDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent'
      - $ref: '#/components/schemas/ResponseCompletedEvent'
      - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
      - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
      - $ref: '#/components/schemas/ResponseCreatedEvent'
      - $ref: '#/components/schemas/ResponseErrorEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseFileSearchCallSearchingEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent'
      - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDoneEvent'
      - $ref: '#/components/schemas/ResponseInProgressEvent'
      - $ref: '#/components/schemas/ResponseFailedEvent'
      - $ref: '#/components/schemas/ResponseIncompleteEvent'
      - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
      - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartAddedEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryPartDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryTextDoneEvent'
      - $ref: '#/components/schemas/ResponseRefusalDeltaEvent'
      - $ref: '#/components/schemas/ResponseRefusalDoneEvent'
      - $ref: '#/components/schemas/ResponseTextDeltaEvent'
      - $ref: '#/components/schemas/ResponseTextDoneEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseWebSearchCallSearchingEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallGeneratingEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseImageGenCallPartialImageEvent'
      - $ref: '#/components/schemas/ResponseMCPCallArgumentsDeltaEvent'
      - $ref: '#/components/schemas/ResponseMCPCallArgumentsDoneEvent'
      - $ref: '#/components/schemas/ResponseMCPCallCompletedEvent'
      - $ref: '#/components/schemas/ResponseMCPCallFailedEvent'
      - $ref: '#/components/schemas/ResponseMCPCallInProgressEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsCompletedEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsFailedEvent'
      - $ref: '#/components/schemas/ResponseMCPListToolsInProgressEvent'
      - $ref: '#/components/schemas/ResponseOutputTextAnnotationAddedEvent'
      - $ref: '#/components/schemas/ResponseQueuedEvent'
      - $ref: '#/components/schemas/ResponseReasoningDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningDoneEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryDeltaEvent'
      - $ref: '#/components/schemas/ResponseReasoningSummaryDoneEvent'
      discriminator:
        propertyName: type
    ResponseTextDeltaEvent:
      description: Emitted when there is an additional text delta.
      properties:
        content_index:
          description: 'The index of the content part that the text delta was added
            to.

            '
          format: int64
          type: integer
        delta:
          description: 'The text delta that was added.

            '
          type: string
        item_id:
          description: 'The ID of the output item that the text delta was added to.

            '
          type: string
        output_index:
          description: 'The index of the output item that the text delta was added
            to.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number for this event.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.output_text.delta`.

            '
          enum:
          - response.output_text.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - delta
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text.delta\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\"\
          : \"In\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.output_text.delta
    ResponseTextDoneEvent:
      description: Emitted when text content is finalized.
      properties:
        content_index:
          description: 'The index of the content part that the text content is finalized.

            '
          format: int64
          type: integer
        item_id:
          description: 'The ID of the output item that the text content is finalized.

            '
          type: string
        output_index:
          description: 'The index of the output item that the text content is finalized.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number for this event.
          format: int64
          type: integer
        text:
          description: 'The text content that is finalized.

            '
          type: string
        type:
          description: 'The type of the event. Always `response.output_text.done`.

            '
          enum:
          - response.output_text.done
          type: string
          x-stainless-const: true
      required:
      - type
      - item_id
      - output_index
      - content_index
      - text
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text.done\",\n  \"item_id\": \"\
          msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\"\
          : \"In a shimmering forest under a sky full of stars, a lonely unicorn named\
          \ Lila discovered a hidden pond that glowed with moonlight. Every night,\
          \ she would leave sparkling, magical flowers by the water's edge, hoping\
          \ to share her beauty with others. One enchanting evening, she woke to find\
          \ a group of friendly animals gathered around, eager to be friends and share\
          \ in her magic.\",\n  \"sequence_number\": 1\n}\n"
        group: responses
        name: response.output_text.done
    ResponseUsage:
      description: 'Represents token usage details including input tokens, output
        tokens,

        a breakdown of output tokens, and the total tokens used.

        '
      properties:
        input_tokens:
          description: The number of input tokens.
          format: int64
          type: integer
        input_tokens_details:
          description: A detailed breakdown of the input tokens.
          properties:
            cached_tokens:
              description: "The number of tokens that were retrieved from the cache.\
                \ \n[More on prompt caching](/docs/guides/prompt-caching).\n"
              format: int64
              type: integer
          required:
          - cached_tokens
          type: object
        output_tokens:
          description: The number of output tokens.
          format: int64
          type: integer
        output_tokens_details:
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              description: The number of reasoning tokens.
              format: int64
              type: integer
          required:
          - reasoning_tokens
          type: object
        total_tokens:
          description: The total number of tokens used.
          format: int64
          type: integer
      required:
      - input_tokens
      - input_tokens_details
      - output_tokens
      - output_tokens_details
      - total_tokens
      type: object
    ResponseWebSearchCallCompletedEvent:
      description: Emitted when a web search call is completed.
      properties:
        item_id:
          description: 'Unique ID for the output item associated with the web search
            call.

            '
          type: string
        output_index:
          description: 'The index of the output item that the web search call is associated
            with.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the web search call being processed.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.web_search_call.completed`.

            '
          enum:
          - response.web_search_call.completed
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.completed\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n"
        group: responses
        name: response.web_search_call.completed
    ResponseWebSearchCallInProgressEvent:
      description: Emitted when a web search call is initiated.
      properties:
        item_id:
          description: 'Unique ID for the output item associated with the web search
            call.

            '
          type: string
        output_index:
          description: 'The index of the output item that the web search call is associated
            with.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the web search call being processed.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.web_search_call.in_progress`.

            '
          enum:
          - response.web_search_call.in_progress
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.in_progress\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n"
        group: responses
        name: response.web_search_call.in_progress
    ResponseWebSearchCallSearchingEvent:
      description: Emitted when a web search call is executing.
      properties:
        item_id:
          description: 'Unique ID for the output item associated with the web search
            call.

            '
          type: string
        output_index:
          description: 'The index of the output item that the web search call is associated
            with.

            '
          format: int64
          type: integer
        sequence_number:
          description: The sequence number of the web search call being processed.
          format: int64
          type: integer
        type:
          description: 'The type of the event. Always `response.web_search_call.searching`.

            '
          enum:
          - response.web_search_call.searching
          type: string
          x-stainless-const: true
      required:
      - type
      - output_index
      - item_id
      - sequence_number
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.searching\",\n  \"output_index\"\
          : 0,\n  \"item_id\": \"ws_123\",\n  \"sequence_number\": 0\n}\n"
        group: responses
        name: response.web_search_call.searching
    RunCompletionUsage:
      description: Usage statistics related to the run. This value will be `null`
        if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run.
          format: int64
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run.
          format: int64
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          format: int64
          type: integer
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      type: object
    RunGraderRequest:
      properties:
        grader:
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
          type: object
        item:
          description: "The dataset item provided to the grader. This will be used\
            \ to populate \nthe `item` namespace. See [the guide](/docs/guides/graders)\
            \ for more details. \n"
          type: object
        model_sample:
          description: "The model sample to be evaluated. This value will be used\
            \ to populate \nthe `sample` namespace. See [the guide](/docs/guides/graders)\
            \ for more details.\nThe `output_json` variable will be populated if the\
            \ model sample is a \nvalid JSON string.\n \n"
          type: string
      required:
      - grader
      - model_sample
      title: RunGraderRequest
      type: object
    RunGraderResponse:
      properties:
        metadata:
          properties:
            errors:
              properties:
                formula_parse_error:
                  type: boolean
                invalid_variable_error:
                  type: boolean
                model_grader_parse_error:
                  type: boolean
                model_grader_refusal_error:
                  type: boolean
                model_grader_server_error:
                  type: boolean
                model_grader_server_error_details:
                  nullable: true
                  type: string
                other_error:
                  type: boolean
                python_grader_runtime_error:
                  type: boolean
                python_grader_runtime_error_details:
                  nullable: true
                  type: string
                python_grader_server_error:
                  type: boolean
                python_grader_server_error_type:
                  nullable: true
                  type: string
                sample_parse_error:
                  type: boolean
                truncated_observation_error:
                  type: boolean
                unresponsive_reward_error:
                  type: boolean
              required:
              - formula_parse_error
              - sample_parse_error
              - truncated_observation_error
              - unresponsive_reward_error
              - invalid_variable_error
              - other_error
              - python_grader_server_error
              - python_grader_server_error_type
              - python_grader_runtime_error
              - python_grader_runtime_error_details
              - model_grader_server_error
              - model_grader_refusal_error
              - model_grader_parse_error
              - model_grader_server_error_details
              type: object
            execution_time:
              type: number
            name:
              type: string
            sampled_model_name:
              nullable: true
              type: string
            scores:
              additionalProperties: {}
              type: object
            token_usage:
              format: int64
              nullable: true
              type: integer
            type:
              type: string
          required:
          - name
          - type
          - errors
          - execution_time
          - scores
          - token_usage
          - sampled_model_name
          type: object
        model_grader_token_usage_per_model:
          additionalProperties: {}
          type: object
        reward:
          type: number
        sub_rewards:
          additionalProperties: {}
          type: object
      required:
      - reward
      - metadata
      - sub_rewards
      - model_grader_token_usage_per_model
      type: object
    RunObject:
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) used
            for execution of this run.
          type: string
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          format: int64
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          format: int64
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          format: int64
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          format: int64
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          format: int64
          nullable: true
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        incomplete_details:
          description: Details on why the run is incomplete. Will be `null` if the
            run is not incomplete.
          nullable: true
          properties:
            reason:
              description: The reason why the run is incomplete. This will point to
                which specific token limit was reached over the course of the run.
              enum:
              - max_completion_tokens
              - max_prompt_tokens
              type: string
          type: object
        instructions:
          description: The instructions that the [assistant](/docs/api-reference/assistants)
            used for this run.
          type: string
        last_error:
          description: The last error associated with this run. Will be `null` if
            there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
              enum:
              - server_error
              - rate_limit_exceeded
              - invalid_prompt
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
          - code
          - message
          type: object
        max_completion_tokens:
          description: 'The maximum number of completion tokens specified to have
            been used over the course of the run.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: 'The maximum number of prompt tokens specified to have been
            used over the course of the run.

            '
          format: int64
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: The model that the [assistant](/docs/api-reference/assistants)
            used for this run.
          type: string
        object:
          description: The object type, which is always `thread.run`.
          enum:
          - thread.run
          type: string
          x-stainless-const: true
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        required_action:
          description: Details on the action required to continue the run. Will be
            `null` if no action is required.
          nullable: true
          properties:
            submit_tool_outputs:
              description: Details on the tool outputs needed for this run to continue.
              properties:
                tool_calls:
                  description: A list of the relevant tool calls.
                  items:
                    $ref: '#/components/schemas/RunToolCallObject'
                  type: array
              required:
              - tool_calls
              type: object
            type:
              description: For now, this is always `submit_tool_outputs`.
              enum:
              - submit_tool_outputs
              type: string
              x-stainless-const: true
          required:
          - type
          - submit_tool_outputs
          type: object
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          format: int64
          nullable: true
          type: integer
        status:
          description: The status of the run, which can be either `queued`, `in_progress`,
            `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`,
            or `expired`.
          enum:
          - queued
          - in_progress
          - requires_action
          - cancelling
          - cancelled
          - failed
          - completed
          - incomplete
          - expired
          type: string
        temperature:
          description: The sampling temperature used for this run. If not set, defaults
            to 1.
          nullable: true
          type: number
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was
            executed on as a part of this run.
          type: string
        tool_choice:
          allOf:
          - $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
          - nullable: true
        tools:
          default: []
          description: The list of tools that the [assistant](/docs/api-reference/assistants)
            used for this run.
          items:
            oneOf:
            - $ref: '#/components/schemas/AssistantToolsCode'
            - $ref: '#/components/schemas/AssistantToolsFileSearch'
            - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 20
          type: array
        top_p:
          description: The nucleus sampling value used for this run. If not set, defaults
            to 1.
          nullable: true
          type: number
        truncation_strategy:
          allOf:
          - $ref: '#/components/schemas/TruncationObject'
          - nullable: true
        usage:
          $ref: '#/components/schemas/RunCompletionUsage'
      required:
      - id
      - object
      - created_at
      - thread_id
      - assistant_id
      - status
      - required_action
      - last_error
      - expires_at
      - started_at
      - cancelled_at
      - failed_at
      - completed_at
      - model
      - instructions
      - tools
      - metadata
      - usage
      - incomplete_details
      - max_prompt_tokens
      - max_completion_tokens
      - truncation_strategy
      - tool_choice
      - parallel_tool_calls
      - response_format
      title: A run on a thread
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"\
          created_at\": 1698107661,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\"\
          : \"thread_abc123\",\n  \"status\": \"completed\",\n  \"started_at\": 1699073476,\n\
          \  \"expires_at\": null,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n\
          \  \"completed_at\": 1699073498,\n  \"last_error\": null,\n  \"model\":\
          \ \"gpt-4o\",\n  \"instructions\": null,\n  \"tools\": [{\"type\": \"file_search\"\
          }, {\"type\": \"code_interpreter\"}],\n  \"metadata\": {},\n  \"incomplete_details\"\
          : null,\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\"\
          : 456,\n    \"total_tokens\": 579\n  },\n  \"temperature\": 1.0,\n  \"top_p\"\
          : 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n\
          \  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\"\
          : null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\"\
          ,\n  \"parallel_tool_calls\": true\n}\n"
        name: The run object
    RunStepCompletionUsage:
      description: Usage statistics related to the run step. This value will be `null`
        while the run step's status is `in_progress`.
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run
            step.
          format: int64
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run step.
          format: int64
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          format: int64
          type: integer
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      type: object
    RunStepDeltaObject:
      description: 'Represents a run step delta i.e. any changed fields on a run step
        during streaming.

        '
      properties:
        delta:
          description: The delta containing the fields that have changed on the run
            step.
          properties:
            step_details:
              description: The details of the run step.
              oneOf:
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject'
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject'
              type: object
          type: object
        id:
          description: The identifier of the run step, which can be referenced in
            API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run.step.delta`.
          enum:
          - thread.run.step.delta
          type: string
          x-stainless-const: true
      required:
      - id
      - object
      - delta
      title: Run step delta object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"step_123\",\n  \"object\": \"thread.run.step.delta\"\
          ,\n  \"delta\": {\n    \"step_details\": {\n      \"type\": \"tool_calls\"\
          ,\n      \"tool_calls\": [\n        {\n          \"index\": 0,\n       \
          \   \"id\": \"call_123\",\n          \"type\": \"code_interpreter\",\n \
          \         \"code_interpreter\": { \"input\": \"\", \"outputs\": [] }\n \
          \       }\n      ]\n    }\n  }\n}\n"
        name: The run step delta object
    RunStepDeltaStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      properties:
        message_creation:
          properties:
            message_id:
              description: The ID of the message that was created by this run step.
              type: string
          type: object
        type:
          description: Always `message_creation`.
          enum:
          - message_creation
          type: string
          x-stainless-const: true
      required:
      - type
      title: Message creation
      type: object
    RunStepDeltaStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        code_interpreter:
          description: The Code Interpreter tool call definition.
          properties:
            input:
              description: The input to the Code Interpreter tool call.
              type: string
            outputs:
              description: The outputs from the Code Interpreter tool call. Code Interpreter
                can output one or more items, including text (`logs`) or images (`image`).
                Each of these are represented by a different object type.
              items:
                oneOf:
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject'
                type: object
              type: array
          type: object
        id:
          description: The ID of the tool call.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          format: int64
          type: integer
        type:
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Code interpreter tool call
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      properties:
        image:
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
          type: object
        index:
          description: The index of the output in the outputs array.
          format: int64
          type: integer
        type:
          description: Always `image`.
          enum:
          - image
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Code interpreter image output
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        index:
          description: The index of the output in the outputs array.
          format: int64
          type: integer
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
        type:
          description: Always `logs`.
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Code interpreter log output
      type: object
    RunStepDeltaStepDetailsToolCallsFileSearchObject:
      properties:
        file_search:
          description: For now, this is always going to be an empty object.
          type: object
          x-oaiTypeLabel: map
        id:
          description: The ID of the tool call object.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          format: int64
          type: integer
        type:
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      - file_search
      title: File search tool call
      type: object
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      properties:
        function:
          description: The definition of the function that was called.
          properties:
            arguments:
              description: The arguments passed to the function.
              type: string
            name:
              description: The name of the function.
              type: string
            output:
              description: The output of the function. This will be `null` if the
                outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs)
                yet.
              nullable: true
              type: string
          type: object
        id:
          description: The ID of the tool call object.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          format: int64
          type: integer
        type:
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - index
      - type
      title: Function tool call
      type: object
    RunStepDeltaStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        tool_calls:
          description: 'An array of tool calls the run step was involved in. These
            can be associated with one of three types of tools: `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject'
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject'
            - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject'
          type: array
        type:
          description: Always `tool_calls`.
          enum:
          - tool_calls
          type: string
          x-stainless-const: true
      required:
      - type
      title: Tool calls
      type: object
    RunStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      properties:
        message_creation:
          properties:
            message_id:
              description: The ID of the message that was created by this run step.
              type: string
          required:
          - message_id
          type: object
        type:
          description: Always `message_creation`.
          enum:
          - message_creation
          type: string
          x-stainless-const: true
      required:
      - type
      - message_creation
      title: Message creation
      type: object
    RunStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved
        in.
      properties:
        code_interpreter:
          description: The Code Interpreter tool call definition.
          properties:
            input:
              description: The input to the Code Interpreter tool call.
              type: string
            outputs:
              description: The outputs from the Code Interpreter tool call. Code Interpreter
                can output one or more items, including text (`logs`) or images (`image`).
                Each of these are represented by a different object type.
              items:
                oneOf:
                - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
                - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
                type: object
              type: array
          required:
          - input
          - outputs
          type: object
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of tool call. This is always going to be `code_interpreter`
            for this type of tool call.
          enum:
          - code_interpreter
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - code_interpreter
      title: Code Interpreter tool call
      type: object
    RunStepDetailsToolCallsCodeOutputImageObject:
      properties:
        image:
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
          required:
          - file_id
          type: object
        type:
          description: Always `image`.
          enum:
          - image
          type: string
          x-stainless-const: true
      required:
      - type
      - image
      title: Code Interpreter image output
      type: object
    RunStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run
        step.
      properties:
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
        type:
          description: Always `logs`.
          enum:
          - logs
          type: string
          x-stainless-const: true
      required:
      - type
      - logs
      title: Code Interpreter log output
      type: object
    RunStepDetailsToolCallsFileSearchObject:
      properties:
        file_search:
          description: For now, this is always going to be an empty object.
          properties:
            ranking_options:
              $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject'
            results:
              description: The results of the file search.
              items:
                $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject'
              type: array
          type: object
          x-oaiTypeLabel: map
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `file_search`
            for this type of tool call.
          enum:
          - file_search
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - file_search
      title: File search tool call
      type: object
    RunStepDetailsToolCallsFileSearchRankingOptionsObject:
      description: The ranking options for the file search.
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          description: The score threshold for the file search. All values must be
            a floating point number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
      - ranker
      - score_threshold
      title: File search tool call ranking options
      type: object
    RunStepDetailsToolCallsFileSearchResultObject:
      description: A result instance of the file search.
      properties:
        content:
          description: The content of the result that was found. The content is only
            included if requested via the include query parameter.
          items:
            properties:
              text:
                description: The text content of the file.
                type: string
              type:
                description: The type of the content.
                enum:
                - text
                type: string
                x-stainless-const: true
            type: object
          type: array
        file_id:
          description: The ID of the file that result was found in.
          type: string
        file_name:
          description: The name of the file that result was found in.
          type: string
        score:
          description: The score of the result. All values must be a floating point
            number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
      - file_id
      - file_name
      - score
      title: File search tool call result
      type: object
      x-oaiTypeLabel: map
    RunStepDetailsToolCallsFunctionObject:
      properties:
        function:
          description: The definition of the function that was called.
          properties:
            arguments:
              description: The arguments passed to the function.
              type: string
            name:
              description: The name of the function.
              type: string
            output:
              description: The output of the function. This will be `null` if the
                outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs)
                yet.
              nullable: true
              type: string
          required:
          - name
          - arguments
          - output
          type: object
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `function`
            for this type of tool call.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - function
      title: Function tool call
      type: object
    RunStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        tool_calls:
          description: 'An array of tool calls the run step was involved in. These
            can be associated with one of three types of tools: `code_interpreter`,
            `file_search`, or `function`.

            '
          items:
            oneOf:
            - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
            - $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchObject'
            - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
          type: array
        type:
          description: Always `tool_calls`.
          enum:
          - tool_calls
          type: string
          x-stainless-const: true
      required:
      - type
      - tool_calls
      title: Tool calls
      type: object
    RunStepObject:
      description: 'Represents a step in execution of a run.

        '
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) associated
            with the run step.
          type: string
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          format: int64
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run step completed.
          format: int64
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the run step was created.
          format: int64
          type: integer
        expired_at:
          description: The Unix timestamp (in seconds) for when the run step expired.
            A step is considered expired if the parent run is expired.
          format: int64
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run step failed.
          format: int64
          nullable: true
          type: integer
        id:
          description: The identifier of the run step, which can be referenced in
            API endpoints.
          type: string
        last_error:
          description: The last error associated with this run step. Will be `null`
            if there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - server_error
              - rate_limit_exceeded
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
          - code
          - message
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread.run.step`.
          enum:
          - thread.run.step
          type: string
          x-stainless-const: true
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) that this run
            step is a part of.
          type: string
        status:
          description: The status of the run step, which can be either `in_progress`,
            `cancelled`, `failed`, `completed`, or `expired`.
          enum:
          - in_progress
          - cancelled
          - failed
          - completed
          - expired
          type: string
        step_details:
          description: The details of the run step.
          oneOf:
          - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
          - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
          type: object
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was
            run.
          type: string
        type:
          description: The type of run step, which can be either `message_creation`
            or `tool_calls`.
          enum:
          - message_creation
          - tool_calls
          type: string
        usage:
          $ref: '#/components/schemas/RunStepCompletionUsage'
      required:
      - id
      - object
      - created_at
      - assistant_id
      - thread_id
      - run_id
      - type
      - status
      - step_details
      - last_error
      - expired_at
      - cancelled_at
      - failed_at
      - completed_at
      - metadata
      - usage
      title: Run steps
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"step_abc123\",\n  \"object\": \"thread.run.step\"\
          ,\n  \"created_at\": 1699063291,\n  \"run_id\": \"run_abc123\",\n  \"assistant_id\"\
          : \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"type\": \"\
          message_creation\",\n  \"status\": \"completed\",\n  \"cancelled_at\": null,\n\
          \  \"completed_at\": 1699063291,\n  \"expired_at\": null,\n  \"failed_at\"\
          : null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"\
          message_creation\",\n    \"message_creation\": {\n      \"message_id\":\
          \ \"msg_abc123\"\n    }\n  },\n  \"usage\": {\n    \"prompt_tokens\": 123,\n\
          \    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  }\n}\n"
        name: The run step object
    RunStepStreamEvent:
      oneOf:
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is created.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.created
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          moves to an `in_progress` state.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.in_progress
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
      - description: Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object)
          are being streamed.
        properties:
          data:
            $ref: '#/components/schemas/RunStepDeltaObject'
          event:
            enum:
            - thread.run.step.delta
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step delta](/docs/api-reference/assistants-streaming/run-step-delta-object)'
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is completed.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.completed
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          fails.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.failed
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          is cancelled.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.cancelled
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
      - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object)
          expires.
        properties:
          data:
            $ref: '#/components/schemas/RunStepObject'
          event:
            enum:
            - thread.run.step.expired
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
    RunStreamEvent:
      oneOf:
      - description: Occurs when a new [run](/docs/api-reference/runs/object) is created.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.created
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `queued` status.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.queued
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          an `in_progress` status.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.in_progress
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `requires_action` status.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.requires_action
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) is completed.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.completed
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) ends with
          status `incomplete`.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.incomplete
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) fails.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.failed
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) moves to
          a `cancelling` status.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.cancelling
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.cancelled
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
      - description: Occurs when a [run](/docs/api-reference/runs/object) expires.
        properties:
          data:
            $ref: '#/components/schemas/RunObject'
          event:
            enum:
            - thread.run.expired
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
    RunToolCallObject:
      description: Tool call objects
      properties:
        function:
          description: The function definition.
          properties:
            arguments:
              description: The arguments that the model expects you to pass to the
                function.
              type: string
            name:
              description: The name of the function.
              type: string
          required:
          - name
          - arguments
          type: object
        id:
          description: The ID of the tool call. This ID must be referenced when you
            submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs)
            endpoint.
          type: string
        type:
          description: The type of tool call the output is required for. For now,
            this is always `function`.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - function
      type: object
    Screenshot:
      description: 'A screenshot action.

        '
      properties:
        type:
          default: screenshot
          description: "Specifies the event type. For a screenshot action, this property\
            \ is \nalways set to `screenshot`.\n"
          enum:
          - screenshot
          type: string
          x-stainless-const: true
      required:
      - type
      title: Screenshot
      type: object
    Scroll:
      description: 'A scroll action.

        '
      properties:
        scroll_x:
          description: 'The horizontal scroll distance.

            '
          format: int64
          type: integer
        scroll_y:
          description: 'The vertical scroll distance.

            '
          format: int64
          type: integer
        type:
          default: scroll
          description: "Specifies the event type. For a scroll action, this property\
            \ is \nalways set to `scroll`.\n"
          enum:
          - scroll
          type: string
          x-stainless-const: true
        x:
          description: 'The x-coordinate where the scroll occurred.

            '
          format: int64
          type: integer
        y:
          description: 'The y-coordinate where the scroll occurred.

            '
          format: int64
          type: integer
      required:
      - type
      - x
      - y
      - scroll_x
      - scroll_y
      title: Scroll
      type: object
    ServiceTier:
      default: auto
      description: "Specifies the processing type used for serving the request.\n\
        \  - If set to 'auto', then the request will be processed with the service\
        \ tier configured in the Project settings. Unless otherwise configured, the\
        \ Project will use 'default'.\n  - If set to 'default', then the requset will\
        \ be processed with the standard pricing and performance for the selected\
        \ model.\n  - If set to '[flex](/docs/guides/flex-processing)' or 'priority',\
        \ then the request will be processed with the corresponding service tier.\
        \ [Contact sales](https://openai.com/contact-sales) to learn more about Priority\
        \ processing.\n  - When not set, the default behavior is 'auto'.\n\n  When\
        \ the `service_tier` parameter is set, the response body will include the\
        \ `service_tier` value based on the processing mode actually used to serve\
        \ the request. This response value may be different from the value set in\
        \ the parameter.\n"
      enum:
      - auto
      - default
      - flex
      - scale
      - priority
      nullable: true
      type: string
    SpeechAudioDeltaEvent:
      description: Emitted for each chunk of audio data generated during speech synthesis.
      properties:
        audio:
          description: 'A chunk of Base64-encoded audio data.

            '
          type: string
        type:
          description: 'The type of the event. Always `speech.audio.delta`.

            '
          enum:
          - speech.audio.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - audio
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"speech.audio.delta\",\n  \"audio\": \"base64-encoded-audio-data\"\
          \n}\n"
        group: speech
        name: Stream Event (speech.audio.delta)
    SpeechAudioDoneEvent:
      description: Emitted when the speech synthesis is complete and all audio has
        been streamed.
      properties:
        type:
          description: 'The type of the event. Always `speech.audio.done`.

            '
          enum:
          - speech.audio.done
          type: string
          x-stainless-const: true
        usage:
          description: 'Token usage statistics for the request.

            '
          properties:
            input_tokens:
              description: Number of input tokens in the prompt.
              format: int64
              type: integer
            output_tokens:
              description: Number of output tokens generated.
              format: int64
              type: integer
            total_tokens:
              description: Total number of tokens used (input + output).
              format: int64
              type: integer
          required:
          - input_tokens
          - output_tokens
          - total_tokens
          type: object
      required:
      - type
      - usage
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"speech.audio.done\",\n  \"usage\": {\n    \"input_tokens\"\
          : 14,\n    \"output_tokens\": 101,\n    \"total_tokens\": 115\n  }\n}\n"
        group: speech
        name: Stream Event (speech.audio.done)
    StaticChunkingStrategy:
      additionalProperties: false
      properties:
        chunk_overlap_tokens:
          description: 'The number of tokens that overlap between chunks. The default
            value is `400`.


            Note that the overlap must not exceed half of `max_chunk_size_tokens`.

            '
          format: int64
          type: integer
        max_chunk_size_tokens:
          description: The maximum number of tokens in each chunk. The default value
            is `800`. The minimum value is `100` and the maximum value is `4096`.
          format: int64
          maximum: 4096
          minimum: 100
          type: integer
      required:
      - max_chunk_size_tokens
      - chunk_overlap_tokens
      type: object
    StaticChunkingStrategyRequestParam:
      additionalProperties: false
      description: Customize your own chunking strategy by setting chunk size and
        chunk overlap.
      properties:
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
        type:
          description: Always `static`.
          enum:
          - static
          type: string
          x-stainless-const: true
      required:
      - type
      - static
      title: Static Chunking Strategy
      type: object
    StaticChunkingStrategyResponseParam:
      additionalProperties: false
      properties:
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
        type:
          description: Always `static`.
          enum:
          - static
          type: string
          x-stainless-const: true
      required:
      - type
      - static
      title: Static Chunking Strategy
      type: object
    StopConfiguration:
      default: null
      description: 'Not supported with latest reasoning models `o3` and `o4-mini`.


        Up to 4 sequences where the API will stop generating further tokens. The

        returned text will not contain the stop sequence.

        '
      nullable: true
      oneOf:
      - default: <|endoftext|>
        example: '

          '
        nullable: true
        type: string
      - items:
          example: '["\n"]'
          type: string
        maxItems: 4
        minItems: 1
        type: array
    SubmitToolOutputsRunRequest:
      additionalProperties: false
      properties:
        stream:
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
          nullable: true
          type: boolean
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          items:
            properties:
              output:
                description: The output of the tool call to be submitted to continue
                  the run.
                type: string
              tool_call_id:
                description: The ID of the tool call in the `required_action` object
                  within the run object the output is being submitted for.
                type: string
            type: object
          type: array
      required:
      - tool_outputs
      type: object
    TextResponseFormatConfiguration:
      description: "An object specifying the format that the model must output.\n\n\
        Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \n\
        which ensures the model will match your supplied JSON schema. Learn more in\
        \ the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe\
        \ default format is `{ \"type\": \"text\" }` with no additional options.\n\
        \n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\"\
        : \"json_object\" }` enables the older JSON mode, which\nensures the message\
        \ the model generates is valid JSON. Using `json_schema`\nis preferred for\
        \ models that support it.\n"
      oneOf:
      - $ref: '#/components/schemas/ResponseFormatText'
      - $ref: '#/components/schemas/TextResponseFormatJsonSchema'
      - $ref: '#/components/schemas/ResponseFormatJsonObject'
    TextResponseFormatJsonSchema:
      description: 'JSON Schema response format. Used to generate structured JSON
        responses.

        Learn more about [Structured Outputs](/docs/guides/structured-outputs).

        '
      properties:
        description:
          description: 'A description of what the response format is for, used by
            the model to

            determine how to respond in the format.

            '
          type: string
        name:
          description: 'The name of the response format. Must be a-z, A-Z, 0-9, or
            contain

            underscores and dashes, with a maximum length of 64.

            '
          type: string
        schema:
          $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
        strict:
          default: false
          description: 'Whether to enable strict schema adherence when generating
            the output.

            If set to true, the model will always follow the exact schema defined

            in the `schema` field. Only a subset of JSON Schema is supported when

            `strict` is `true`. To learn more, read the [Structured Outputs

            guide](/docs/guides/structured-outputs).

            '
          nullable: true
          type: boolean
        type:
          description: The type of response format being defined. Always `json_schema`.
          enum:
          - json_schema
          type: string
          x-stainless-const: true
      required:
      - type
      - schema
      - name
      title: JSON schema
      type: object
    ThreadObject:
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread`.
          enum:
          - thread
          type: string
          x-stainless-const: true
        tool_resources:
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: 'A list of [file](/docs/api-reference/files) IDs made
                    available to the `code_interpreter` tool. There can be a maximum
                    of 20 files associated with the tool.

                    '
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: 'The [vector store](/docs/api-reference/vector-stores/object)
                    attached to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
      required:
      - id
      - object
      - created_at
      - tool_resources
      - metadata
      title: Thread
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread\",\n  \"\
          created_at\": 1698107661,\n  \"metadata\": {}\n}\n"
        name: The thread object
    ThreadStreamEvent:
      oneOf:
      - description: Occurs when a new [thread](/docs/api-reference/threads/object)
          is created.
        properties:
          data:
            $ref: '#/components/schemas/ThreadObject'
          enabled:
            description: Whether to enable input audio transcription.
            type: boolean
          event:
            enum:
            - thread.created
            type: string
            x-stainless-const: true
        required:
        - event
        - data
        type: object
        x-oaiMeta:
          dataDescription: '`data` is a [thread](/docs/api-reference/threads/object)'
    ToggleCertificatesRequest:
      properties:
        certificate_ids:
          items:
            example: cert_abc
            type: string
          maxItems: 10
          minItems: 1
          type: array
      required:
      - certificate_ids
      type: object
    Tool:
      description: 'A tool that can be used to generate a response.

        '
      discriminator:
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/FunctionTool'
      - $ref: '#/components/schemas/FileSearchTool'
      - $ref: '#/components/schemas/WebSearchPreviewTool'
      - $ref: '#/components/schemas/ComputerUsePreviewTool'
      - $ref: '#/components/schemas/MCPTool'
      - $ref: '#/components/schemas/CodeInterpreterTool'
      - $ref: '#/components/schemas/ImageGenTool'
      - $ref: '#/components/schemas/LocalShellTool'
    ToolChoiceFunction:
      description: 'Use this option to force the model to call a specific function.

        '
      properties:
        name:
          description: The name of the function to call.
          type: string
        type:
          description: For function calling, the type is always `function`.
          enum:
          - function
          type: string
          x-stainless-const: true
      required:
      - type
      - name
      title: Function tool
      type: object
    ToolChoiceMCP:
      description: 'Use this option to force the model to call a specific tool on
        a remote MCP server.

        '
      properties:
        name:
          description: 'The name of the tool to call on the server.

            '
          nullable: true
          type: string
        server_label:
          description: 'The label of the MCP server to use.

            '
          type: string
        type:
          description: For MCP tools, the type is always `mcp`.
          enum:
          - mcp
          type: string
          x-stainless-const: true
      required:
      - type
      - server_label
      title: MCP tool
      type: object
    ToolChoiceOptions:
      description: 'Controls which (if any) tool is called by the model.


        `none` means the model will not call any tool and instead generates a message.


        `auto` means the model can pick between generating a message or calling one
        or

        more tools.


        `required` means the model must call one or more tools.

        '
      enum:
      - none
      - auto
      - required
      title: Tool choice mode
      type: string
    ToolChoiceTypes:
      description: 'Indicates that the model should use a built-in tool to generate
        a response.

        [Learn more about built-in tools](/docs/guides/tools).

        '
      properties:
        type:
          description: 'The type of hosted tool the model should to use. Learn more
            about

            [built-in tools](/docs/guides/tools).


            Allowed values are:

            - `file_search`

            - `web_search_preview`

            - `computer_use_preview`

            - `code_interpreter`

            - `image_generation`

            '
          enum:
          - file_search
          - web_search_preview
          - computer_use_preview
          - web_search_preview_2025_03_11
          - image_generation
          - code_interpreter
          type: string
      required:
      - type
      title: Hosted tool
      type: object
    TopLogProb:
      description: The top log probability of a token.
      properties:
        bytes:
          items:
            format: int64
            type: integer
          type: array
        logprob:
          type: number
        token:
          type: string
      required:
      - token
      - logprob
      - bytes
      title: Top log probability
      type: object
    TranscriptTextDeltaEvent:
      description: Emitted when there is an additional text delta. This is also the
        first event emitted when the transcription starts. Only emitted when you [create
        a transcription](/docs/api-reference/audio/create-transcription) with the
        `Stream` parameter set to `true`.
      properties:
        delta:
          description: 'The text delta that was additionally transcribed.

            '
          type: string
        logprobs:
          description: 'The log probabilities of the delta. Only included if you [create
            a transcription](/docs/api-reference/audio/create-transcription) with
            the `include[]` parameter set to `logprobs`.

            '
          items:
            properties:
              bytes:
                description: 'The bytes that were used to generate the log probability.

                  '
                items:
                  format: int64
                  type: integer
                type: array
              logprob:
                description: 'The log probability of the token.

                  '
                type: number
              token:
                description: 'The token that was used to generate the log probability.

                  '
                type: string
            type: object
          type: array
        type:
          description: 'The type of the event. Always `transcript.text.delta`.

            '
          enum:
          - transcript.text.delta
          type: string
          x-stainless-const: true
      required:
      - type
      - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"transcript.text.delta\",\n  \"delta\": \" wonderful\"\
          \n}\n"
        group: transcript
        name: Stream Event (transcript.text.delta)
    TranscriptTextDoneEvent:
      description: Emitted when the transcription is complete. Contains the complete
        transcription text. Only emitted when you [create a transcription](/docs/api-reference/audio/create-transcription)
        with the `Stream` parameter set to `true`.
      properties:
        logprobs:
          description: 'The log probabilities of the individual tokens in the transcription.
            Only included if you [create a transcription](/docs/api-reference/audio/create-transcription)
            with the `include[]` parameter set to `logprobs`.

            '
          items:
            properties:
              bytes:
                description: 'The bytes that were used to generate the log probability.

                  '
                items:
                  format: int64
                  type: integer
                type: array
              logprob:
                description: 'The log probability of the token.

                  '
                type: number
              token:
                description: 'The token that was used to generate the log probability.

                  '
                type: string
            type: object
          type: array
        text:
          description: 'The text that was transcribed.

            '
          type: string
        type:
          description: 'The type of the event. Always `transcript.text.done`.

            '
          enum:
          - transcript.text.done
          type: string
          x-stainless-const: true
        usage:
          $ref: '#/components/schemas/TranscriptTextUsageTokens'
      required:
      - type
      - text
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"transcript.text.done\",\n  \"text\": \"I see skies\
          \ of blue and clouds of white, the bright blessed days, the dark sacred\
          \ nights, and I think to myself, what a wonderful world.\",\n  \"usage\"\
          : {\n    \"type\": \"tokens\",\n    \"input_tokens\": 14,\n    \"input_token_details\"\
          : {\n      \"text_tokens\": 10,\n      \"audio_tokens\": 4\n    },\n   \
          \ \"output_tokens\": 31,\n    \"total_tokens\": 45\n  }\n}\n"
        group: transcript
        name: Stream Event (transcript.text.done)
    TranscriptTextUsageDuration:
      description: Usage statistics for models billed by audio input duration.
      properties:
        duration:
          description: Duration of the input audio in seconds.
          type: number
        type:
          description: The type of the usage object. Always `duration` for this variant.
          enum:
          - duration
          type: string
          x-stainless-const: true
      required:
      - type
      - duration
      title: Duration Usage
      type: object
    TranscriptTextUsageTokens:
      description: Usage statistics for models billed by token usage.
      properties:
        input_token_details:
          description: Details about the input tokens billed for this request.
          properties:
            audio_tokens:
              description: Number of audio tokens billed for this request.
              format: int64
              type: integer
            text_tokens:
              description: Number of text tokens billed for this request.
              format: int64
              type: integer
          type: object
        input_tokens:
          description: Number of input tokens billed for this request.
          format: int64
          type: integer
        output_tokens:
          description: Number of output tokens generated.
          format: int64
          type: integer
        total_tokens:
          description: Total number of tokens used (input + output).
          format: int64
          type: integer
        type:
          description: The type of the usage object. Always `tokens` for this variant.
          enum:
          - tokens
          type: string
          x-stainless-const: true
      required:
      - type
      - input_tokens
      - output_tokens
      - total_tokens
      title: Token Usage
      type: object
    TranscriptionChunkingStrategy:
      description: 'Controls how the audio is cut into chunks. When set to `"auto"`,
        the

        server first normalizes loudness and then uses voice activity detection (VAD)
        to

        choose boundaries. `server_vad` object can be provided to tweak VAD detection

        parameters manually. If unset, the audio is transcribed as a single block. '
      oneOf:
      - default:
        - auto
        description: 'Automatically set chunking parameters based on the audio. Must
          be set to `"auto"`.

          '
        enum:
        - auto
        type: string
        x-stainless-const: true
      - $ref: '#/components/schemas/VadConfig'
      type: object
    TranscriptionInclude:
      default: []
      enum:
      - logprobs
      type: string
    TranscriptionSegment:
      properties:
        avg_logprob:
          description: Average logprob of the segment. If the value is lower than
            -1, consider the logprobs failed.
          format: float
          type: number
        compression_ratio:
          description: Compression ratio of the segment. If the value is greater than
            2.4, consider the compression failed.
          format: float
          type: number
        end:
          description: End time of the segment in seconds.
          format: float
          type: number
        id:
          description: Unique identifier of the segment.
          format: int64
          type: integer
        no_speech_prob:
          description: Probability of no speech in the segment. If the value is higher
            than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
          format: float
          type: number
        seek:
          description: Seek offset of the segment.
          format: int64
          type: integer
        start:
          description: Start time of the segment in seconds.
          format: float
          type: number
        temperature:
          description: Temperature parameter used for generating the segment.
          format: float
          type: number
        text:
          description: Text content of the segment.
          type: string
        tokens:
          description: Array of token IDs for the text content.
          items:
            format: int64
            type: integer
          type: array
      required:
      - id
      - seek
      - start
      - end
      - text
      - tokens
      - temperature
      - avg_logprob
      - compression_ratio
      - no_speech_prob
      type: object
    TranscriptionWord:
      properties:
        end:
          description: End time of the word in seconds.
          format: float
          type: number
        start:
          description: Start time of the word in seconds.
          format: float
          type: number
        word:
          description: The text content of the word.
          type: string
      required:
      - word
      - start
      - end
      type: object
    TruncationObject:
      description: Controls for how a thread will be truncated prior to the run. Use
        this to control the intial context window of the run.
      properties:
        last_messages:
          description: The number of most recent messages from the thread when constructing
            the context for the run.
          format: int64
          minimum: 1
          nullable: true
          type: integer
        type:
          description: The truncation strategy to use for the thread. The default
            is `auto`. If set to `last_messages`, the thread will be truncated to
            the n most recent messages in the thread. When set to `auto`, messages
            in the middle of the thread will be dropped to fit the context length
            of the model, `max_prompt_tokens`.
          enum:
          - auto
          - last_messages
          type: string
      required:
      - type
      title: Thread Truncation Controls
      type: object
    Type:
      description: 'An action to type in text.

        '
      properties:
        text:
          description: 'The text to type.

            '
          type: string
        type:
          default: type
          description: "Specifies the event type. For a type action, this property\
            \ is \nalways set to `type`.\n"
          enum:
          - type
          type: string
          x-stainless-const: true
      required:
      - type
      - text
      title: Type
      type: object
    UpdateVectorStoreFileAttributesRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
      - attributes
      type: object
      x-oaiMeta:
        name: Update vector store file attributes request
    UpdateVectorStoreRequest:
      additionalProperties: false
      properties:
        expires_after:
          allOf:
          - $ref: '#/components/schemas/VectorStoreExpirationAfter'
          - nullable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          nullable: true
          type: string
      type: object
    Upload:
      description: 'The Upload object can accept byte chunks in the form of Parts.

        '
      properties:
        bytes:
          description: The intended number of bytes to be uploaded.
          format: int64
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the Upload was created.
          format: int64
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the Upload will expire.
          format: int64
          type: integer
        file:
          allOf:
          - $ref: '#/components/schemas/OpenAIFile'
          - description: The ready File object after the Upload is completed.
            nullable: true
        filename:
          description: The name of the file to be uploaded.
          type: string
        id:
          description: The Upload unique identifier, which can be referenced in API
            endpoints.
          type: string
        object:
          description: The object type, which is always "upload".
          enum:
          - upload
          type: string
          x-stainless-const: true
        purpose:
          description: The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose)
            for acceptable values.
          type: string
        status:
          description: The status of the Upload.
          enum:
          - pending
          - completed
          - cancelled
          - expired
          type: string
      required:
      - bytes
      - created_at
      - expires_at
      - filename
      - id
      - purpose
      - status
      title: Upload
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"upload_abc123\",\n  \"object\": \"upload\",\n  \"\
          bytes\": 2147483648,\n  \"created_at\": 1719184911,\n  \"filename\": \"\
          training_examples.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\"\
          : \"completed\",\n  \"expires_at\": 1719127296,\n  \"file\": {\n    \"id\"\
          : \"file-xyz321\",\n    \"object\": \"file\",\n    \"bytes\": 2147483648,\n\
          \    \"created_at\": 1719186911,\n    \"filename\": \"training_examples.jsonl\"\
          ,\n    \"purpose\": \"fine-tune\",\n  }\n}\n"
        name: The upload object
    UploadCertificateRequest:
      properties:
        content:
          description: The certificate content in PEM format
          type: string
        name:
          description: An optional name for the certificate
          type: string
      required:
      - content
      type: object
    UploadPart:
      description: 'The upload Part represents a chunk of bytes we can add to an Upload
        object.

        '
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the Part was created.
          format: int64
          type: integer
        id:
          description: The upload Part unique identifier, which can be referenced
            in API endpoints.
          type: string
        object:
          description: The object type, which is always `upload.part`.
          enum:
          - upload.part
          type: string
          x-stainless-const: true
        upload_id:
          description: The ID of the Upload object that this Part was added to.
          type: string
      required:
      - created_at
      - id
      - object
      - upload_id
      title: UploadPart
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"part_def456\",\n    \"object\": \"upload.part\"\
          ,\n    \"created_at\": 1719186911,\n    \"upload_id\": \"upload_abc123\"\
          \n}\n"
        name: The upload part object
    UrlCitationBody:
      description: A citation for a web resource used to generate a model response.
      properties:
        end_index:
          description: The index of the last character of the URL citation in the
            message.
          format: int64
          type: integer
        start_index:
          description: The index of the first character of the URL citation in the
            message.
          format: int64
          type: integer
        title:
          description: The title of the web resource.
          type: string
        type:
          default: url_citation
          description: The type of the URL citation. Always `url_citation`.
          enum:
          - url_citation
          type: string
          x-stainless-const: true
        url:
          description: The URL of the web resource.
          type: string
      required:
      - type
      - url
      - start_index
      - end_index
      - title
      title: URL citation
      type: object
    UsageAudioSpeechesResult:
      description: The aggregated audio speeches usage details of the specific time
        bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        characters:
          description: The number of characters processed.
          format: int64
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.audio_speeches.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - characters
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.audio_speeches.result\"\
          ,\n    \"characters\": 45,\n    \"num_model_requests\": 1,\n    \"project_id\"\
          : \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"\
          key_abc\",\n    \"model\": \"tts-1\"\n}\n"
        name: Audio speeches usage object
    UsageAudioTranscriptionsResult:
      description: The aggregated audio transcriptions usage details of the specific
        time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.audio_transcriptions.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        seconds:
          description: The number of seconds processed.
          format: int64
          type: integer
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - seconds
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.audio_transcriptions.result\"\
          ,\n    \"seconds\": 10,\n    \"num_model_requests\": 1,\n    \"project_id\"\
          : \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"\
          key_abc\",\n    \"model\": \"tts-1\"\n}\n"
        name: Audio transcriptions usage object
    UsageCodeInterpreterSessionsResult:
      description: The aggregated code interpreter sessions usage details of the specific
        time bucket.
      properties:
        num_sessions:
          description: The number of code interpreter sessions.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.code_interpreter_sessions.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - sessions
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.code_interpreter_sessions.result\"\
          ,\n    \"num_sessions\": 1,\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Code interpreter sessions usage object
    UsageCompletionsResult:
      description: The aggregated completions usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        batch:
          description: When `group_by=batch`, this field tells whether the grouped
            usage result is batch or not.
          nullable: true
          type: boolean
        input_audio_tokens:
          description: The aggregated number of audio input tokens used, including
            cached tokens.
          format: int64
          type: integer
        input_cached_tokens:
          description: The aggregated number of text input tokens that has been cached
            from previous requests. For customers subscribe to scale tier, this includes
            scale tier tokens.
          format: int64
          type: integer
        input_tokens:
          description: The aggregated number of text input tokens used, including
            cached tokens. For customers subscribe to scale tier, this includes scale
            tier tokens.
          format: int64
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.completions.result
          type: string
          x-stainless-const: true
        output_audio_tokens:
          description: The aggregated number of audio output tokens used.
          format: int64
          type: integer
        output_tokens:
          description: The aggregated number of text output tokens used. For customers
            subscribe to scale tier, this includes scale tier tokens.
          format: int64
          type: integer
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - input_tokens
      - output_tokens
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.completions.result\",\n\
          \    \"input_tokens\": 5000,\n    \"output_tokens\": 1000,\n    \"input_cached_tokens\"\
          : 4000,\n    \"input_audio_tokens\": 300,\n    \"output_audio_tokens\":\
          \ 200,\n    \"num_model_requests\": 5,\n    \"project_id\": \"proj_abc\"\
          ,\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n  \
          \  \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"batch\": false\n}\n"
        name: Completions usage object
    UsageEmbeddingsResult:
      description: The aggregated embeddings usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        input_tokens:
          description: The aggregated number of input tokens used.
          format: int64
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.embeddings.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - input_tokens
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.embeddings.result\",\n \
          \   \"input_tokens\": 20,\n    \"num_model_requests\": 2,\n    \"project_id\"\
          : \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"\
          key_abc\",\n    \"model\": \"text-embedding-ada-002-v2\"\n}\n"
        name: Embeddings usage object
    UsageImagesResult:
      description: The aggregated images usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        images:
          description: The number of images processed.
          format: int64
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.images.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        size:
          description: When `group_by=size`, this field provides the image size of
            the grouped usage result.
          nullable: true
          type: string
        source:
          description: When `group_by=source`, this field provides the source of the
            grouped usage result, possible values are `image.generation`, `image.edit`,
            `image.variation`.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - images
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.images.result\",\n    \"\
          images\": 2,\n    \"num_model_requests\": 2,\n    \"size\": \"1024x1024\"\
          ,\n    \"source\": \"image.generation\",\n    \"project_id\": \"proj_abc\"\
          ,\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n  \
          \  \"model\": \"dall-e-3\"\n}\n"
        name: Images usage object
    UsageModerationsResult:
      description: The aggregated moderations usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key
            ID of the grouped usage result.
          nullable: true
          type: string
        input_tokens:
          description: The aggregated number of input tokens used.
          format: int64
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of
            the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          format: int64
          type: integer
        object:
          enum:
          - organization.usage.moderations.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of
            the grouped usage result.
          nullable: true
          type: string
      required:
      - object
      - input_tokens
      - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.moderations.result\",\n\
          \    \"input_tokens\": 20,\n    \"num_model_requests\": 2,\n    \"project_id\"\
          : \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"\
          key_abc\",\n    \"model\": \"text-moderation\"\n}\n"
        name: Moderations usage object
    UsageResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UsageTimeBucket'
          type: array
        has_more:
          type: boolean
        next_page:
          type: string
        object:
          enum:
          - page
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      - next_page
      type: object
    UsageTimeBucket:
      properties:
        end_time:
          format: int64
          type: integer
        object:
          enum:
          - bucket
          type: string
          x-stainless-const: true
        result:
          items:
            oneOf:
            - $ref: '#/components/schemas/UsageCompletionsResult'
            - $ref: '#/components/schemas/UsageEmbeddingsResult'
            - $ref: '#/components/schemas/UsageModerationsResult'
            - $ref: '#/components/schemas/UsageImagesResult'
            - $ref: '#/components/schemas/UsageAudioSpeechesResult'
            - $ref: '#/components/schemas/UsageAudioTranscriptionsResult'
            - $ref: '#/components/schemas/UsageVectorStoresResult'
            - $ref: '#/components/schemas/UsageCodeInterpreterSessionsResult'
            - $ref: '#/components/schemas/CostsResult'
          type: array
        start_time:
          format: int64
          type: integer
      required:
      - object
      - start_time
      - end_time
      - result
      type: object
    UsageVectorStoresResult:
      description: The aggregated vector stores usage details of the specific time
        bucket.
      properties:
        object:
          enum:
          - organization.usage.vector_stores.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project
            ID of the grouped usage result.
          nullable: true
          type: string
        usage_bytes:
          description: The vector stores usage in bytes.
          format: int64
          type: integer
      required:
      - object
      - usage_bytes
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.vector_stores.result\",\n\
          \    \"usage_bytes\": 1024,\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Vector stores usage object
    User:
      description: Represents an individual `user` within an organization.
      properties:
        added_at:
          description: The Unix timestamp (in seconds) of when the user was added.
          format: int64
          type: integer
        email:
          description: The email address of the user
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the user
          type: string
        object:
          description: The object type, which is always `organization.user`
          enum:
          - organization.user
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
          type: string
      required:
      - object
      - id
      - name
      - email
      - role
      - added_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\"\
          ,\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n\
          \    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        name: The user object
    UserDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
          - organization.user.deleted
          type: string
          x-stainless-const: true
      required:
      - object
      - id
      - deleted
      type: object
    UserListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
          - list
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
      type: object
    UserRoleUpdateRequest:
      properties:
        role:
          description: '`owner` or `reader`'
          enum:
          - owner
          - reader
          type: string
      required:
      - role
      type: object
    VadConfig:
      additionalProperties: false
      properties:
        prefix_padding_ms:
          default: 300
          description: "Amount of audio to include before the VAD detected speech\
            \ (in \nmilliseconds).\n"
          format: int64
          type: integer
        silence_duration_ms:
          default: 200
          description: "Duration of silence to detect speech stop (in milliseconds).\n\
            With shorter values the model will respond more quickly, \nbut may jump\
            \ in on short pauses from the user.\n"
          format: int64
          type: integer
        threshold:
          default: 0.5
          description: "Sensitivity threshold (0.0 to 1.0) for voice activity detection.\
            \ A \nhigher threshold will require louder audio to activate the model,\
            \ and \nthus might perform better in noisy environments.\n"
          type: number
        type:
          description: Must be set to `server_vad` to enable manual chunking using
            server side VAD.
          enum:
          - server_vad
          type: string
      required:
      - type
      type: object
    ValidateGraderRequest:
      properties:
        grader:
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
          type: object
      required:
      - grader
      title: ValidateGraderRequest
      type: object
    ValidateGraderResponse:
      properties:
        grader:
          description: The grader used for the fine-tuning job.
          oneOf:
          - $ref: '#/components/schemas/GraderStringCheck'
          - $ref: '#/components/schemas/GraderTextSimilarity'
          - $ref: '#/components/schemas/GraderPython'
          - $ref: '#/components/schemas/GraderScoreModel'
          - $ref: '#/components/schemas/GraderMulti'
          type: object
      title: ValidateGraderResponse
      type: object
    VectorStoreExpirationAfter:
      description: The expiration policy for a vector store.
      properties:
        anchor:
          description: 'Anchor timestamp after which the expiration policy applies.
            Supported anchors: `last_active_at`.'
          enum:
          - last_active_at
          type: string
          x-stainless-const: true
        days:
          description: The number of days after the anchor time that the vector store
            will expire.
          format: int64
          maximum: 365
          minimum: 1
          type: integer
      required:
      - anchor
      - days
      title: Vector store expiration policy
      type: object
    VectorStoreFileAttributes:
      additionalProperties:
        oneOf:
        - maxLength: 512
          type: string
        - type: number
        - type: boolean
      description: "Set of 16 key-value pairs that can be attached to an object. This\
        \ can be \nuseful for storing additional information about the object in a\
        \ structured \nformat, and querying for objects via API or the dashboard.\
        \ Keys are strings \nwith a maximum length of 64 characters. Values are strings\
        \ with a maximum \nlength of 512 characters, booleans, or numbers.\n"
      maxProperties: 16
      nullable: true
      propertyNames:
        maxLength: 64
        type: string
      type: object
      x-oaiTypeLabel: map
    VectorStoreFileBatchObject:
      description: A batch of files attached to a vector store.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store files
            batch was created.
          format: int64
          type: integer
        file_counts:
          properties:
            cancelled:
              description: The number of files that where cancelled.
              format: int64
              type: integer
            completed:
              description: The number of files that have been processed.
              format: int64
              type: integer
            failed:
              description: The number of files that have failed to process.
              format: int64
              type: integer
            in_progress:
              description: The number of files that are currently being processed.
              format: int64
              type: integer
            total:
              description: The total number of files.
              format: int64
              type: integer
          required:
          - in_progress
          - completed
          - cancelled
          - failed
          - total
          type: object
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file_batch`.
          enum:
          - vector_store.files_batch
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store files batch, which can be either
            `in_progress`, `completed`, `cancelled` or `failed`.
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
          type: string
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object)
            that the [File](/docs/api-reference/files) is attached to.
          type: string
      required:
      - id
      - object
      - created_at
      - vector_store_id
      - status
      - file_counts
      title: Vector store file batch
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"vsfb_123\",\n  \"object\": \"vector_store.files_batch\"\
          ,\n  \"created_at\": 1698107661,\n  \"vector_store_id\": \"vs_abc123\",\n\
          \  \"status\": \"completed\",\n  \"file_counts\": {\n    \"in_progress\"\
          : 0,\n    \"completed\": 100,\n    \"failed\": 0,\n    \"cancelled\": 0,\n\
          \    \"total\": 100\n  }\n}\n"
        name: The vector store files batch object
    VectorStoreFileContentResponse:
      description: Represents the parsed content of a vector store file.
      properties:
        data:
          description: Parsed content of the file.
          items:
            properties:
              text:
                description: The text content
                type: string
              type:
                description: The content type (currently only `"text"`)
                type: string
            type: object
          type: array
        has_more:
          description: Indicates if there are more content pages to fetch.
          type: boolean
        next_page:
          description: The token for the next page, if any.
          nullable: true
          type: string
        object:
          description: The object type, which is always `vector_store.file_content.page`
          enum:
          - vector_store.file_content.page
          type: string
          x-stainless-const: true
      required:
      - object
      - data
      - has_more
      - next_page
      type: object
    VectorStoreFileObject:
      description: A list of files attached to a vector store.
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          description: The strategy used to chunk the file.
          oneOf:
          - $ref: '#/components/schemas/StaticChunkingStrategyResponseParam'
          - $ref: '#/components/schemas/OtherChunkingStrategyResponseParam'
          type: object
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store file
            was created.
          format: int64
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        last_error:
          description: The last error associated with this vector store file. Will
            be `null` if there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - server_error
              - unsupported_file
              - invalid_file
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
          - code
          - message
          type: object
        object:
          description: The object type, which is always `vector_store.file`.
          enum:
          - vector_store.file
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store file, which can be either `in_progress`,
            `completed`, `cancelled`, or `failed`. The status `completed` indicates
            that the vector store file is ready for use.
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
          type: string
        usage_bytes:
          description: The total vector store usage in bytes. Note that this may be
            different from the original file size.
          format: int64
          type: integer
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object)
            that the [File](/docs/api-reference/files) is attached to.
          type: string
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - vector_store_id
      - status
      - last_error
      title: Vector store files
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"vector_store.file\"\
          ,\n  \"usage_bytes\": 1234,\n  \"created_at\": 1698107661,\n  \"vector_store_id\"\
          : \"vs_abc123\",\n  \"status\": \"completed\",\n  \"last_error\": null,\n\
          \  \"chunking_strategy\": {\n    \"type\": \"static\",\n    \"static\":\
          \ {\n      \"max_chunk_size_tokens\": 800,\n      \"chunk_overlap_tokens\"\
          : 400\n    }\n  }\n}\n"
        name: The vector store file object
    VectorStoreObject:
      description: A vector store is a collection of processed files can be used by
        the `file_search` tool.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            created.
          format: int64
          type: integer
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        expires_at:
          description: The Unix timestamp (in seconds) for when the vector store will
            expire.
          format: int64
          nullable: true
          type: integer
        file_counts:
          properties:
            cancelled:
              description: The number of files that were cancelled.
              format: int64
              type: integer
            completed:
              description: The number of files that have been successfully processed.
              format: int64
              type: integer
            failed:
              description: The number of files that have failed to process.
              format: int64
              type: integer
            in_progress:
              description: The number of files that are currently being processed.
              format: int64
              type: integer
            total:
              description: The total number of files.
              format: int64
              type: integer
          required:
          - in_progress
          - completed
          - failed
          - cancelled
          - total
          type: object
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        last_active_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            last active.
          format: int64
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          type: string
        object:
          description: The object type, which is always `vector_store`.
          enum:
          - vector_store
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store, which can be either `expired`,
            `in_progress`, or `completed`. A status of `completed` indicates that
            the vector store is ready for use.
          enum:
          - expired
          - in_progress
          - completed
          type: string
        usage_bytes:
          description: The total number of bytes used by the files in the vector store.
          format: int64
          type: integer
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - status
      - last_active_at
      - name
      - file_counts
      - metadata
      title: Vector store
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"vs_123\",\n  \"object\": \"vector_store\",\n  \"\
          created_at\": 1698107661,\n  \"usage_bytes\": 123456,\n  \"last_active_at\"\
          : 1698107661,\n  \"name\": \"my_vector_store\",\n  \"status\": \"completed\"\
          ,\n  \"file_counts\": {\n    \"in_progress\": 0,\n    \"completed\": 100,\n\
          \    \"cancelled\": 0,\n    \"failed\": 0,\n    \"total\": 100\n  },\n \
          \ \"last_used_at\": 1698107661\n}\n"
        name: The vector store object
    VectorStoreSearchRequest:
      additionalProperties: false
      properties:
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
          - $ref: '#/components/schemas/ComparisonFilter'
          - $ref: '#/components/schemas/CompoundFilter'
        max_num_results:
          default: 10
          description: The maximum number of results to return. This number should
            be between 1 and 50 inclusive.
          format: int64
          maximum: 50
          minimum: 1
          type: integer
        query:
          description: A query string for a search
          oneOf:
          - type: string
          - items:
              description: A list of queries to search for.
              minItems: 1
              type: string
            type: array
        ranking_options:
          additionalProperties: false
          description: Ranking options for search.
          properties:
            ranker:
              default: auto
              enum:
              - auto
              - default-2024-11-15
              type: string
            score_threshold:
              default: 0
              maximum: 1
              minimum: 0
              type: number
          type: object
        rewrite_query:
          default: false
          description: Whether to rewrite the natural language query for vector search.
          type: boolean
      required:
      - query
      type: object
      x-oaiMeta:
        name: Vector store search request
    VectorStoreSearchResultContentObject:
      additionalProperties: false
      properties:
        text:
          description: The text content returned from search.
          type: string
        type:
          description: The type of content.
          enum:
          - text
          type: string
      required:
      - type
      - text
      type: object
      x-oaiMeta:
        name: Vector store search result content object
    VectorStoreSearchResultItem:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        content:
          description: Content chunks from the file.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultContentObject'
          type: array
        file_id:
          description: The ID of the vector store file.
          type: string
        filename:
          description: The name of the vector store file.
          type: string
        score:
          description: The similarity score for the result.
          maximum: 1
          minimum: 0
          type: number
      required:
      - file_id
      - filename
      - score
      - attributes
      - content
      type: object
      x-oaiMeta:
        name: Vector store search result item
    VectorStoreSearchResultsPage:
      additionalProperties: false
      properties:
        data:
          description: The list of search result items.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultItem'
          type: array
        has_more:
          description: Indicates if there are more results to fetch.
          type: boolean
        next_page:
          description: The token for the next page, if any.
          nullable: true
          type: string
        object:
          description: The object type, which is always `vector_store.search_results.page`
          enum:
          - vector_store.search_results.page
          type: string
          x-stainless-const: true
        search_query:
          items:
            description: The query used for this search.
            minItems: 1
            type: string
          type: array
      required:
      - object
      - search_query
      - data
      - has_more
      - next_page
      type: object
      x-oaiMeta:
        name: Vector store search results page
    VoiceIdsShared:
      anyOf:
      - type: string
      - enum:
        - alloy
        - ash
        - ballad
        - coral
        - echo
        - fable
        - onyx
        - nova
        - sage
        - shimmer
        - verse
        type: string
      example: ash
    Wait:
      description: 'A wait action.

        '
      properties:
        type:
          default: wait
          description: "Specifies the event type. For a wait action, this property\
            \ is \nalways set to `wait`.\n"
          enum:
          - wait
          type: string
          x-stainless-const: true
      required:
      - type
      title: Wait
      type: object
    WebSearchActionFind:
      description: 'Action type "find": Searches for a pattern within a loaded page.

        '
      properties:
        pattern:
          description: 'The pattern or text to search for within the page.

            '
          type: string
        type:
          description: 'The action type.

            '
          enum:
          - find
          type: string
          x-stainless-const: true
        url:
          description: 'The URL of the page searched for the pattern.

            '
          format: uri
          type: string
      required:
      - type
      - url
      - pattern
      title: Find action
      type: object
    WebSearchActionOpenPage:
      description: 'Action type "open_page" - Opens a specific URL from search results.

        '
      properties:
        type:
          description: 'The action type.

            '
          enum:
          - open_page
          type: string
          x-stainless-const: true
        url:
          description: 'The URL opened by the model.

            '
          format: uri
          type: string
      required:
      - type
      - url
      title: Open page action
      type: object
    WebSearchActionSearch:
      description: 'Action type "search" - Performs a web search query.

        '
      properties:
        query:
          description: 'The search query.

            '
          type: string
        type:
          description: 'The action type.

            '
          enum:
          - search
          type: string
          x-stainless-const: true
      required:
      - type
      - query
      title: Search action
      type: object
    WebSearchContextSize:
      default: medium
      description: "High level guidance for the amount of context window space to\
        \ use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the\
        \ default.\n"
      enum:
      - low
      - medium
      - high
      type: string
    WebSearchLocation:
      description: Approximate location parameters for the search.
      properties:
        city:
          description: 'Free text input for the city of the user, e.g. `San Francisco`.

            '
          type: string
        country:
          description: "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1)\
            \ of the user,\ne.g. `US`.\n"
          type: string
        region:
          description: 'Free text input for the region of the user, e.g. `California`.

            '
          type: string
        timezone:
          description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones)\
            \ \nof the user, e.g. `America/Los_Angeles`.\n"
          type: string
      title: Web search location
      type: object
    WebSearchPreviewTool:
      description: This tool searches the web for relevant results to use in a response.
        Learn more about the [web search tool](https://platform.openai.com/docs/guides/tools-web-search).
      properties:
        search_context_size:
          description: High level guidance for the amount of context window space
            to use for the search. One of `low`, `medium`, or `high`. `medium` is
            the default.
          enum:
          - low
          - medium
          - high
          type: string
        type:
          default: web_search_preview
          description: The type of the web search tool. One of `web_search_preview`
            or `web_search_preview_2025_03_11`.
          enum:
          - web_search_preview
          - web_search_preview_2025_03_11
          type: string
          x-stainless-const: true
        user_location:
          $ref: '#/components/schemas/ApproximateLocation'
          description: The user's location.
          nullable: true
      required:
      - type
      title: Web search preview
      type: object
    WebSearchToolCall:
      description: "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search)\
        \ for more information.\n"
      properties:
        action:
          description: 'An object describing the specific action taken in this web
            search call.

            Includes details on how the model used the web (search, open_page, find).

            '
          oneOf:
          - $ref: '#/components/schemas/WebSearchActionSearch'
          - $ref: '#/components/schemas/WebSearchActionOpenPage'
          - $ref: '#/components/schemas/WebSearchActionFind'
          type: object
        id:
          description: 'The unique ID of the web search tool call.

            '
          type: string
        status:
          description: 'The status of the web search tool call.

            '
          enum:
          - in_progress
          - searching
          - completed
          - failed
          type: string
        type:
          description: 'The type of the web search tool call. Always `web_search_call`.

            '
          enum:
          - web_search_call
          type: string
          x-stainless-const: true
      required:
      - id
      - type
      - status
      - action
      title: Web search tool call
      type: object
    WebhookBatchCancelled:
      description: 'Sent when a batch API request has been cancelled.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the batch API request
            was cancelled.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the batch API request.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `batch.cancelled`.

            '
          enum:
          - batch.cancelled
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: batch.cancelled
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"batch.cancelled\",\n\
          \  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"batch_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: batch.cancelled
    WebhookBatchCompleted:
      description: 'Sent when a batch API request has been completed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the batch API request
            was completed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the batch API request.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `batch.completed`.

            '
          enum:
          - batch.completed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: batch.completed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"batch.completed\",\n\
          \  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"batch_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: batch.completed
    WebhookBatchExpired:
      description: 'Sent when a batch API request has expired.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the batch API request
            expired.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the batch API request.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `batch.expired`.

            '
          enum:
          - batch.expired
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: batch.expired
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"batch.expired\",\n \
          \ \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"batch_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: batch.expired
    WebhookBatchFailed:
      description: 'Sent when a batch API request has failed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the batch API request
            failed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the batch API request.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `batch.failed`.

            '
          enum:
          - batch.failed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: batch.failed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"batch.failed\",\n  \"\
          created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"batch_abc123\"\n\
          \  }\n}\n"
        group: webhook-events
        name: batch.failed
    WebhookEvalRunCanceled:
      description: 'Sent when an eval run has been canceled.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the eval run was canceled.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the eval run.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `eval.run.canceled`.

            '
          enum:
          - eval.run.canceled
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: eval.run.canceled
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"eval.run.canceled\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"evalrun_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: eval.run.canceled
    WebhookEvalRunFailed:
      description: 'Sent when an eval run has failed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the eval run failed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the eval run.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `eval.run.failed`.

            '
          enum:
          - eval.run.failed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: eval.run.failed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"eval.run.failed\",\n\
          \  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"evalrun_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: eval.run.failed
    WebhookEvalRunSucceeded:
      description: 'Sent when an eval run has succeeded.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the eval run succeeded.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the eval run.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `eval.run.succeeded`.

            '
          enum:
          - eval.run.succeeded
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: eval.run.succeeded
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"eval.run.succeeded\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"evalrun_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: eval.run.succeeded
    WebhookFineTuningJobCancelled:
      description: 'Sent when a fine-tuning job has been cancelled.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            was cancelled.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the fine-tuning job.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `fine_tuning.job.cancelled`.

            '
          enum:
          - fine_tuning.job.cancelled
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: fine_tuning.job.cancelled
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"fine_tuning.job.cancelled\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"ftjob_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: fine_tuning.job.cancelled
    WebhookFineTuningJobFailed:
      description: 'Sent when a fine-tuning job has failed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            failed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the fine-tuning job.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `fine_tuning.job.failed`.

            '
          enum:
          - fine_tuning.job.failed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: fine_tuning.job.failed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"fine_tuning.job.failed\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"ftjob_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: fine_tuning.job.failed
    WebhookFineTuningJobSucceeded:
      description: 'Sent when a fine-tuning job has succeeded.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the fine-tuning job
            succeeded.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the fine-tuning job.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `fine_tuning.job.succeeded`.

            '
          enum:
          - fine_tuning.job.succeeded
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: fine_tuning.job.succeeded
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"fine_tuning.job.succeeded\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"ftjob_abc123\"\
          \n  }\n} \n"
        group: webhook-events
        name: fine_tuning.job.succeeded
    WebhookResponseCancelled:
      description: 'Sent when a background response has been cancelled.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the model response
            was cancelled.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the model response.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `response.cancelled`.

            '
          enum:
          - response.cancelled
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: response.cancelled
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"response.cancelled\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"resp_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: response.cancelled
    WebhookResponseCompleted:
      description: 'Sent when a background response has been completed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the model response
            was completed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the model response.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `response.completed`.

            '
          enum:
          - response.completed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: response.completed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"response.completed\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"resp_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: response.completed
    WebhookResponseFailed:
      description: 'Sent when a background response has failed.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the model response
            failed.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the model response.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `response.failed`.

            '
          enum:
          - response.failed
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: response.failed
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"response.failed\",\n\
          \  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"resp_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: response.failed
    WebhookResponseIncomplete:
      description: 'Sent when a background response has been interrupted.

        '
      properties:
        created_at:
          description: 'The Unix timestamp (in seconds) of when the model response
            was interrupted.

            '
          format: int64
          type: integer
        data:
          description: 'Event data payload.

            '
          properties:
            id:
              description: 'The unique ID of the model response.

                '
              type: string
          required:
          - id
          type: object
        id:
          description: 'The unique ID of the event.

            '
          type: string
        object:
          description: 'The object of the event. Always `event`.

            '
          enum:
          - event
          type: string
          x-stainless-const: true
        type:
          description: 'The type of the event. Always `response.incomplete`.

            '
          enum:
          - response.incomplete
          type: string
          x-stainless-const: true
      required:
      - created_at
      - id
      - data
      - type
      title: response.incomplete
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"evt_abc123\",\n  \"type\": \"response.incomplete\"\
          ,\n  \"created_at\": 1719168000,\n  \"data\": {\n    \"id\": \"resp_abc123\"\
          \n  }\n}\n"
        group: webhook-events
        name: response.incomplete
  securitySchemes:
    ApiKeyAuth:
      scheme: bearer
      type: http
info:
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference
    for more details.
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
  termsOfService: https://openai.com/policies/terms-of-use
  title: OpenAI API
  version: 2.3.0
openapi: 3.0.0
paths:
  /organization/admin_api_keys:
    get:
      description: Retrieve a paginated list of organization admin API keys.
      operationId: admin-api-keys-list
      parameters:
      - in: query
        name: after
        required: false
        schema:
          description: Return keys with IDs that come after this ID in the pagination
            order.
          nullable: true
          type: string
      - in: query
        name: order
        required: false
        schema:
          default: asc
          description: Order results by creation time, ascending or descending.
          enum:
          - asc
          - desc
          type: string
      - in: query
        name: limit
        required: false
        schema:
          default: 20
          description: Maximum number of keys to return.
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyList'
          description: A list of organization API keys.
      summary: List organization API keys
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/admin_api_keys?after=key_abc&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
            : \"organization.admin_api_key\",\n      \"id\": \"key_abc\",\n      \"\
            name\": \"Main Admin Key\",\n      \"redacted_value\": \"sk-admin...def\"\
            ,\n      \"created_at\": 1711471533,\n      \"last_used_at\": 1711471534,\n\
            \      \"owner\": {\n        \"type\": \"service_account\",\n        \"\
            object\": \"organization.service_account\",\n        \"id\": \"sa_456\"\
            ,\n        \"name\": \"My Service Account\",\n        \"created_at\":\
            \ 1711471533,\n        \"role\": \"member\"\n      }\n    }\n  ],\n  \"\
            first_id\": \"key_abc\",\n  \"last_id\": \"key_abc\",\n  \"has_more\"\
            : false\n}\n"
        group: administration
        name: List all organization and project API keys.
        returns: A list of admin and project API key objects.
    post:
      description: Create a new admin-level API key for the organization.
      operationId: admin-api-keys-create
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  example: New Admin Key
                  type: string
              required:
              - name
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApiKey'
          description: The newly created admin API key.
      summary: Create an organization admin API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/admin_api_keys\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"name\": \"New Admin Key\"\n\
              \  }'\n"
          response: "{\n  \"object\": \"organization.admin_api_key\",\n  \"id\": \"\
            key_xyz\",\n  \"name\": \"New Admin Key\",\n  \"redacted_value\": \"sk-admin...xyz\"\
            ,\n  \"created_at\": 1711471533,\n  \"last_used_at\": 1711471534,\n  \"\
            owner\": {\n    \"type\": \"user\",\n    \"object\": \"organization.user\"\
            ,\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"created_at\"\
            : 1711471533,\n    \"role\": \"owner\"\n  },\n  \"value\": \"sk-admin-1234abcd\"\
            \n}\n"
        group: administration
        name: Create admin API key
        returns: The created [AdminApiKey](/docs/api-reference/admin-api-keys/object)
          object.
  /organization/admin_api_keys/{key_id}:
    delete:
      description: Delete the specified admin API key.
      operationId: admin-api-keys-delete
      parameters:
      - in: path
        name: key_id
        required: true
        schema:
          description: The ID of the API key to be deleted.
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  deleted:
                    example: true
                    type: boolean
                  id:
                    example: key_abc
                    type: string
                  object:
                    example: organization.admin_api_key.deleted
                    type: string
                type: object
          description: Confirmation that the API key was deleted.
      summary: Delete an organization admin API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/admin_api_keys/key_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n  \"id\": \"key_abc\",\n  \"object\": \"organization.admin_api_key.deleted\"\
            ,\n  \"deleted\": true\n}\n"
        group: administration
        name: Delete admin API key
        returns: A confirmation object indicating the key was deleted.
    get:
      description: Get details for a specific organization API key by its ID.
      operationId: admin-api-keys-get
      parameters:
      - in: path
        name: key_id
        required: true
        schema:
          description: The ID of the API key.
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApiKey'
          description: Details of the requested API key.
      summary: Retrieve a single organization API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/admin_api_keys/key_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n  \"object\": \"organization.admin_api_key\",\n  \"id\": \"\
            key_abc\",\n  \"name\": \"Main Admin Key\",\n  \"redacted_value\": \"\
            sk-admin...xyz\",\n  \"created_at\": 1711471533,\n  \"last_used_at\":\
            \ 1711471534,\n  \"owner\": {\n    \"type\": \"user\",\n    \"object\"\
            : \"organization.user\",\n    \"id\": \"user_123\",\n    \"name\": \"\
            John Doe\",\n    \"created_at\": 1711471533,\n    \"role\": \"owner\"\n\
            \  }\n}\n"
        group: administration
        name: Retrieve admin API key
        returns: The requested [AdminApiKey](/docs/api-reference/admin-api-keys/object)
          object.
  /organization/certificates:
    get:
      operationId: listOrganizationCertificates
      parameters:
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        in: query
        name: order
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates listed successfully.
      summary: List uploaded certificates for this organization.
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: 'curl https://api.openai.com/v1/organization/certificates \

              -H "Authorization: Bearer $OPENAI_ADMIN_KEY"

              '
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
            : \"organization.certificate\",\n      \"id\": \"cert_abc\",\n      \"\
            name\": \"My Example Certificate\",\n      \"active\": true,\n      \"\
            created_at\": 1234567,\n      \"certificate_details\": {\n        \"valid_at\"\
            : 12345667,\n        \"expires_at\": 12345678\n      }\n    },\n  ],\n\
            \  \"first_id\": \"cert_abc\",\n  \"last_id\": \"cert_abc\",\n  \"has_more\"\
            : false\n}\n"
        group: administration
        name: List organization certificates
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects.
    post:
      operationId: uploadCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadCertificateRequest'
        description: The certificate upload payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Certificate uploaded successfully.
      summary: 'Upload a certificate to the organization. This does **not** automatically
        activate the certificate.


        Organizations can upload up to 50 certificates.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/certificates\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"name\": \"My Example Certificate\"\
              ,\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\\\nMIIDeT...\\\\\
              n-----END CERTIFICATE-----\"\n}'\n"
          response: "{\n  \"object\": \"certificate\",\n  \"id\": \"cert_abc\",\n\
            \  \"name\": \"My Example Certificate\",\n  \"created_at\": 1234567,\n\
            \  \"certificate_details\": {\n    \"valid_at\": 12345667,\n    \"expires_at\"\
            : 12345678\n  }\n}\n"
        group: administration
        name: Upload certificate
        returns: A single [Certificate](/docs/api-reference/certificates/object) object.
  /organization/certificates/activate:
    post:
      operationId: activateOrganizationCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleCertificatesRequest'
        description: The certificate activation payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates activated successfully.
      summary: 'Activate certificates at the organization level.


        You can atomically and idempotently activate up to 10 certificates at a time.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/certificates/activate\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"data\": [\"cert_abc\", \"cert_def\"\
              ]\n}'\n"
          response: "{\n  \"object\": \"organization.certificate.activation\",\n \
            \ \"data\": [\n    {\n      \"object\": \"organization.certificate\",\n\
            \      \"id\": \"cert_abc\",\n      \"name\": \"My Example Certificate\"\
            ,\n      \"active\": true,\n      \"created_at\": 1234567,\n      \"certificate_details\"\
            : {\n        \"valid_at\": 12345667,\n        \"expires_at\": 12345678\n\
            \      }\n    },\n    {\n      \"object\": \"organization.certificate\"\
            ,\n      \"id\": \"cert_def\",\n      \"name\": \"My Example Certificate\
            \ 2\",\n      \"active\": true,\n      \"created_at\": 1234567,\n    \
            \  \"certificate_details\": {\n        \"valid_at\": 12345667,\n     \
            \   \"expires_at\": 12345678\n      }\n    },\n  ],\n}\n"
        group: administration
        name: Activate certificates for organization
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects that were activated.
  /organization/certificates/deactivate:
    post:
      operationId: deactivateOrganizationCertificates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleCertificatesRequest'
        description: The certificate deactivation payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates deactivated successfully.
      summary: 'Deactivate certificates at the organization level.


        You can atomically and idempotently deactivate up to 10 certificates at a
        time.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/certificates/deactivate\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"data\": [\"cert_abc\", \"cert_def\"\
              ]\n}'\n"
          response: "{\n  \"object\": \"organization.certificate.deactivation\",\n\
            \  \"data\": [\n    {\n      \"object\": \"organization.certificate\"\
            ,\n      \"id\": \"cert_abc\",\n      \"name\": \"My Example Certificate\"\
            ,\n      \"active\": false,\n      \"created_at\": 1234567,\n      \"\
            certificate_details\": {\n        \"valid_at\": 12345667,\n        \"\
            expires_at\": 12345678\n      }\n    },\n    {\n      \"object\": \"organization.certificate\"\
            ,\n      \"id\": \"cert_def\",\n      \"name\": \"My Example Certificate\
            \ 2\",\n      \"active\": false,\n      \"created_at\": 1234567,\n   \
            \   \"certificate_details\": {\n        \"valid_at\": 12345667,\n    \
            \    \"expires_at\": 12345678\n      }\n    },\n  ],\n}\n"
        group: administration
        name: Deactivate certificates for organization
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects that were deactivated.
  /organization/certificates/{certificate_id}:
    delete:
      operationId: deleteCertificate
      parameters:
      - description: Unique ID of the certificate to retrieve.
        in: path
        name: certificate_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCertificateResponse'
          description: Certificate deleted successfully.
      summary: 'Delete a certificate from the organization.


        The certificate must be inactive for the organization and all projects.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: 'curl -X DELETE https://api.openai.com/v1/organization/certificates/cert_abc
              \

              -H "Authorization: Bearer $OPENAI_ADMIN_KEY"

              '
          response: "{\n  \"object\": \"certificate.deleted\",\n  \"id\": \"cert_abc\"\
            \n}\n"
        group: administration
        name: Delete certificate
        returns: A confirmation object indicating the certificate was deleted.
    get:
      operationId: getCertificate
      parameters:
      - description: Unique ID of the certificate to retrieve.
        in: path
        name: certificate_id
        required: true
        schema:
          type: string
      - description: A list of additional fields to include in the response. Currently
          the only supported value is `content` to fetch the PEM content of the certificate.
        in: query
        name: include
        required: false
        schema:
          items:
            enum:
            - content
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Certificate retrieved successfully.
      summary: 'Get a certificate that has been uploaded to the organization.


        You can get a certificate regardless of whether it is active or not.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: 'curl "https://api.openai.com/v1/organization/certificates/cert_abc?include[]=content"
              \

              -H "Authorization: Bearer $OPENAI_ADMIN_KEY"

              '
          response: "{\n  \"object\": \"certificate\",\n  \"id\": \"cert_abc\",\n\
            \  \"name\": \"My Example Certificate\",\n  \"created_at\": 1234567,\n\
            \  \"certificate_details\": {\n    \"valid_at\": 1234567,\n    \"expires_at\"\
            : 12345678,\n    \"content\": \"-----BEGIN CERTIFICATE-----MIIDeT...-----END\
            \ CERTIFICATE-----\"\n  }\n}\n"
        group: administration
        name: Get certificate
        returns: A single [Certificate](/docs/api-reference/certificates/object) object.
    post:
      operationId: modifyCertificate
      parameters:
      - description: Unique ID of the certificate to retrieve.
        in: path
        name: certificate_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyCertificateRequest'
        description: The certificate modification payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
          description: Certificate modified successfully.
      summary: 'Modify a certificate. Note that only the name can be modified.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/certificates/cert_abc\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"name\": \"Renamed Certificate\"\n\
              }'\n"
          response: "{\n  \"object\": \"certificate\",\n  \"id\": \"cert_abc\",\n\
            \  \"name\": \"Renamed Certificate\",\n  \"created_at\": 1234567,\n  \"\
            certificate_details\": {\n    \"valid_at\": 12345667,\n    \"expires_at\"\
            : 12345678\n  }\n}\n"
        group: administration
        name: Modify certificate
        returns: The updated [Certificate](/docs/api-reference/certificates/object)
          object.
  /organization/invites:
    get:
      operationId: list-invites
      parameters:
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteListResponse'
          description: Invites listed successfully.
      summary: Returns a list of invites in the organization.
      tags:
      - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/invites?after=invite-abc&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
            : \"organization.invite\",\n      \"id\": \"invite-abc\",\n      \"email\"\
            : \"user@example.com\",\n      \"role\": \"owner\",\n      \"status\"\
            : \"accepted\",\n      \"invited_at\": 1711471533,\n      \"expires_at\"\
            : 1711471533,\n      \"accepted_at\": 1711471533\n    }\n  ],\n  \"first_id\"\
            : \"invite-abc\",\n  \"last_id\": \"invite-abc\",\n  \"has_more\": false\n\
            }\n"
        group: administration
        name: List invites
        returns: A list of [Invite](/docs/api-reference/invite/object) objects.
    post:
      operationId: inviteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
        description: The invite request payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: User invited successfully.
      summary: Create an invite for a user to the organization. The invite must be
        accepted by the user before they have access to the organization.
      tags:
      - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/invites \\\n\
              \  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"email\": \"anotheruser@example.com\"\
              ,\n      \"role\": \"reader\",\n      \"projects\": [\n        {\n \
              \         \"id\": \"project-xyz\",\n          \"role\": \"member\"\n\
              \        },\n        {\n          \"id\": \"project-abc\",\n       \
              \   \"role\": \"owner\"\n        }\n      ]\n  }'\n"
          response: "{\n  \"object\": \"organization.invite\",\n  \"id\": \"invite-def\"\
            ,\n  \"email\": \"anotheruser@example.com\",\n  \"role\": \"reader\",\n\
            \  \"status\": \"pending\",\n  \"invited_at\": 1711471533,\n  \"expires_at\"\
            : 1711471533,\n  \"accepted_at\": null,\n  \"projects\": [\n    {\n  \
            \    \"id\": \"project-xyz\",\n      \"role\": \"member\"\n    },\n  \
            \  {\n      \"id\": \"project-abc\",\n      \"role\": \"owner\"\n    }\n\
            \  ]\n}\n"
        group: administration
        name: Create invite
        returns: The created [Invite](/docs/api-reference/invite/object) object.
  /organization/invites/{invite_id}:
    delete:
      operationId: delete-invite
      parameters:
      - description: The ID of the invite to delete.
        in: path
        name: invite_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteDeleteResponse'
          description: Invite deleted successfully.
      summary: Delete an invite. If the invite has already been accepted, it cannot
        be deleted.
      tags:
      - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/invites/invite-abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.invite.deleted\",\n    \"id\"\
            : \"invite-abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete invite
        returns: Confirmation that the invite has been deleted
    get:
      operationId: retrieve-invite
      parameters:
      - description: The ID of the invite to retrieve.
        in: path
        name: invite_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: Invite retrieved successfully.
      summary: Retrieves an invite.
      tags:
      - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/invites/invite-abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.invite\",\n    \"id\": \"invite-abc\"\
            ,\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n  \
            \  \"status\": \"accepted\",\n    \"invited_at\": 1711471533,\n    \"\
            expires_at\": 1711471533,\n    \"accepted_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve invite
        returns: The [Invite](/docs/api-reference/invite/object) object matching the
          specified ID.
  /organization/projects:
    get:
      operationId: list-projects
      parameters:
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: If `true` returns all projects including those that have been
          `archived`. Archived projects are not included by default.
        in: query
        name: include_archived
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
          description: Projects listed successfully.
      summary: Returns a list of projects.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects?after=proj_abc&limit=20&include_archived=false\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \          \"id\": \"proj_abc\",\n            \"object\": \"organization.project\"\
            ,\n            \"name\": \"Project example\",\n            \"created_at\"\
            : 1711471533,\n            \"archived_at\": null,\n            \"status\"\
            : \"active\"\n        }\n    ],\n    \"first_id\": \"proj-abc\",\n   \
            \ \"last_id\": \"proj-xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List projects
        returns: A list of [Project](/docs/api-reference/projects/object) objects.
    post:
      operationId: create-project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        description: The project create request payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project created successfully.
      summary: Create a new project in the organization. Projects can be created and
        archived, but cannot be deleted.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects \\\
              \n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"name\": \"Project ABC\"\n\
              \  }'\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\"\
            ,\n    \"name\": \"Project ABC\",\n    \"created_at\": 1711471533,\n \
            \   \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        group: administration
        name: Create project
        returns: The created [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}:
    get:
      operationId: retrieve-project
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project retrieved successfully.
      summary: Retrieves a project.
      tags:
      - Projects
      x-oaiMeta:
        description: Retrieve a project.
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc \\\
              \n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\"\
            ,\n    \"name\": \"Project example\",\n    \"created_at\": 1711471533,\n\
            \    \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        group: administration
        name: Retrieve project
        returns: The [Project](/docs/api-reference/projects/object) object matching
          the specified ID.
    post:
      operationId: modify-project
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        description: The project update request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when updating the default project.
      summary: Modifies a project in the organization.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"name\": \"Project DEF\"\n\
              \  }'\n"
          response: ''
        group: administration
        name: Modify project
        returns: The updated [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}/api_keys:
    get:
      operationId: list-project-api-keys
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyListResponse'
          description: Project API keys listed successfully.
      summary: Returns a list of API keys in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys?after=key_abc&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \          \"object\": \"organization.project.api_key\",\n           \
            \ \"redacted_value\": \"sk-abc...def\",\n            \"name\": \"My API\
            \ Key\",\n            \"created_at\": 1711471533,\n            \"last_used_at\"\
            : 1711471534,\n            \"id\": \"key_abc\",\n            \"owner\"\
            : {\n                \"type\": \"user\",\n                \"user\": {\n\
            \                    \"object\": \"organization.project.user\",\n    \
            \                \"id\": \"user_abc\",\n                    \"name\":\
            \ \"First Last\",\n                    \"email\": \"user@example.com\"\
            ,\n                    \"role\": \"owner\",\n                    \"added_at\"\
            : 1711471533\n                }\n            }\n        }\n    ],\n  \
            \  \"first_id\": \"key_abc\",\n    \"last_id\": \"key_xyz\",\n    \"has_more\"\
            : false\n}\n"
        group: administration
        name: List project API keys
        returns: A list of [ProjectApiKey](/docs/api-reference/project-api-keys/object)
          objects.
  /organization/projects/{project_id}/api_keys/{key_id}:
    delete:
      operationId: delete-project-api-key
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the API key.
        in: path
        name: key_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyDeleteResponse'
          description: Project API key deleted successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Deletes an API key from the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.api_key.deleted\",\n\
            \    \"id\": \"key_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project API key
        returns: Confirmation of the key's deletion or an error if the key belonged
          to a service account
    get:
      operationId: retrieve-project-api-key
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the API key.
        in: path
        name: key_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKey'
          description: Project API key retrieved successfully.
      summary: Retrieves an API key in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.api_key\",\n    \"\
            redacted_value\": \"sk-abc...def\",\n    \"name\": \"My API Key\",\n \
            \   \"created_at\": 1711471533,\n    \"last_used_at\": 1711471534,\n \
            \   \"id\": \"key_abc\",\n    \"owner\": {\n        \"type\": \"user\"\
            ,\n        \"user\": {\n            \"object\": \"organization.project.user\"\
            ,\n            \"id\": \"user_abc\",\n            \"name\": \"First Last\"\
            ,\n            \"email\": \"user@example.com\",\n            \"role\"\
            : \"owner\",\n            \"added_at\": 1711471533\n        }\n    }\n\
            }\n"
        group: administration
        name: Retrieve project API key
        returns: The [ProjectApiKey](/docs/api-reference/project-api-keys/object)
          object matching the specified ID.
  /organization/projects/{project_id}/archive:
    post:
      operationId: archive-project
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project archived successfully.
      summary: Archives a project in the organization. Archived projects cannot be
        used or updated.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/archive\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\"\
            ,\n    \"name\": \"Project DEF\",\n    \"created_at\": 1711471533,\n \
            \   \"archived_at\": 1711471533,\n    \"status\": \"archived\"\n}\n"
        group: administration
        name: Archive project
        returns: The archived [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}/certificates:
    get:
      operationId: listProjectCertificates
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        in: query
        name: order
        schema:
          default: desc
          enum:
          - asc
          - desc
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates listed successfully.
      summary: List certificates for this project.
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: 'curl https://api.openai.com/v1/organization/projects/proj_abc/certificates
              \

              -H "Authorization: Bearer $OPENAI_ADMIN_KEY"

              '
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\"\
            : \"organization.project.certificate\",\n      \"id\": \"cert_abc\",\n\
            \      \"name\": \"My Example Certificate\",\n      \"active\": true,\n\
            \      \"created_at\": 1234567,\n      \"certificate_details\": {\n  \
            \      \"valid_at\": 12345667,\n        \"expires_at\": 12345678\n   \
            \   }\n    },\n  ],\n  \"first_id\": \"cert_abc\",\n  \"last_id\": \"\
            cert_abc\",\n  \"has_more\": false\n}\n"
        group: administration
        name: List project certificates
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects.
  /organization/projects/{project_id}/certificates/activate:
    post:
      operationId: activateProjectCertificates
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleCertificatesRequest'
        description: The certificate activation payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates activated successfully.
      summary: 'Activate certificates at the project level.


        You can atomically and idempotently activate up to 10 certificates at a time.

        '
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/certificates/activate\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"data\": [\"cert_abc\", \"cert_def\"\
              ]\n}'\n"
          response: "{\n  \"object\": \"organization.project.certificate.activation\"\
            ,\n  \"data\": [\n    {\n      \"object\": \"organization.project.certificate\"\
            ,\n      \"id\": \"cert_abc\",\n      \"name\": \"My Example Certificate\"\
            ,\n      \"active\": true,\n      \"created_at\": 1234567,\n      \"certificate_details\"\
            : {\n        \"valid_at\": 12345667,\n        \"expires_at\": 12345678\n\
            \      }\n    },\n    {\n      \"object\": \"organization.project.certificate\"\
            ,\n      \"id\": \"cert_def\",\n      \"name\": \"My Example Certificate\
            \ 2\",\n      \"active\": true,\n      \"created_at\": 1234567,\n    \
            \  \"certificate_details\": {\n        \"valid_at\": 12345667,\n     \
            \   \"expires_at\": 12345678\n      }\n    },\n  ],\n}\n"
        group: administration
        name: Activate certificates for project
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects that were activated.
  /organization/projects/{project_id}/certificates/deactivate:
    post:
      operationId: deactivateProjectCertificates
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleCertificatesRequest'
        description: The certificate deactivation payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
          description: Certificates deactivated successfully.
      summary: "Deactivate certificates at the project level. You can atomically and\
        \ \nidempotently deactivate up to 10 certificates at a time.\n"
      tags:
      - Certificates
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/certificates/deactivate\
              \ \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type:\
              \ application/json\" \\\n-d '{\n  \"data\": [\"cert_abc\", \"cert_def\"\
              ]\n}'\n"
          response: "{\n  \"object\": \"organization.project.certificate.deactivation\"\
            ,\n  \"data\": [\n    {\n      \"object\": \"organization.project.certificate\"\
            ,\n      \"id\": \"cert_abc\",\n      \"name\": \"My Example Certificate\"\
            ,\n      \"active\": false,\n      \"created_at\": 1234567,\n      \"\
            certificate_details\": {\n        \"valid_at\": 12345667,\n        \"\
            expires_at\": 12345678\n      }\n    },\n    {\n      \"object\": \"organization.project.certificate\"\
            ,\n      \"id\": \"cert_def\",\n      \"name\": \"My Example Certificate\
            \ 2\",\n      \"active\": false,\n      \"created_at\": 1234567,\n   \
            \   \"certificate_details\": {\n        \"valid_at\": 12345667,\n    \
            \    \"expires_at\": 12345678\n      }\n    },\n  ],\n}\n"
        group: administration
        name: Deactivate certificates for project
        returns: A list of [Certificate](/docs/api-reference/certificates/object)
          objects that were deactivated.
  /organization/projects/{project_id}/rate_limits:
    get:
      operationId: list-project-rate-limits
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: 'A limit on the number of objects to be returned. The default
          is 100.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 100
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, beginning with obj_foo, your subsequent call can
          include before=obj_foo in order to fetch the previous page of the list.

          '
        in: query
        name: before
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRateLimitListResponse'
          description: Project rate limits listed successfully.
      summary: Returns the rate limits per model for a project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          error_response: "{\n    \"code\": 404,\n    \"message\": \"The project {project_id}\
            \ was not found\"\n}\n"
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/rate_limits?after=rl_xxx&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \        \"object\": \"project.rate_limit\",\n          \"id\": \"rl-ada\"\
            ,\n          \"model\": \"ada\",\n          \"max_requests_per_1_minute\"\
            : 600,\n          \"max_tokens_per_1_minute\": 150000,\n          \"max_images_per_1_minute\"\
            : 10\n        }\n    ],\n    \"first_id\": \"rl-ada\",\n    \"last_id\"\
            : \"rl-ada\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project rate limits
        returns: A list of [ProjectRateLimit](/docs/api-reference/project-rate-limits/object)
          objects.
  /organization/projects/{project_id}/rate_limits/{rate_limit_id}:
    post:
      operationId: update-project-rate-limits
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the rate limit.
        in: path
        name: rate_limit_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRateLimitUpdateRequest'
        description: The project rate limit update request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRateLimit'
          description: Project rate limit updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Updates a project rate limit.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          error_response: "{\n    \"code\": 404,\n    \"message\": \"The project {project_id}\
            \ was not found\"\n}\n"
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/rate_limits/rl_xxx\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"max_requests_per_1_minute\"\
              : 500\n  }'\n"
          response: "{\n    \"object\": \"project.rate_limit\",\n    \"id\": \"rl-ada\"\
            ,\n    \"model\": \"ada\",\n    \"max_requests_per_1_minute\": 600,\n\
            \    \"max_tokens_per_1_minute\": 150000,\n    \"max_images_per_1_minute\"\
            : 10\n  }\n"
        group: administration
        name: Modify project rate limit
        returns: The updated [ProjectRateLimit](/docs/api-reference/project-rate-limits/object)
          object.
  /organization/projects/{project_id}/service_accounts:
    get:
      operationId: list-project-service-accounts
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountListResponse'
          description: Project service accounts listed successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Returns a list of service accounts in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts?after=custom_id&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \          \"object\": \"organization.project.service_account\",\n   \
            \         \"id\": \"svc_acct_abc\",\n            \"name\": \"Service Account\"\
            ,\n            \"role\": \"owner\",\n            \"created_at\": 1711471533\n\
            \        }\n    ],\n    \"first_id\": \"svc_acct_abc\",\n    \"last_id\"\
            : \"svc_acct_xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project service accounts
        returns: A list of [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object)
          objects.
    post:
      operationId: create-project-service-account
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectServiceAccountCreateRequest'
        description: The project service account create request payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountCreateResponse'
          description: Project service account created successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Creates a new service account in the project. This also returns an
        unredacted API key for the service account.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/service_accounts\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"name\": \"Production App\"\
              \n  }'\n"
          response: "{\n    \"object\": \"organization.project.service_account\",\n\
            \    \"id\": \"svc_acct_abc\",\n    \"name\": \"Production App\",\n  \
            \  \"role\": \"member\",\n    \"created_at\": 1711471533,\n    \"api_key\"\
            : {\n        \"object\": \"organization.project.service_account.api_key\"\
            ,\n        \"value\": \"sk-abcdefghijklmnop123\",\n        \"name\": \"\
            Secret Key\",\n        \"created_at\": 1711471533,\n        \"id\": \"\
            key_abc\"\n    }\n}\n"
        group: administration
        name: Create project service account
        returns: The created [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object)
          object.
  /organization/projects/{project_id}/service_accounts/{service_account_id}:
    delete:
      operationId: delete-project-service-account
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the service account.
        in: path
        name: service_account_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountDeleteResponse'
          description: Project service account deleted successfully.
      summary: Deletes a service account from the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.service_account.deleted\"\
            ,\n    \"id\": \"svc_acct_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project service account
        returns: Confirmation of service account being deleted, or an error in case
          of an archived project, which has no service accounts
    get:
      operationId: retrieve-project-service-account
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the service account.
        in: path
        name: service_account_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccount'
          description: Project service account retrieved successfully.
      summary: Retrieves a service account in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.service_account\",\n\
            \    \"id\": \"svc_acct_abc\",\n    \"name\": \"Service Account\",\n \
            \   \"role\": \"owner\",\n    \"created_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve project service account
        returns: The [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object)
          object matching the specified ID.
  /organization/projects/{project_id}/users:
    get:
      operationId: list-project-users
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserListResponse'
          description: Project users listed successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Returns a list of users in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/users?after=user_abc&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \          \"object\": \"organization.project.user\",\n            \"\
            id\": \"user_abc\",\n            \"name\": \"First Last\",\n         \
            \   \"email\": \"user@example.com\",\n            \"role\": \"owner\"\
            ,\n            \"added_at\": 1711471533\n        }\n    ],\n    \"first_id\"\
            : \"user-abc\",\n    \"last_id\": \"user-xyz\",\n    \"has_more\": false\n\
            }\n"
        group: administration
        name: List project users
        returns: A list of [ProjectUser](/docs/api-reference/project-users/object)
          objects.
    post:
      operationId: create-project-user
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserCreateRequest'
        description: The project user create request payload.
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: User added to project successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Adds a user to the project. Users must already be members of the organization
        to be added to a project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"user_id\": \"user_abc\",\n\
              \      \"role\": \"member\"\n  }'\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\"\
            : \"user_abc\",\n    \"email\": \"user@example.com\",\n    \"role\": \"\
            owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Create project user
        returns: The created [ProjectUser](/docs/api-reference/project-users/object)
          object.
  /organization/projects/{project_id}/users/{user_id}:
    delete:
      operationId: delete-project-user
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserDeleteResponse'
          description: Project user deleted successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Deletes a user from the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.user.deleted\",\n \
            \   \"id\": \"user_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project user
        returns: Confirmation that project has been deleted or an error in case of
          an archived project, which has no users
    get:
      operationId: retrieve-project-user
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: Project user retrieved successfully.
      summary: Retrieves a user in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\"\
            : \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\"\
            ,\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve project user
        returns: The [ProjectUser](/docs/api-reference/project-users/object) object
          matching the specified ID.
    post:
      operationId: modify-project-user
      parameters:
      - description: The ID of the project.
        in: path
        name: project_id
        required: true
        schema:
          type: string
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserUpdateRequest'
        description: The project user update request payload.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: Project user's role updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Modifies a user's role in the project.
      tags:
      - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"role\": \"owner\"\n  }'\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\"\
            : \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\"\
            ,\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Modify project user
        returns: The updated [ProjectUser](/docs/api-reference/project-users/object)
          object.
  /organization/users:
    get:
      operationId: list-users
      parameters:
      - description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        in: query
        name: limit
        required: false
        schema:
          default: 20
          format: int64
          type: integer
      - description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        in: query
        name: after
        required: false
        schema:
          type: string
      - description: Filter by the email address of users.
        in: query
        name: emails
        required: false
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
          description: Users listed successfully.
      summary: Lists all of the users in the organization.
      tags:
      - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/users?after=user_abc&limit=20\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n  \
            \          \"object\": \"organization.user\",\n            \"id\": \"\
            user_abc\",\n            \"name\": \"First Last\",\n            \"email\"\
            : \"user@example.com\",\n            \"role\": \"owner\",\n          \
            \  \"added_at\": 1711471533\n        }\n    ],\n    \"first_id\": \"user-abc\"\
            ,\n    \"last_id\": \"user-xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List users
        returns: A list of [User](/docs/api-reference/users/object) objects.
  /organization/users/{user_id}:
    delete:
      operationId: delete-user
      parameters:
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
          description: User deleted successfully.
      summary: Deletes a user from the organization.
      tags:
      - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/users/user_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.user.deleted\",\n    \"id\"\
            : \"user_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete user
        returns: Confirmation of the deleted user
    get:
      operationId: retrieve-user
      parameters:
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User retrieved successfully.
      summary: Retrieves a user by their identifier.
      tags:
      - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/users/user_abc \\\n\
              \  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\"\n"
          response: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\"\
            ,\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\"\
            ,\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve user
        returns: The [User](/docs/api-reference/users/object) object matching the
          specified ID.
    post:
      operationId: modify-user
      parameters:
      - description: The ID of the user.
        in: path
        name: user_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleUpdateRequest'
        description: The new user role to modify. This must be one of `owner` or `member`.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User role updated successfully.
      summary: Modifies a user's role in the organization.
      tags:
      - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/users/user_abc\
              \ \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type:\
              \ application/json\" \\\n  -d '{\n      \"role\": \"owner\"\n  }'\n"
          response: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\"\
            ,\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\"\
            ,\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Modify user
        returns: The updated [User](/docs/api-reference/users/object) object.
security:
- ApiKeyAuth: []
servers:
- url: https://api.openai.com/v1
tags:
- description: Build Assistants that can call models and use tools.
  name: Assistants
- description: Turn audio into text or text into audio.
  name: Audio
- description: Given a list of messages comprising a conversation, the model will
    return a response.
  name: Chat
- description: Given a prompt, the model will return one or more predicted completions,
    and can also return the probabilities of alternative tokens at each position.
  name: Completions
- description: Get a vector representation of a given input that can be easily consumed
    by machine learning models and algorithms.
  name: Embeddings
- description: Manage and run evals in the OpenAI platform.
  name: Evals
- description: Manage fine-tuning jobs to tailor a model to your specific training
    data.
  name: Fine-tuning
- description: Manage and run graders in the OpenAI platform.
  name: Graders
- description: Create large batches of API requests to run asynchronously.
  name: Batch
- description: Files are used to upload documents that can be used with features like
    Assistants and Fine-tuning.
  name: Files
- description: Use Uploads to upload large files in multiple parts.
  name: Uploads
- description: Given a prompt and/or an input image, the model will generate a new
    image.
  name: Images
- description: List and describe the various models available in the API.
  name: Models
- description: Given text and/or image inputs, classifies if those inputs are potentially
    harmful.
  name: Moderations
- description: List user actions and configuration changes within this organization.
  name: Audit Logs
webhooks:
  batch_cancelled:
    post:
      description: 'Sent when a batch has been cancelled.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBatchCancelled'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  batch_completed:
    post:
      description: 'Sent when a batch has completed processing.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBatchCompleted'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  batch_expired:
    post:
      description: 'Sent when a batch has expired before completion.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBatchExpired'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  batch_failed:
    post:
      description: 'Sent when a batch has failed.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookBatchFailed'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  eval_run_canceled:
    post:
      description: 'Sent when an eval run has been canceled.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvalRunCanceled'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  eval_run_failed:
    post:
      description: 'Sent when an eval run has failed.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvalRunFailed'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  eval_run_succeeded:
    post:
      description: 'Sent when an eval run has succeeded.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvalRunSucceeded'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  fine_tuning_job_cancelled:
    post:
      description: 'Sent when a fine-tuning job has been cancelled.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookFineTuningJobCancelled'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  fine_tuning_job_failed:
    post:
      description: 'Sent when a fine-tuning job has failed.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookFineTuningJobFailed'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  fine_tuning_job_succeeded:
    post:
      description: 'Sent when a fine-tuning job has succeeded.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookFineTuningJobSucceeded'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  response_cancelled:
    post:
      description: 'Sent when a background response has been cancelled.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookResponseCancelled'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  response_completed:
    post:
      description: 'Sent when a background response has completed successfully.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookResponseCompleted'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried. \n"
  response_failed:
    post:
      description: 'Sent when a background response has failed.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookResponseFailed'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
  response_incomplete:
    post:
      description: 'Sent when a background response is incomplete.

        '
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookResponseIncomplete'
        description: The event payload sent by the API.
      responses:
        '200':
          description: "Return a 200 status code to acknowledge receipt of the event.\
            \ Non-200 \nstatus codes will be retried.\n"
x-oaiMeta:
  groups:
  - description: 'OpenAI''s most advanced interface for generating model responses.
      Supports

      text and image inputs, and text outputs. Create stateful interactions

      with the model, using the output of previous responses as input. Extend

      the model''s capabilities with built-in tools for file search, web search,

      computer use, and more. Allow the model access to external systems and data

      using function calling.


      Related guides:

      - [Quickstart](/docs/quickstart?api-mode=responses)

      - [Text inputs and outputs](/docs/guides/text?api-mode=responses)

      - [Image inputs](/docs/guides/images?api-mode=responses)

      - [Structured Outputs](/docs/guides/structured-outputs?api-mode=responses)

      - [Function calling](/docs/guides/function-calling?api-mode=responses)

      - [Conversation state](/docs/guides/conversation-state?api-mode=responses)

      - [Extend the models with tools](/docs/guides/tools?api-mode=responses)

      '
    id: responses
    navigationGroup: responses
    sections:
    - key: createResponse
      path: create
      type: endpoint
    - key: getResponse
      path: get
      type: endpoint
    - key: deleteResponse
      path: delete
      type: endpoint
    - key: cancelResponse
      path: cancel
      type: endpoint
    - key: listInputItems
      path: input-items
      type: endpoint
    - key: Response
      path: object
      type: object
    - key: ResponseItemList
      path: list
      type: object
    title: Responses
  - description: 'When you [create a Response](/docs/api-reference/responses/create)
      with

      `stream` set to `true`, the server will emit server-sent events to the

      client as the Response is generated. This section contains the events that

      are emitted by the server.


      [Learn more about streaming responses](/docs/guides/streaming-responses?api-mode=responses).

      '
    id: responses-streaming
    navigationGroup: responses
    sections:
    - key: ResponseCreatedEvent
      path: <auto>
      type: object
    - key: ResponseInProgressEvent
      path: <auto>
      type: object
    - key: ResponseCompletedEvent
      path: <auto>
      type: object
    - key: ResponseFailedEvent
      path: <auto>
      type: object
    - key: ResponseIncompleteEvent
      path: <auto>
      type: object
    - key: ResponseOutputItemAddedEvent
      path: <auto>
      type: object
    - key: ResponseOutputItemDoneEvent
      path: <auto>
      type: object
    - key: ResponseContentPartAddedEvent
      path: <auto>
      type: object
    - key: ResponseContentPartDoneEvent
      path: <auto>
      type: object
    - key: ResponseTextDeltaEvent
      path: <auto>
      type: object
    - key: ResponseTextDoneEvent
      path: <auto>
      type: object
    - key: ResponseRefusalDeltaEvent
      path: <auto>
      type: object
    - key: ResponseRefusalDoneEvent
      path: <auto>
      type: object
    - key: ResponseFunctionCallArgumentsDeltaEvent
      path: <auto>
      type: object
    - key: ResponseFunctionCallArgumentsDoneEvent
      path: <auto>
      type: object
    - key: ResponseFileSearchCallInProgressEvent
      path: <auto>
      type: object
    - key: ResponseFileSearchCallSearchingEvent
      path: <auto>
      type: object
    - key: ResponseFileSearchCallCompletedEvent
      path: <auto>
      type: object
    - key: ResponseWebSearchCallInProgressEvent
      path: <auto>
      type: object
    - key: ResponseWebSearchCallSearchingEvent
      path: <auto>
      type: object
    - key: ResponseWebSearchCallCompletedEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryPartAddedEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryPartDoneEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryTextDeltaEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryTextDoneEvent
      path: <auto>
      type: object
    - key: ResponseImageGenCallCompletedEvent
      path: <auto>
      type: object
    - key: ResponseImageGenCallGeneratingEvent
      path: <auto>
      type: object
    - key: ResponseImageGenCallInProgressEvent
      path: <auto>
      type: object
    - key: ResponseImageGenCallPartialImageEvent
      path: <auto>
      type: object
    - key: ResponseMCPCallArgumentsDeltaEvent
      path: <auto>
      type: object
    - key: ResponseMCPCallArgumentsDoneEvent
      path: <auto>
      type: object
    - key: ResponseMCPCallCompletedEvent
      path: <auto>
      type: object
    - key: ResponseMCPCallFailedEvent
      path: <auto>
      type: object
    - key: ResponseMCPCallInProgressEvent
      path: <auto>
      type: object
    - key: ResponseMCPListToolsCompletedEvent
      path: <auto>
      type: object
    - key: ResponseMCPListToolsFailedEvent
      path: <auto>
      type: object
    - key: ResponseMCPListToolsInProgressEvent
      path: <auto>
      type: object
    - key: ResponseCodeInterpreterCallInProgressEvent
      path: <auto>
      type: object
    - key: ResponseCodeInterpreterCallInterpretingEvent
      path: <auto>
      type: object
    - key: ResponseCodeInterpreterCallCompletedEvent
      path: <auto>
      type: object
    - key: ResponseCodeInterpreterCallCodeDeltaEvent
      path: <auto>
      type: object
    - key: ResponseCodeInterpreterCallCodeDoneEvent
      path: <auto>
      type: object
    - key: ResponseOutputTextAnnotationAddedEvent
      path: <auto>
      type: object
    - key: ResponseQueuedEvent
      path: <auto>
      type: object
    - key: ResponseReasoningDeltaEvent
      path: <auto>
      type: object
    - key: ResponseReasoningDoneEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryDeltaEvent
      path: <auto>
      type: object
    - key: ResponseReasoningSummaryDoneEvent
      path: <auto>
      type: object
    - key: ResponseErrorEvent
      path: <auto>
      type: object
    title: Streaming
  - description: 'The Chat Completions API endpoint will generate a model response
      from a

      list of messages comprising a conversation.


      Related guides:

      - [Quickstart](/docs/quickstart?api-mode=chat)

      - [Text inputs and outputs](/docs/guides/text?api-mode=chat)

      - [Image inputs](/docs/guides/images?api-mode=chat)

      - [Audio inputs and outputs](/docs/guides/audio?api-mode=chat)

      - [Structured Outputs](/docs/guides/structured-outputs?api-mode=chat)

      - [Function calling](/docs/guides/function-calling?api-mode=chat)

      - [Conversation state](/docs/guides/conversation-state?api-mode=chat)


      **Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses)

      to take advantage of the latest OpenAI platform features. Compare

      [Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).

      '
    id: chat
    navigationGroup: chat
    sections:
    - key: createChatCompletion
      path: create
      type: endpoint
    - key: getChatCompletion
      path: get
      type: endpoint
    - key: getChatCompletionMessages
      path: getMessages
      type: endpoint
    - key: listChatCompletions
      path: list
      type: endpoint
    - key: updateChatCompletion
      path: update
      type: endpoint
    - key: deleteChatCompletion
      path: delete
      type: endpoint
    - key: CreateChatCompletionResponse
      path: object
      type: object
    - key: ChatCompletionList
      path: list-object
      type: object
    - key: ChatCompletionMessageList
      path: message-list
      type: object
    title: Chat Completions
  - description: 'Stream Chat Completions in real time. Receive chunks of completions

      returned from the model using server-sent events.

      [Learn more](/docs/guides/streaming-responses?api-mode=chat).

      '
    id: chat-streaming
    navigationGroup: chat
    sections:
    - key: CreateChatCompletionStreamResponse
      path: streaming
      type: object
    title: Streaming
  - description: "Webhooks are HTTP requests sent by OpenAI to a URL you specify when\
      \ certain\nevents happen during the course of API usage. \n\n[Learn more about\
      \ webhooks](/docs/guides/webhooks).\n"
    id: webhook-events
    navigationGroup: webhooks
    sections:
    - key: WebhookResponseCompleted
      path: <auto>
      type: object
    - key: WebhookResponseCancelled
      path: <auto>
      type: object
    - key: WebhookResponseFailed
      path: <auto>
      type: object
    - key: WebhookResponseIncomplete
      path: <auto>
      type: object
    - key: WebhookBatchCompleted
      path: <auto>
      type: object
    - key: WebhookBatchCancelled
      path: <auto>
      type: object
    - key: WebhookBatchExpired
      path: <auto>
      type: object
    - key: WebhookBatchFailed
      path: <auto>
      type: object
    - key: WebhookFineTuningJobSucceeded
      path: <auto>
      type: object
    - key: WebhookFineTuningJobFailed
      path: <auto>
      type: object
    - key: WebhookFineTuningJobCancelled
      path: <auto>
      type: object
    - key: WebhookEvalRunSucceeded
      path: <auto>
      type: object
    - key: WebhookEvalRunFailed
      path: <auto>
      type: object
    - key: WebhookEvalRunCanceled
      path: <auto>
      type: object
    title: Webhook Events
  - beta: true
    description: 'Communicate with a GPT-4o class model in real time using WebRTC
      or

      WebSockets. Supports text and audio inputs and ouputs, along with audio

      transcriptions.

      [Learn more about the Realtime API](/docs/guides/realtime).

      '
    id: realtime
    navigationGroup: realtime
    title: Realtime
  - description: 'REST API endpoint to generate ephemeral session tokens for use in
      client-side

      applications.

      '
    id: realtime-sessions
    navigationGroup: realtime
    sections:
    - key: create-realtime-session
      path: create
      type: endpoint
    - key: create-realtime-transcription-session
      path: create-transcription
      type: endpoint
    - key: RealtimeSessionCreateResponse
      path: session_object
      type: object
    - key: RealtimeTranscriptionSessionCreateResponse
      path: transcription_session_object
      type: object
    title: Session tokens
  - description: 'These are events that the OpenAI Realtime WebSocket server will
      accept from the client.

      '
    id: realtime-client-events
    navigationGroup: realtime
    sections:
    - key: RealtimeClientEventSessionUpdate
      path: <auto>
      type: object
    - key: RealtimeClientEventInputAudioBufferAppend
      path: <auto>
      type: object
    - key: RealtimeClientEventInputAudioBufferCommit
      path: <auto>
      type: object
    - key: RealtimeClientEventInputAudioBufferClear
      path: <auto>
      type: object
    - key: RealtimeClientEventConversationItemCreate
      path: <auto>
      type: object
    - key: RealtimeClientEventConversationItemRetrieve
      path: <auto>
      type: object
    - key: RealtimeClientEventConversationItemTruncate
      path: <auto>
      type: object
    - key: RealtimeClientEventConversationItemDelete
      path: <auto>
      type: object
    - key: RealtimeClientEventResponseCreate
      path: <auto>
      type: object
    - key: RealtimeClientEventResponseCancel
      path: <auto>
      type: object
    - key: RealtimeClientEventTranscriptionSessionUpdate
      path: <auto>
      type: object
    - key: RealtimeClientEventOutputAudioBufferClear
      path: <auto>
      type: object
    title: Client events
  - description: 'These are events emitted from the OpenAI Realtime WebSocket server
      to the client.

      '
    id: realtime-server-events
    navigationGroup: realtime
    sections:
    - key: RealtimeServerEventError
      path: <auto>
      type: object
    - key: RealtimeServerEventSessionCreated
      path: <auto>
      type: object
    - key: RealtimeServerEventSessionUpdated
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationCreated
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemCreated
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemRetrieved
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemInputAudioTranscriptionDelta
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemTruncated
      path: <auto>
      type: object
    - key: RealtimeServerEventConversationItemDeleted
      path: <auto>
      type: object
    - key: RealtimeServerEventInputAudioBufferCommitted
      path: <auto>
      type: object
    - key: RealtimeServerEventInputAudioBufferCleared
      path: <auto>
      type: object
    - key: RealtimeServerEventInputAudioBufferSpeechStarted
      path: <auto>
      type: object
    - key: RealtimeServerEventInputAudioBufferSpeechStopped
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseCreated
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseOutputItemAdded
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseOutputItemDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseContentPartAdded
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseContentPartDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseTextDelta
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseTextDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseAudioTranscriptDelta
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseAudioTranscriptDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseAudioDelta
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseAudioDone
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseFunctionCallArgumentsDelta
      path: <auto>
      type: object
    - key: RealtimeServerEventResponseFunctionCallArgumentsDone
      path: <auto>
      type: object
    - key: RealtimeServerEventTranscriptionSessionUpdated
      path: <auto>
      type: object
    - key: RealtimeServerEventRateLimitsUpdated
      path: <auto>
      type: object
    - key: RealtimeServerEventOutputAudioBufferStarted
      path: <auto>
      type: object
    - key: RealtimeServerEventOutputAudioBufferStopped
      path: <auto>
      type: object
    - key: RealtimeServerEventOutputAudioBufferCleared
      path: <auto>
      type: object
    title: Server events
  - description: 'Learn how to turn audio into text or text into audio.


      Related guide: [Speech to text](/docs/guides/speech-to-text)

      '
    id: audio
    navigationGroup: endpoints
    sections:
    - key: createSpeech
      path: createSpeech
      type: endpoint
    - key: createTranscription
      path: createTranscription
      type: endpoint
    - key: createTranslation
      path: createTranslation
      type: endpoint
    - key: CreateTranscriptionResponseJson
      path: json-object
      type: object
    - key: CreateTranscriptionResponseVerboseJson
      path: verbose-json-object
      type: object
    - key: SpeechAudioDeltaEvent
      path: speech-audio-delta-event
      type: object
    - key: SpeechAudioDoneEvent
      path: speech-audio-done-event
      type: object
    - key: TranscriptTextDeltaEvent
      path: transcript-text-delta-event
      type: object
    - key: TranscriptTextDoneEvent
      path: transcript-text-done-event
      type: object
    title: Audio
  - description: 'Given a prompt and/or an input image, the model will generate a
      new image.

      Related guide: [Image generation](/docs/guides/images)

      '
    id: images
    navigationGroup: endpoints
    sections:
    - key: createImage
      path: create
      type: endpoint
    - key: createImageEdit
      path: createEdit
      type: endpoint
    - key: createImageVariation
      path: createVariation
      type: endpoint
    - key: ImagesResponse
      path: object
      type: object
    title: Images
  - description: 'Get a vector representation of a given input that can be easily
      consumed by machine learning models and algorithms.

      Related guide: [Embeddings](/docs/guides/embeddings)

      '
    id: embeddings
    navigationGroup: endpoints
    sections:
    - key: createEmbedding
      path: create
      type: endpoint
    - key: Embedding
      path: object
      type: object
    title: Embeddings
  - description: 'Create, manage, and run evals in the OpenAI platform.

      Related guide: [Evals](/docs/guides/evals)

      '
    id: evals
    navigationGroup: endpoints
    sections:
    - key: createEval
      path: create
      type: endpoint
    - key: getEval
      path: get
      type: endpoint
    - key: updateEval
      path: update
      type: endpoint
    - key: deleteEval
      path: delete
      type: endpoint
    - key: listEvals
      path: list
      type: endpoint
    - key: getEvalRuns
      path: getRuns
      type: endpoint
    - key: getEvalRun
      path: getRun
      type: endpoint
    - key: createEvalRun
      path: createRun
      type: endpoint
    - key: cancelEvalRun
      path: cancelRun
      type: endpoint
    - key: deleteEvalRun
      path: deleteRun
      type: endpoint
    - key: getEvalRunOutputItem
      path: getRunOutputItem
      type: endpoint
    - key: getEvalRunOutputItems
      path: getRunOutputItems
      type: endpoint
    - key: Eval
      path: object
      type: object
    - key: EvalRun
      path: run-object
      type: object
    - key: EvalRunOutputItem
      path: run-output-item-object
      type: object
    title: Evals
  - description: 'Manage fine-tuning jobs to tailor a model to your specific training
      data.

      Related guide: [Fine-tune models](/docs/guides/fine-tuning)

      '
    id: fine-tuning
    navigationGroup: endpoints
    sections:
    - key: createFineTuningJob
      path: create
      type: endpoint
    - key: listPaginatedFineTuningJobs
      path: list
      type: endpoint
    - key: listFineTuningEvents
      path: list-events
      type: endpoint
    - key: listFineTuningJobCheckpoints
      path: list-checkpoints
      type: endpoint
    - key: listFineTuningCheckpointPermissions
      path: list-permissions
      type: endpoint
    - key: createFineTuningCheckpointPermission
      path: create-permission
      type: endpoint
    - key: deleteFineTuningCheckpointPermission
      path: delete-permission
      type: endpoint
    - key: retrieveFineTuningJob
      path: retrieve
      type: endpoint
    - key: cancelFineTuningJob
      path: cancel
      type: endpoint
    - key: resumeFineTuningJob
      path: resume
      type: endpoint
    - key: pauseFineTuningJob
      path: pause
      type: endpoint
    - key: FineTuneChatRequestInput
      path: chat-input
      type: object
    - key: FineTunePreferenceRequestInput
      path: preference-input
      type: object
    - key: FineTuneReinforcementRequestInput
      path: reinforcement-input
      type: object
    - key: FineTuningJob
      path: object
      type: object
    - key: FineTuningJobEvent
      path: event-object
      type: object
    - key: FineTuningJobCheckpoint
      path: checkpoint-object
      type: object
    - key: FineTuningCheckpointPermission
      path: permission-object
      type: object
    title: Fine-tuning
  - description: 'Manage and run graders in the OpenAI platform.

      Related guide: [Graders](/docs/guides/graders)

      '
    id: graders
    navigationGroup: endpoints
    sections:
    - key: GraderStringCheck
      path: string-check
      type: object
    - key: GraderTextSimilarity
      path: text-similarity
      type: object
    - key: GraderScoreModel
      path: score-model
      type: object
    - key: GraderLabelModel
      path: label-model
      type: object
    - key: GraderPython
      path: python
      type: object
    - key: GraderMulti
      path: multi
      type: object
    - key: runGrader
      path: run
      type: endpoint
    - beta: true
      key: validateGrader
      path: validate
      type: endpoint
    title: Graders
  - description: 'Create large batches of API requests for asynchronous processing.
      The Batch API returns completions within 24 hours for a 50% discount.

      Related guide: [Batch](/docs/guides/batch)

      '
    id: batch
    navigationGroup: endpoints
    sections:
    - key: createBatch
      path: create
      type: endpoint
    - key: retrieveBatch
      path: retrieve
      type: endpoint
    - key: cancelBatch
      path: cancel
      type: endpoint
    - key: listBatches
      path: list
      type: endpoint
    - key: Batch
      path: object
      type: object
    - key: BatchRequestInput
      path: request-input
      type: object
    - key: BatchRequestOutput
      path: request-output
      type: object
    title: Batch
  - description: 'Files are used to upload documents that can be used with features
      like [Assistants](/docs/api-reference/assistants), [Fine-tuning](/docs/api-reference/fine-tuning),
      and [Batch API](/docs/guides/batch).

      '
    id: files
    navigationGroup: endpoints
    sections:
    - key: createFile
      path: create
      type: endpoint
    - key: listFiles
      path: list
      type: endpoint
    - key: retrieveFile
      path: retrieve
      type: endpoint
    - key: deleteFile
      path: delete
      type: endpoint
    - key: downloadFile
      path: retrieve-contents
      type: endpoint
    - key: OpenAIFile
      path: object
      type: object
    title: Files
  - description: 'Allows you to upload large files in multiple parts.

      '
    id: uploads
    navigationGroup: endpoints
    sections:
    - key: createUpload
      path: create
      type: endpoint
    - key: addUploadPart
      path: add-part
      type: endpoint
    - key: completeUpload
      path: complete
      type: endpoint
    - key: cancelUpload
      path: cancel
      type: endpoint
    - key: Upload
      path: object
      type: object
    - key: UploadPart
      path: part-object
      type: object
    title: Uploads
  - description: 'List and describe the various models available in the API. You can
      refer to the [Models](/docs/models) documentation to understand what models
      are available and the differences between them.

      '
    id: models
    navigationGroup: endpoints
    sections:
    - key: listModels
      path: list
      type: endpoint
    - key: retrieveModel
      path: retrieve
      type: endpoint
    - key: deleteModel
      path: delete
      type: endpoint
    - key: Model
      path: object
      type: object
    title: Models
  - description: 'Given text and/or image inputs, classifies if those inputs are potentially
      harmful across several categories.

      Related guide: [Moderations](/docs/guides/moderation)

      '
    id: moderations
    navigationGroup: endpoints
    sections:
    - key: createModeration
      path: create
      type: endpoint
    - key: CreateModerationResponse
      path: object
      type: object
    title: Moderations
  - description: 'Vector stores power semantic search for the Retrieval API and the
      `file_search` tool in the Responses and Assistants APIs.


      Related guide: [File Search](/docs/assistants/tools/file-search)

      '
    id: vector-stores
    navigationGroup: vector_stores
    sections:
    - key: createVectorStore
      path: create
      type: endpoint
    - key: listVectorStores
      path: list
      type: endpoint
    - key: getVectorStore
      path: retrieve
      type: endpoint
    - key: modifyVectorStore
      path: modify
      type: endpoint
    - key: deleteVectorStore
      path: delete
      type: endpoint
    - key: searchVectorStore
      path: search
      type: endpoint
    - key: VectorStoreObject
      path: object
      type: object
    title: Vector stores
  - description: 'Vector store files represent files inside a vector store.


      Related guide: [File Search](/docs/assistants/tools/file-search)

      '
    id: vector-stores-files
    navigationGroup: vector_stores
    sections:
    - key: createVectorStoreFile
      path: createFile
      type: endpoint
    - key: listVectorStoreFiles
      path: listFiles
      type: endpoint
    - key: getVectorStoreFile
      path: getFile
      type: endpoint
    - key: retrieveVectorStoreFileContent
      path: getContent
      type: endpoint
    - key: updateVectorStoreFileAttributes
      path: updateAttributes
      type: endpoint
    - key: deleteVectorStoreFile
      path: deleteFile
      type: endpoint
    - key: VectorStoreFileObject
      path: file-object
      type: object
    title: Vector store files
  - description: 'Vector store file batches represent operations to add multiple files
      to a vector store.

      Related guide: [File Search](/docs/assistants/tools/file-search)

      '
    id: vector-stores-file-batches
    navigationGroup: vector_stores
    sections:
    - key: createVectorStoreFileBatch
      path: createBatch
      type: endpoint
    - key: getVectorStoreFileBatch
      path: getBatch
      type: endpoint
    - key: cancelVectorStoreFileBatch
      path: cancelBatch
      type: endpoint
    - key: listFilesInVectorStoreBatch
      path: listBatchFiles
      type: endpoint
    - key: VectorStoreFileBatchObject
      path: batch-object
      type: object
    title: Vector store file batches
  - description: 'Create and manage containers for use with the Code Interpreter tool.

      '
    id: containers
    navigationGroup: containers
    sections:
    - key: CreateContainer
      path: createContainers
      type: endpoint
    - key: ListContainers
      path: listContainers
      type: endpoint
    - key: RetrieveContainer
      path: retrieveContainer
      type: endpoint
    - key: DeleteContainer
      path: deleteContainer
      type: endpoint
    - key: ContainerResource
      path: object
      type: object
    title: Containers
  - description: 'Create and manage container files for use with the Code Interpreter
      tool.

      '
    id: container-files
    navigationGroup: containers
    sections:
    - key: CreateContainerFile
      path: createContainerFile
      type: endpoint
    - key: ListContainerFiles
      path: listContainerFiles
      type: endpoint
    - key: RetrieveContainerFile
      path: retrieveContainerFile
      type: endpoint
    - key: RetrieveContainerFileContent
      path: retrieveContainerFileContent
      type: endpoint
    - key: DeleteContainerFile
      path: deleteContainerFile
      type: endpoint
    - key: ContainerFileResource
      path: object
      type: object
    title: Container Files
  - beta: true
    description: 'Build assistants that can call models and use tools to perform tasks.


      [Get started with the Assistants API](/docs/assistants)

      '
    id: assistants
    navigationGroup: assistants
    sections:
    - key: createAssistant
      path: createAssistant
      type: endpoint
    - key: listAssistants
      path: listAssistants
      type: endpoint
    - key: getAssistant
      path: getAssistant
      type: endpoint
    - key: modifyAssistant
      path: modifyAssistant
      type: endpoint
    - key: deleteAssistant
      path: deleteAssistant
      type: endpoint
    - key: AssistantObject
      path: object
      type: object
    title: Assistants
  - beta: true
    description: 'Create threads that assistants can interact with.


      Related guide: [Assistants](/docs/assistants/overview)

      '
    id: threads
    navigationGroup: assistants
    sections:
    - key: createThread
      path: createThread
      type: endpoint
    - key: getThread
      path: getThread
      type: endpoint
    - key: modifyThread
      path: modifyThread
      type: endpoint
    - key: deleteThread
      path: deleteThread
      type: endpoint
    - key: ThreadObject
      path: object
      type: object
    title: Threads
  - beta: true
    description: 'Create messages within threads


      Related guide: [Assistants](/docs/assistants/overview)

      '
    id: messages
    navigationGroup: assistants
    sections:
    - key: createMessage
      path: createMessage
      type: endpoint
    - key: listMessages
      path: listMessages
      type: endpoint
    - key: getMessage
      path: getMessage
      type: endpoint
    - key: modifyMessage
      path: modifyMessage
      type: endpoint
    - key: deleteMessage
      path: deleteMessage
      type: endpoint
    - key: MessageObject
      path: object
      type: object
    title: Messages
  - beta: true
    description: 'Represents an execution run on a thread.


      Related guide: [Assistants](/docs/assistants/overview)

      '
    id: runs
    navigationGroup: assistants
    sections:
    - key: createRun
      path: createRun
      type: endpoint
    - key: createThreadAndRun
      path: createThreadAndRun
      type: endpoint
    - key: listRuns
      path: listRuns
      type: endpoint
    - key: getRun
      path: getRun
      type: endpoint
    - key: modifyRun
      path: modifyRun
      type: endpoint
    - key: submitToolOuputsToRun
      path: submitToolOutputs
      type: endpoint
    - key: cancelRun
      path: cancelRun
      type: endpoint
    - key: RunObject
      path: object
      type: object
    title: Runs
  - beta: true
    description: 'Represents the steps (model and tool calls) taken during the run.


      Related guide: [Assistants](/docs/assistants/overview)

      '
    id: run-steps
    navigationGroup: assistants
    sections:
    - key: listRunSteps
      path: listRunSteps
      type: endpoint
    - key: getRunStep
      path: getRunStep
      type: endpoint
    - key: RunStepObject
      path: step-object
      type: object
    title: Run steps
  - beta: true
    description: 'Stream the result of executing a Run or resuming a Run after submitting
      tool outputs.

      You can stream events from the [Create Thread and Run](/docs/api-reference/runs/createThreadAndRun),

      [Create Run](/docs/api-reference/runs/createRun), and [Submit Tool Outputs](/docs/api-reference/runs/submitToolOutputs)

      endpoints by passing `"stream": true`. The response will be a [Server-Sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events)
      stream.

      Our Node and Python SDKs provide helpful utilities to make streaming easy. Reference
      the

      [Assistants API quickstart](/docs/assistants/overview) to learn more.

      '
    id: assistants-streaming
    navigationGroup: assistants
    sections:
    - key: MessageDeltaObject
      path: message-delta-object
      type: object
    - key: RunStepDeltaObject
      path: run-step-delta-object
      type: object
    - key: AssistantStreamEvent
      path: events
      type: object
    title: Streaming
  - description: 'Programmatically manage your organization.

      The Audit Logs endpoint provides a log of all actions taken in the organization
      for security and monitoring purposes.

      To access these endpoints please generate an Admin API Key through the [API
      Platform Organization overview](/organization/admin-keys). Admin API keys cannot
      be used for non-administration endpoints.

      For best practices on setting up your organization, please refer to this [guide](/docs/guides/production-best-practices#setting-up-your-organization)

      '
    id: administration
    navigationGroup: administration
    title: Administration
  - description: 'Admin API keys enable Organization Owners to programmatically manage
      various aspects of their organization, including users, projects, and API keys.
      These keys provide administrative capabilities, such as creating, updating,
      and deleting users; managing projects; and overseeing API key lifecycles.


      Key Features of Admin API Keys:


      - User Management: Invite new users, update roles, and remove users from the
      organization.


      - Project Management: Create, update, archive projects, and manage user assignments
      within projects.


      - API Key Oversight: List, retrieve, and delete API keys associated with projects.


      Only Organization Owners have the authority to create and utilize Admin API
      keys. To manage these keys, Organization Owners can navigate to the Admin Keys
      section of their API Platform dashboard.


      For direct access to the Admin Keys management page, Organization Owners can
      use the following link:


      [https://platform.openai.com/settings/organization/admin-keys](https://platform.openai.com/settings/organization/admin-keys)


      It''s crucial to handle Admin API keys with care due to their elevated permissions.
      Adhering to best practices, such as regular key rotation and assigning appropriate
      permissions, enhances security and ensures proper governance within the organization.

      '
    id: admin-api-keys
    navigationGroup: administration
    sections:
    - key: admin-api-keys-list
      path: list
      type: endpoint
    - key: admin-api-keys-create
      path: create
      type: endpoint
    - key: admin-api-keys-get
      path: listget
      type: endpoint
    - key: admin-api-keys-delete
      path: delete
      type: endpoint
    - key: AdminApiKey
      path: object
      type: object
    title: Admin API Keys
  - description: Invite and manage invitations for an organization.
    id: invite
    navigationGroup: administration
    sections:
    - key: list-invites
      path: list
      type: endpoint
    - key: inviteUser
      path: create
      type: endpoint
    - key: retrieve-invite
      path: retrieve
      type: endpoint
    - key: delete-invite
      path: delete
      type: endpoint
    - key: Invite
      path: object
      type: object
    title: Invites
  - description: 'Manage users and their role in an organization.

      '
    id: users
    navigationGroup: administration
    sections:
    - key: list-users
      path: list
      type: endpoint
    - key: modify-user
      path: modify
      type: endpoint
    - key: retrieve-user
      path: retrieve
      type: endpoint
    - key: delete-user
      path: delete
      type: endpoint
    - key: User
      path: object
      type: object
    title: Users
  - description: 'Manage the projects within an orgnanization includes creation, updating,
      and archiving or projects.

      The Default project cannot be archived.

      '
    id: projects
    navigationGroup: administration
    sections:
    - key: list-projects
      path: list
      type: endpoint
    - key: create-project
      path: create
      type: endpoint
    - key: retrieve-project
      path: retrieve
      type: endpoint
    - key: modify-project
      path: modify
      type: endpoint
    - key: archive-project
      path: archive
      type: endpoint
    - key: Project
      path: object
      type: object
    title: Projects
  - description: 'Manage users within a project, including adding, updating roles,
      and removing users.

      '
    id: project-users
    navigationGroup: administration
    sections:
    - key: list-project-users
      path: list
      type: endpoint
    - key: create-project-user
      path: creeate
      type: endpoint
    - key: retrieve-project-user
      path: retrieve
      type: endpoint
    - key: modify-project-user
      path: modify
      type: endpoint
    - key: delete-project-user
      path: delete
      type: endpoint
    - key: ProjectUser
      path: object
      type: object
    title: Project users
  - description: 'Manage service accounts within a project. A service account is a
      bot user that is not associated with a user.

      If a user leaves an organization, their keys and membership in projects will
      no longer work. Service accounts

      do not have this limitation. However, service accounts can also be deleted from
      a project.

      '
    id: project-service-accounts
    navigationGroup: administration
    sections:
    - key: list-project-service-accounts
      path: list
      type: endpoint
    - key: create-project-service-account
      path: create
      type: endpoint
    - key: retrieve-project-service-account
      path: retrieve
      type: endpoint
    - key: delete-project-service-account
      path: delete
      type: endpoint
    - key: ProjectServiceAccount
      path: object
      type: object
    title: Project service accounts
  - description: 'Manage API keys for a given project. Supports listing and deleting
      keys for users.

      This API does not allow issuing keys for users, as users need to authorize themselves
      to generate keys.

      '
    id: project-api-keys
    navigationGroup: administration
    sections:
    - key: list-project-api-keys
      path: list
      type: endpoint
    - key: retrieve-project-api-key
      path: retrieve
      type: endpoint
    - key: delete-project-api-key
      path: delete
      type: endpoint
    - key: ProjectApiKey
      path: object
      type: object
    title: Project API keys
  - description: 'Manage rate limits per model for projects. Rate limits may be configured
      to be equal to or lower than the organization''s rate limits.

      '
    id: project-rate-limits
    navigationGroup: administration
    sections:
    - key: list-project-rate-limits
      path: list
      type: endpoint
    - key: update-project-rate-limits
      path: update
      type: endpoint
    - key: ProjectRateLimit
      path: object
      type: object
    title: Project rate limits
  - description: 'Logs of user actions and configuration changes within this organization.

      To log events, an Organization Owner must activate logging in the [Data Controls
      Settings](/settings/organization/data-controls/data-retention).

      Once activated, for security reasons, logging cannot be deactivated.

      '
    id: audit-logs
    navigationGroup: administration
    sections:
    - key: list-audit-logs
      path: list
      type: endpoint
    - key: AuditLog
      path: object
      type: object
    title: Audit logs
  - description: 'The **Usage API** provides detailed insights into your activity
      across the OpenAI API. It also includes a separate [Costs endpoint](/docs/api-reference/usage/costs),
      which offers visibility into your spend, breaking down consumption by invoice
      line items and project IDs.


      While the Usage API delivers granular usage data, it may not always reconcile
      perfectly with the Costs due to minor differences in how usage and spend are
      recorded. For financial purposes, we recommend using the [Costs endpoint](/docs/api-reference/usage/costs)
      or the [Costs tab](/settings/organization/usage) in the Usage Dashboard, which
      will reconcile back to your billing invoice.

      '
    id: usage
    navigationGroup: administration
    sections:
    - key: usage-completions
      path: completions
      type: endpoint
    - key: UsageCompletionsResult
      path: completions_object
      type: object
    - key: usage-embeddings
      path: embeddings
      type: endpoint
    - key: UsageEmbeddingsResult
      path: embeddings_object
      type: object
    - key: usage-moderations
      path: moderations
      type: endpoint
    - key: UsageModerationsResult
      path: moderations_object
      type: object
    - key: usage-images
      path: images
      type: endpoint
    - key: UsageImagesResult
      path: images_object
      type: object
    - key: usage-audio-speeches
      path: audio_speeches
      type: endpoint
    - key: UsageAudioSpeechesResult
      path: audio_speeches_object
      type: object
    - key: usage-audio-transcriptions
      path: audio_transcriptions
      type: endpoint
    - key: UsageAudioTranscriptionsResult
      path: audio_transcriptions_object
      type: object
    - key: usage-vector-stores
      path: vector_stores
      type: endpoint
    - key: UsageVectorStoresResult
      path: vector_stores_object
      type: object
    - key: usage-code-interpreter-sessions
      path: code_interpreter_sessions
      type: endpoint
    - key: UsageCodeInterpreterSessionsResult
      path: code_interpreter_sessions_object
      type: object
    - key: usage-costs
      path: costs
      type: endpoint
    - key: CostsResult
      path: costs_object
      type: object
    title: Usage
  - beta: true
    description: 'Manage Mutual TLS certificates across your organization and projects.


      [Learn more about Mutual TLS.](https://help.openai.com/en/articles/10876024-openai-mutual-tls-beta-program)

      '
    id: certificates
    navigationGroup: administration
    sections:
    - key: uploadCertificate
      path: uploadCertificate
      type: endpoint
    - key: getCertificate
      path: getCertificate
      type: endpoint
    - key: modifyCertificate
      path: modifyCertificate
      type: endpoint
    - key: deleteCertificate
      path: deleteCertificate
      type: endpoint
    - key: listOrganizationCertificates
      path: listOrganizationCertificates
      type: endpoint
    - key: listProjectCertificates
      path: listProjectCertificates
      type: endpoint
    - key: activateOrganizationCertificates
      path: activateOrganizationCertificates
      type: endpoint
    - key: deactivateOrganizationCertificates
      path: deactivateOrganizationCertificates
      type: endpoint
    - key: activateProjectCertificates
      path: activateProjectCertificates
      type: endpoint
    - key: deactivateProjectCertificates
      path: deactivateProjectCertificates
      type: endpoint
    - key: Certificate
      path: object
      type: object
    title: Certificates
  - description: 'Given a prompt, the model will return one or more predicted completions
      along with the probabilities of alternative tokens at each position. Most developer
      should use our [Chat Completions API](/docs/guides/text-generation#text-generation-models)
      to leverage our best and newest models.

      '
    id: completions
    legacy: true
    navigationGroup: legacy
    sections:
    - key: createCompletion
      path: create
      type: endpoint
    - key: CreateCompletionResponse
      path: object
      type: object
    title: Completions
  navigationGroups:
  - id: responses
    title: Responses
  - id: chat
    title: Chat Completions
  - id: webhooks
    title: Webhooks
  - beta: true
    id: realtime
    title: Realtime
  - id: endpoints
    title: Platform APIs
  - id: vector_stores
    title: Vector stores
  - id: containers
    title: Containers
  - beta: true
    id: assistants
    title: Assistants
  - id: administration
    title: Administration
  - id: legacy
    title: Legacy
