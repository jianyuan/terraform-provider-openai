#@ load("@ytt:overlay", "overlay")

#@overlay/match by=overlay.all
---
#@ def rename_property(m, old, new):
#@   m = dict(m)
#@   if old in m:
#@     m[new] = m.pop(old)
#@   end
#@   return m
#@ end

#@ def fix_property(p):
#@   p = dict(p)
#@   if p.get("type") == "integer":
#@     p["format"] = "int64"
#@   end
#@   if "allOf" in p and len(p["allOf"]) == 2 and "nullable" in p["allOf"][1]:
#@     p["oneOf"] = p.pop("allOf")
#@   end
#@   return p
#@ end

#@ def fix_schemas(m):
#@   m = dict(m)
#@   for k, v in m.items():
#@     m[k] = dict(v)
#@     if "properties" in m[k]:
#@       m[k]["properties"] = dict({k: fix_property(v) for k, v in dict(m[k]["properties"]).items()})
#@     end
#@   end
#@   return m
#@ end

paths:
  /organization/admin_api_keys:
    post:
      requestBody:
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                #@overlay/match missing_ok=True
                type:
                  type: string
  /organization/invites:
    post:
      #@overlay/replace via=lambda left, _: rename_property(left, "200", "201")
      responses:
  /organization/projects:
    post:
      #@overlay/replace via=lambda left, _: rename_property(left, "200", "201")
      responses:
  /organization/projects/{project_id}/users:
    post:
      #@overlay/replace via=lambda left, _: rename_property(left, "200", "201")
      responses:
  /organization/projects/{project_id}/service_accounts:
    post:
      #@overlay/replace via=lambda left, _: rename_property(left, "200", "201")
      responses:
components:
  #@overlay/replace via=lambda left, _: fix_schemas(left)
  schemas:
