// Package apiclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for CertificateObject.
const (
	CertificateObjectCertificate                    CertificateObject = "certificate"
	CertificateObjectOrganizationCertificate        CertificateObject = "organization.certificate"
	CertificateObjectOrganizationProjectCertificate CertificateObject = "organization.project.certificate"
)

// Defines values for InviteObject.
const (
	OrganizationInvite InviteObject = "organization.invite"
)

// Defines values for InviteProjectsRole.
const (
	InviteProjectsRoleMember InviteProjectsRole = "member"
	InviteProjectsRoleOwner  InviteProjectsRole = "owner"
)

// Defines values for InviteRole.
const (
	InviteRoleOwner  InviteRole = "owner"
	InviteRoleReader InviteRole = "reader"
)

// Defines values for InviteStatus.
const (
	Accepted InviteStatus = "accepted"
	Expired  InviteStatus = "expired"
	Pending  InviteStatus = "pending"
)

// Defines values for InviteDeleteResponseObject.
const (
	OrganizationInviteDeleted InviteDeleteResponseObject = "organization.invite.deleted"
)

// Defines values for InviteListResponseObject.
const (
	InviteListResponseObjectList InviteListResponseObject = "list"
)

// Defines values for InviteRequestProjectsRole.
const (
	InviteRequestProjectsRoleMember InviteRequestProjectsRole = "member"
	InviteRequestProjectsRoleOwner  InviteRequestProjectsRole = "owner"
)

// Defines values for InviteRequestRole.
const (
	InviteRequestRoleOwner  InviteRequestRole = "owner"
	InviteRequestRoleReader InviteRequestRole = "reader"
)

// Defines values for ListCertificatesResponseObject.
const (
	ListCertificatesResponseObjectList ListCertificatesResponseObject = "list"
)

// Defines values for ProjectObject.
const (
	OrganizationProject ProjectObject = "organization.project"
)

// Defines values for ProjectStatus.
const (
	Active   ProjectStatus = "active"
	Archived ProjectStatus = "archived"
)

// Defines values for ProjectApiKeyObject.
const (
	OrganizationProjectApiKey ProjectApiKeyObject = "organization.project.api_key"
)

// Defines values for ProjectApiKeyOwnerType.
const (
	ProjectApiKeyOwnerTypeServiceAccount ProjectApiKeyOwnerType = "service_account"
	ProjectApiKeyOwnerTypeUser           ProjectApiKeyOwnerType = "user"
)

// Defines values for ProjectApiKeyDeleteResponseObject.
const (
	OrganizationProjectApiKeyDeleted ProjectApiKeyDeleteResponseObject = "organization.project.api_key.deleted"
)

// Defines values for ProjectApiKeyListResponseObject.
const (
	ProjectApiKeyListResponseObjectList ProjectApiKeyListResponseObject = "list"
)

// Defines values for ProjectCreateRequestGeography.
const (
	AU ProjectCreateRequestGeography = "AU"
	CA ProjectCreateRequestGeography = "CA"
	EU ProjectCreateRequestGeography = "EU"
	IN ProjectCreateRequestGeography = "IN"
	JP ProjectCreateRequestGeography = "JP"
	KR ProjectCreateRequestGeography = "KR"
	SG ProjectCreateRequestGeography = "SG"
	US ProjectCreateRequestGeography = "US"
)

// Defines values for ProjectListResponseObject.
const (
	ProjectListResponseObjectList ProjectListResponseObject = "list"
)

// Defines values for ProjectRateLimitObject.
const (
	ProjectRateLimitObjectProjectRateLimit ProjectRateLimitObject = "project.rate_limit"
)

// Defines values for ProjectRateLimitListResponseObject.
const (
	ProjectRateLimitListResponseObjectList ProjectRateLimitListResponseObject = "list"
)

// Defines values for ProjectServiceAccountObject.
const (
	ProjectServiceAccountObjectOrganizationProjectServiceAccount ProjectServiceAccountObject = "organization.project.service_account"
)

// Defines values for ProjectServiceAccountRole.
const (
	ProjectServiceAccountRoleMember ProjectServiceAccountRole = "member"
	ProjectServiceAccountRoleOwner  ProjectServiceAccountRole = "owner"
)

// Defines values for ProjectServiceAccountApiKeyObject.
const (
	OrganizationProjectServiceAccountApiKey ProjectServiceAccountApiKeyObject = "organization.project.service_account.api_key"
)

// Defines values for ProjectServiceAccountCreateResponseObject.
const (
	ProjectServiceAccountCreateResponseObjectOrganizationProjectServiceAccount ProjectServiceAccountCreateResponseObject = "organization.project.service_account"
)

// Defines values for ProjectServiceAccountCreateResponseRole.
const (
	ProjectServiceAccountCreateResponseRoleMember ProjectServiceAccountCreateResponseRole = "member"
)

// Defines values for ProjectServiceAccountDeleteResponseObject.
const (
	OrganizationProjectServiceAccountDeleted ProjectServiceAccountDeleteResponseObject = "organization.project.service_account.deleted"
)

// Defines values for ProjectServiceAccountListResponseObject.
const (
	ProjectServiceAccountListResponseObjectList ProjectServiceAccountListResponseObject = "list"
)

// Defines values for ProjectUserObject.
const (
	OrganizationProjectUser ProjectUserObject = "organization.project.user"
)

// Defines values for ProjectUserRole.
const (
	ProjectUserRoleMember ProjectUserRole = "member"
	ProjectUserRoleOwner  ProjectUserRole = "owner"
)

// Defines values for ProjectUserCreateRequestRole.
const (
	ProjectUserCreateRequestRoleMember ProjectUserCreateRequestRole = "member"
	ProjectUserCreateRequestRoleOwner  ProjectUserCreateRequestRole = "owner"
)

// Defines values for ProjectUserDeleteResponseObject.
const (
	OrganizationProjectUserDeleted ProjectUserDeleteResponseObject = "organization.project.user.deleted"
)

// Defines values for ProjectUserUpdateRequestRole.
const (
	ProjectUserUpdateRequestRoleMember ProjectUserUpdateRequestRole = "member"
	ProjectUserUpdateRequestRoleOwner  ProjectUserUpdateRequestRole = "owner"
)

// Defines values for UserObject.
const (
	OrganizationUser UserObject = "organization.user"
)

// Defines values for UserRole.
const (
	UserRoleOwner  UserRole = "owner"
	UserRoleReader UserRole = "reader"
)

// Defines values for UserDeleteResponseObject.
const (
	OrganizationUserDeleted UserDeleteResponseObject = "organization.user.deleted"
)

// Defines values for UserListResponseObject.
const (
	List UserListResponseObject = "list"
)

// Defines values for UserRoleUpdateRequestRole.
const (
	Owner  UserRoleUpdateRequestRole = "owner"
	Reader UserRoleUpdateRequestRole = "reader"
)

// Defines values for AdminApiKeysListParamsOrder.
const (
	AdminApiKeysListParamsOrderAsc  AdminApiKeysListParamsOrder = "asc"
	AdminApiKeysListParamsOrderDesc AdminApiKeysListParamsOrder = "desc"
)

// Defines values for ListOrganizationCertificatesParamsOrder.
const (
	ListOrganizationCertificatesParamsOrderAsc  ListOrganizationCertificatesParamsOrder = "asc"
	ListOrganizationCertificatesParamsOrderDesc ListOrganizationCertificatesParamsOrder = "desc"
)

// Defines values for GetCertificateParamsInclude.
const (
	Content GetCertificateParamsInclude = "content"
)

// Defines values for ListProjectCertificatesParamsOrder.
const (
	Asc  ListProjectCertificatesParamsOrder = "asc"
	Desc ListProjectCertificatesParamsOrder = "desc"
)

// AdminApiKey Represents an individual Admin API key in an org.
type AdminApiKey struct {
	// CreatedAt The Unix timestamp (in seconds) of when the API key was created
	CreatedAt int64 `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// LastUsedAt The Unix timestamp (in seconds) of when the API key was last used
	LastUsedAt *int64 `json:"last_used_at"`

	// Name The name of the API key
	Name string `json:"name"`

	// Object The object type, which is always `organization.admin_api_key`
	Object string `json:"object"`
	Owner  struct {
		// CreatedAt The Unix timestamp (in seconds) of when the user was created
		CreatedAt *int64 `json:"created_at,omitempty"`

		// Id The identifier, which can be referenced in API endpoints
		Id *string `json:"id,omitempty"`

		// Name The name of the user
		Name *string `json:"name,omitempty"`

		// Object The object type, which is always organization.user
		Object *string `json:"object,omitempty"`

		// Role Always `owner`
		Role *string `json:"role,omitempty"`

		// Type Always `user`
		Type *string `json:"type,omitempty"`
	} `json:"owner"`

	// RedactedValue The redacted value of the API key
	RedactedValue string `json:"redacted_value"`

	// Value The value of the API key. Only shown on create.
	Value *string `json:"value,omitempty"`
}

// ApiKeyList defines model for ApiKeyList.
type ApiKeyList struct {
	Data    *[]AdminApiKey `json:"data,omitempty"`
	FirstId *string        `json:"first_id,omitempty"`
	HasMore *bool          `json:"has_more,omitempty"`
	LastId  *string        `json:"last_id,omitempty"`
	Object  *string        `json:"object,omitempty"`
}

// Certificate Represents an individual `certificate` uploaded to the organization.
type Certificate struct {
	// Active Whether the certificate is currently active at the specified scope. Not returned when getting details for a specific certificate.
	Active             *bool `json:"active,omitempty"`
	CertificateDetails struct {
		// Content The content of the certificate in PEM format.
		Content *string `json:"content,omitempty"`

		// ExpiresAt The Unix timestamp (in seconds) of when the certificate expires.
		ExpiresAt *int64 `json:"expires_at,omitempty"`

		// ValidAt The Unix timestamp (in seconds) of when the certificate becomes valid.
		ValidAt *int64 `json:"valid_at,omitempty"`
	} `json:"certificate_details"`

	// CreatedAt The Unix timestamp (in seconds) of when the certificate was uploaded.
	CreatedAt int64 `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// Name The name of the certificate.
	Name string `json:"name"`

	// Object The object type.
	//
	// - If creating, updating, or getting a specific certificate, the object type is `certificate`.
	// - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
	// - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.
	Object CertificateObject `json:"object"`
}

// CertificateObject The object type.
//
// - If creating, updating, or getting a specific certificate, the object type is `certificate`.
// - If listing, activating, or deactivating certificates for the organization, the object type is `organization.certificate`.
// - If listing, activating, or deactivating certificates for a project, the object type is `organization.project.certificate`.
type CertificateObject string

// DeleteCertificateResponse defines model for DeleteCertificateResponse.
type DeleteCertificateResponse struct {
	// Id The ID of the certificate that was deleted.
	Id string `json:"id"`

	// Object The object type, must be `certificate.deleted`.
	Object interface{} `json:"object"`
}

// Error defines model for Error.
type Error struct {
	Code    *string `json:"code"`
	Message string  `json:"message"`
	Param   *string `json:"param"`
	Type    string  `json:"type"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error Error `json:"error"`
}

// Invite Represents an individual `invite` to the organization.
type Invite struct {
	// AcceptedAt The Unix timestamp (in seconds) of when the invite was accepted.
	AcceptedAt *int64 `json:"accepted_at,omitempty"`

	// Email The email address of the individual to whom the invite was sent
	Email string `json:"email"`

	// ExpiresAt The Unix timestamp (in seconds) of when the invite expires.
	ExpiresAt int64 `json:"expires_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// InvitedAt The Unix timestamp (in seconds) of when the invite was sent.
	InvitedAt int64 `json:"invited_at"`

	// Object The object type, which is always `organization.invite`
	Object InviteObject `json:"object"`

	// Projects The projects that were granted membership upon acceptance of the invite.
	Projects *[]struct {
		// Id Project's public ID
		Id *string `json:"id,omitempty"`

		// Role Project membership role
		Role *InviteProjectsRole `json:"role,omitempty"`
	} `json:"projects,omitempty"`

	// Role `owner` or `reader`
	Role InviteRole `json:"role"`

	// Status `accepted`,`expired`, or `pending`
	Status InviteStatus `json:"status"`
}

// InviteObject The object type, which is always `organization.invite`
type InviteObject string

// InviteProjectsRole Project membership role
type InviteProjectsRole string

// InviteRole `owner` or `reader`
type InviteRole string

// InviteStatus `accepted`,`expired`, or `pending`
type InviteStatus string

// InviteDeleteResponse defines model for InviteDeleteResponse.
type InviteDeleteResponse struct {
	Deleted bool   `json:"deleted"`
	Id      string `json:"id"`

	// Object The object type, which is always `organization.invite.deleted`
	Object InviteDeleteResponseObject `json:"object"`
}

// InviteDeleteResponseObject The object type, which is always `organization.invite.deleted`
type InviteDeleteResponseObject string

// InviteListResponse defines model for InviteListResponse.
type InviteListResponse struct {
	Data []Invite `json:"data"`

	// FirstId The first `invite_id` in the retrieved `list`
	FirstId *string `json:"first_id,omitempty"`

	// HasMore The `has_more` property is used for pagination to indicate there are additional results.
	HasMore *bool `json:"has_more,omitempty"`

	// LastId The last `invite_id` in the retrieved `list`
	LastId *string `json:"last_id,omitempty"`

	// Object The object type, which is always `list`
	Object InviteListResponseObject `json:"object"`
}

// InviteListResponseObject The object type, which is always `list`
type InviteListResponseObject string

// InviteRequest defines model for InviteRequest.
type InviteRequest struct {
	// Email Send an email to this address
	Email string `json:"email"`

	// Projects An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
	Projects *[]struct {
		// Id Project's public ID
		Id string `json:"id"`

		// Role Project membership role
		Role InviteRequestProjectsRole `json:"role"`
	} `json:"projects,omitempty"`

	// Role `owner` or `reader`
	Role InviteRequestRole `json:"role"`
}

// InviteRequestProjectsRole Project membership role
type InviteRequestProjectsRole string

// InviteRequestRole `owner` or `reader`
type InviteRequestRole string

// ListCertificatesResponse defines model for ListCertificatesResponse.
type ListCertificatesResponse struct {
	Data    []Certificate                  `json:"data"`
	FirstId *string                        `json:"first_id,omitempty"`
	HasMore bool                           `json:"has_more"`
	LastId  *string                        `json:"last_id,omitempty"`
	Object  ListCertificatesResponseObject `json:"object"`
}

// ListCertificatesResponseObject defines model for ListCertificatesResponse.Object.
type ListCertificatesResponseObject string

// ModifyCertificateRequest defines model for ModifyCertificateRequest.
type ModifyCertificateRequest struct {
	// Name The updated name for the certificate
	Name string `json:"name"`
}

// Project Represents an individual project.
type Project struct {
	// ArchivedAt The Unix timestamp (in seconds) of when the project was archived or `null`.
	ArchivedAt *int64 `json:"archived_at"`

	// CreatedAt The Unix timestamp (in seconds) of when the project was created.
	CreatedAt int64 `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// Name The name of the project. This appears in reporting.
	Name string `json:"name"`

	// Object The object type, which is always `organization.project`
	Object ProjectObject `json:"object"`

	// Status `active` or `archived`
	Status ProjectStatus `json:"status"`
}

// ProjectObject The object type, which is always `organization.project`
type ProjectObject string

// ProjectStatus `active` or `archived`
type ProjectStatus string

// ProjectApiKey Represents an individual API key in a project.
type ProjectApiKey struct {
	// CreatedAt The Unix timestamp (in seconds) of when the API key was created
	CreatedAt int64 `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// LastUsedAt The Unix timestamp (in seconds) of when the API key was last used.
	LastUsedAt int64 `json:"last_used_at"`

	// Name The name of the API key
	Name string `json:"name"`

	// Object The object type, which is always `organization.project.api_key`
	Object ProjectApiKeyObject `json:"object"`
	Owner  struct {
		// ServiceAccount Represents an individual service account in a project.
		ServiceAccount *ProjectServiceAccount `json:"service_account,omitempty"`

		// Type `user` or `service_account`
		Type *ProjectApiKeyOwnerType `json:"type,omitempty"`

		// User Represents an individual user in a project.
		User *ProjectUser `json:"user,omitempty"`
	} `json:"owner"`

	// RedactedValue The redacted value of the API key
	RedactedValue string `json:"redacted_value"`
}

// ProjectApiKeyObject The object type, which is always `organization.project.api_key`
type ProjectApiKeyObject string

// ProjectApiKeyOwnerType `user` or `service_account`
type ProjectApiKeyOwnerType string

// ProjectApiKeyDeleteResponse defines model for ProjectApiKeyDeleteResponse.
type ProjectApiKeyDeleteResponse struct {
	Deleted bool                              `json:"deleted"`
	Id      string                            `json:"id"`
	Object  ProjectApiKeyDeleteResponseObject `json:"object"`
}

// ProjectApiKeyDeleteResponseObject defines model for ProjectApiKeyDeleteResponse.Object.
type ProjectApiKeyDeleteResponseObject string

// ProjectApiKeyListResponse defines model for ProjectApiKeyListResponse.
type ProjectApiKeyListResponse struct {
	Data    []ProjectApiKey                 `json:"data"`
	FirstId string                          `json:"first_id"`
	HasMore bool                            `json:"has_more"`
	LastId  string                          `json:"last_id"`
	Object  ProjectApiKeyListResponseObject `json:"object"`
}

// ProjectApiKeyListResponseObject defines model for ProjectApiKeyListResponse.Object.
type ProjectApiKeyListResponseObject string

// ProjectCreateRequest defines model for ProjectCreateRequest.
type ProjectCreateRequest struct {
	// Geography Create the project with the specified data residency region. Your organization must have access to Data residency functionality in order to use. See [data residency controls](https://platform.openai.com/docs/guides/your-data#data-residency-controls) to review the functionality and limitations of setting this field.
	Geography *ProjectCreateRequestGeography `json:"geography,omitempty"`

	// Name The friendly name of the project, this name appears in reports.
	Name string `json:"name"`
}

// ProjectCreateRequestGeography Create the project with the specified data residency region. Your organization must have access to Data residency functionality in order to use. See [data residency controls](https://platform.openai.com/docs/guides/your-data#data-residency-controls) to review the functionality and limitations of setting this field.
type ProjectCreateRequestGeography string

// ProjectListResponse defines model for ProjectListResponse.
type ProjectListResponse struct {
	Data    []Project                 `json:"data"`
	FirstId string                    `json:"first_id"`
	HasMore bool                      `json:"has_more"`
	LastId  string                    `json:"last_id"`
	Object  ProjectListResponseObject `json:"object"`
}

// ProjectListResponseObject defines model for ProjectListResponse.Object.
type ProjectListResponseObject string

// ProjectRateLimit Represents a project rate limit config.
type ProjectRateLimit struct {
	// Batch1DayMaxInputTokens The maximum batch input tokens per day. Only present for relevant models.
	Batch1DayMaxInputTokens *int64 `json:"batch_1_day_max_input_tokens,omitempty"`

	// Id The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`

	// MaxAudioMegabytesPer1Minute The maximum audio megabytes per minute. Only present for relevant models.
	MaxAudioMegabytesPer1Minute *int64 `json:"max_audio_megabytes_per_1_minute,omitempty"`

	// MaxImagesPer1Minute The maximum images per minute. Only present for relevant models.
	MaxImagesPer1Minute *int64 `json:"max_images_per_1_minute,omitempty"`

	// MaxRequestsPer1Day The maximum requests per day. Only present for relevant models.
	MaxRequestsPer1Day *int64 `json:"max_requests_per_1_day,omitempty"`

	// MaxRequestsPer1Minute The maximum requests per minute.
	MaxRequestsPer1Minute int64 `json:"max_requests_per_1_minute"`

	// MaxTokensPer1Minute The maximum tokens per minute.
	MaxTokensPer1Minute int64 `json:"max_tokens_per_1_minute"`

	// Model The model this rate limit applies to.
	Model string `json:"model"`

	// Object The object type, which is always `project.rate_limit`
	Object ProjectRateLimitObject `json:"object"`
}

// ProjectRateLimitObject The object type, which is always `project.rate_limit`
type ProjectRateLimitObject string

// ProjectRateLimitListResponse defines model for ProjectRateLimitListResponse.
type ProjectRateLimitListResponse struct {
	Data    []ProjectRateLimit                 `json:"data"`
	FirstId string                             `json:"first_id"`
	HasMore bool                               `json:"has_more"`
	LastId  string                             `json:"last_id"`
	Object  ProjectRateLimitListResponseObject `json:"object"`
}

// ProjectRateLimitListResponseObject defines model for ProjectRateLimitListResponse.Object.
type ProjectRateLimitListResponseObject string

// ProjectRateLimitUpdateRequest defines model for ProjectRateLimitUpdateRequest.
type ProjectRateLimitUpdateRequest struct {
	// Batch1DayMaxInputTokens The maximum batch input tokens per day. Only relevant for certain models.
	Batch1DayMaxInputTokens *int64 `json:"batch_1_day_max_input_tokens,omitempty"`

	// MaxAudioMegabytesPer1Minute The maximum audio megabytes per minute. Only relevant for certain models.
	MaxAudioMegabytesPer1Minute *int64 `json:"max_audio_megabytes_per_1_minute,omitempty"`

	// MaxImagesPer1Minute The maximum images per minute. Only relevant for certain models.
	MaxImagesPer1Minute *int64 `json:"max_images_per_1_minute,omitempty"`

	// MaxRequestsPer1Day The maximum requests per day. Only relevant for certain models.
	MaxRequestsPer1Day *int64 `json:"max_requests_per_1_day,omitempty"`

	// MaxRequestsPer1Minute The maximum requests per minute.
	MaxRequestsPer1Minute *int64 `json:"max_requests_per_1_minute,omitempty"`

	// MaxTokensPer1Minute The maximum tokens per minute.
	MaxTokensPer1Minute *int64 `json:"max_tokens_per_1_minute,omitempty"`
}

// ProjectServiceAccount Represents an individual service account in a project.
type ProjectServiceAccount struct {
	// CreatedAt The Unix timestamp (in seconds) of when the service account was created
	CreatedAt int64 `json:"created_at"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// Name The name of the service account
	Name string `json:"name"`

	// Object The object type, which is always `organization.project.service_account`
	Object ProjectServiceAccountObject `json:"object"`

	// Role `owner` or `member`
	Role ProjectServiceAccountRole `json:"role"`
}

// ProjectServiceAccountObject The object type, which is always `organization.project.service_account`
type ProjectServiceAccountObject string

// ProjectServiceAccountRole `owner` or `member`
type ProjectServiceAccountRole string

// ProjectServiceAccountApiKey defines model for ProjectServiceAccountApiKey.
type ProjectServiceAccountApiKey struct {
	CreatedAt int64  `json:"created_at"`
	Id        string `json:"id"`
	Name      string `json:"name"`

	// Object The object type, which is always `organization.project.service_account.api_key`
	Object ProjectServiceAccountApiKeyObject `json:"object"`
	Value  string                            `json:"value"`
}

// ProjectServiceAccountApiKeyObject The object type, which is always `organization.project.service_account.api_key`
type ProjectServiceAccountApiKeyObject string

// ProjectServiceAccountCreateRequest defines model for ProjectServiceAccountCreateRequest.
type ProjectServiceAccountCreateRequest struct {
	// Name The name of the service account being created.
	Name string `json:"name"`
}

// ProjectServiceAccountCreateResponse defines model for ProjectServiceAccountCreateResponse.
type ProjectServiceAccountCreateResponse struct {
	ApiKey    ProjectServiceAccountApiKey               `json:"api_key"`
	CreatedAt int64                                     `json:"created_at"`
	Id        string                                    `json:"id"`
	Name      string                                    `json:"name"`
	Object    ProjectServiceAccountCreateResponseObject `json:"object"`

	// Role Service accounts can only have one role of type `member`
	Role ProjectServiceAccountCreateResponseRole `json:"role"`
}

// ProjectServiceAccountCreateResponseObject defines model for ProjectServiceAccountCreateResponse.Object.
type ProjectServiceAccountCreateResponseObject string

// ProjectServiceAccountCreateResponseRole Service accounts can only have one role of type `member`
type ProjectServiceAccountCreateResponseRole string

// ProjectServiceAccountDeleteResponse defines model for ProjectServiceAccountDeleteResponse.
type ProjectServiceAccountDeleteResponse struct {
	Deleted bool                                      `json:"deleted"`
	Id      string                                    `json:"id"`
	Object  ProjectServiceAccountDeleteResponseObject `json:"object"`
}

// ProjectServiceAccountDeleteResponseObject defines model for ProjectServiceAccountDeleteResponse.Object.
type ProjectServiceAccountDeleteResponseObject string

// ProjectServiceAccountListResponse defines model for ProjectServiceAccountListResponse.
type ProjectServiceAccountListResponse struct {
	Data    []ProjectServiceAccount                 `json:"data"`
	FirstId string                                  `json:"first_id"`
	HasMore bool                                    `json:"has_more"`
	LastId  string                                  `json:"last_id"`
	Object  ProjectServiceAccountListResponseObject `json:"object"`
}

// ProjectServiceAccountListResponseObject defines model for ProjectServiceAccountListResponse.Object.
type ProjectServiceAccountListResponseObject string

// ProjectUpdateRequest defines model for ProjectUpdateRequest.
type ProjectUpdateRequest struct {
	// Name The updated name of the project, this name appears in reports.
	Name string `json:"name"`
}

// ProjectUser Represents an individual user in a project.
type ProjectUser struct {
	// AddedAt The Unix timestamp (in seconds) of when the project was added.
	AddedAt int64 `json:"added_at"`

	// Email The email address of the user
	Email string `json:"email"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// Name The name of the user
	Name string `json:"name"`

	// Object The object type, which is always `organization.project.user`
	Object ProjectUserObject `json:"object"`

	// Role `owner` or `member`
	Role ProjectUserRole `json:"role"`
}

// ProjectUserObject The object type, which is always `organization.project.user`
type ProjectUserObject string

// ProjectUserRole `owner` or `member`
type ProjectUserRole string

// ProjectUserCreateRequest defines model for ProjectUserCreateRequest.
type ProjectUserCreateRequest struct {
	// Role `owner` or `member`
	Role ProjectUserCreateRequestRole `json:"role"`

	// UserId The ID of the user.
	UserId string `json:"user_id"`
}

// ProjectUserCreateRequestRole `owner` or `member`
type ProjectUserCreateRequestRole string

// ProjectUserDeleteResponse defines model for ProjectUserDeleteResponse.
type ProjectUserDeleteResponse struct {
	Deleted bool                            `json:"deleted"`
	Id      string                          `json:"id"`
	Object  ProjectUserDeleteResponseObject `json:"object"`
}

// ProjectUserDeleteResponseObject defines model for ProjectUserDeleteResponse.Object.
type ProjectUserDeleteResponseObject string

// ProjectUserListResponse defines model for ProjectUserListResponse.
type ProjectUserListResponse struct {
	Data    []ProjectUser `json:"data"`
	FirstId string        `json:"first_id"`
	HasMore bool          `json:"has_more"`
	LastId  string        `json:"last_id"`
	Object  string        `json:"object"`
}

// ProjectUserUpdateRequest defines model for ProjectUserUpdateRequest.
type ProjectUserUpdateRequest struct {
	// Role `owner` or `member`
	Role ProjectUserUpdateRequestRole `json:"role"`
}

// ProjectUserUpdateRequestRole `owner` or `member`
type ProjectUserUpdateRequestRole string

// ToggleCertificatesRequest defines model for ToggleCertificatesRequest.
type ToggleCertificatesRequest struct {
	CertificateIds []string `json:"certificate_ids"`
}

// UploadCertificateRequest defines model for UploadCertificateRequest.
type UploadCertificateRequest struct {
	// Content The certificate content in PEM format
	Content string `json:"content"`

	// Name An optional name for the certificate
	Name *string `json:"name,omitempty"`
}

// User Represents an individual `user` within an organization.
type User struct {
	// AddedAt The Unix timestamp (in seconds) of when the user was added.
	AddedAt int64 `json:"added_at"`

	// Email The email address of the user
	Email string `json:"email"`

	// Id The identifier, which can be referenced in API endpoints
	Id string `json:"id"`

	// Name The name of the user
	Name string `json:"name"`

	// Object The object type, which is always `organization.user`
	Object UserObject `json:"object"`

	// Role `owner` or `reader`
	Role UserRole `json:"role"`
}

// UserObject The object type, which is always `organization.user`
type UserObject string

// UserRole `owner` or `reader`
type UserRole string

// UserDeleteResponse defines model for UserDeleteResponse.
type UserDeleteResponse struct {
	Deleted bool                     `json:"deleted"`
	Id      string                   `json:"id"`
	Object  UserDeleteResponseObject `json:"object"`
}

// UserDeleteResponseObject defines model for UserDeleteResponse.Object.
type UserDeleteResponseObject string

// UserListResponse defines model for UserListResponse.
type UserListResponse struct {
	Data    []User                 `json:"data"`
	FirstId string                 `json:"first_id"`
	HasMore bool                   `json:"has_more"`
	LastId  string                 `json:"last_id"`
	Object  UserListResponseObject `json:"object"`
}

// UserListResponseObject defines model for UserListResponse.Object.
type UserListResponseObject string

// UserRoleUpdateRequest defines model for UserRoleUpdateRequest.
type UserRoleUpdateRequest struct {
	// Role `owner` or `reader`
	Role UserRoleUpdateRequestRole `json:"role"`
}

// UserRoleUpdateRequestRole `owner` or `reader`
type UserRoleUpdateRequestRole string

// AdminApiKeysListParams defines parameters for AdminApiKeysList.
type AdminApiKeysListParams struct {
	After *string                      `form:"after,omitempty" json:"after,omitempty"`
	Order *AdminApiKeysListParamsOrder `form:"order,omitempty" json:"order,omitempty"`
	Limit *int64                       `form:"limit,omitempty" json:"limit,omitempty"`
}

// AdminApiKeysListParamsOrder defines parameters for AdminApiKeysList.
type AdminApiKeysListParamsOrder string

// AdminApiKeysCreateJSONBody defines parameters for AdminApiKeysCreate.
type AdminApiKeysCreateJSONBody struct {
	Name string `json:"name"`
}

// ListOrganizationCertificatesParams defines parameters for ListOrganizationCertificates.
type ListOrganizationCertificatesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListOrganizationCertificatesParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// ListOrganizationCertificatesParamsOrder defines parameters for ListOrganizationCertificates.
type ListOrganizationCertificatesParamsOrder string

// GetCertificateParams defines parameters for GetCertificate.
type GetCertificateParams struct {
	// Include A list of additional fields to include in the response. Currently the only supported value is `content` to fetch the PEM content of the certificate.
	Include *[]GetCertificateParamsInclude `form:"include,omitempty" json:"include,omitempty"`
}

// GetCertificateParamsInclude defines parameters for GetCertificate.
type GetCertificateParamsInclude string

// ListInvitesParams defines parameters for ListInvites.
type ListInvitesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// ListProjectsParams defines parameters for ListProjects.
type ListProjectsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// IncludeArchived If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
	IncludeArchived *bool `form:"include_archived,omitempty" json:"include_archived,omitempty"`
}

// ListProjectApiKeysParams defines parameters for ListProjectApiKeys.
type ListProjectApiKeysParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// ListProjectCertificatesParams defines parameters for ListProjectCertificates.
type ListProjectCertificatesParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Order Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
	Order *ListProjectCertificatesParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// ListProjectCertificatesParamsOrder defines parameters for ListProjectCertificates.
type ListProjectCertificatesParamsOrder string

// ListProjectRateLimitsParams defines parameters for ListProjectRateLimits.
type ListProjectRateLimitsParams struct {
	// Limit A limit on the number of objects to be returned. The default is 100.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
	Before *string `form:"before,omitempty" json:"before,omitempty"`
}

// ListProjectServiceAccountsParams defines parameters for ListProjectServiceAccounts.
type ListProjectServiceAccountsParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// ListProjectUsersParams defines parameters for ListProjectUsers.
type ListProjectUsersParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Limit A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
	Limit *int64 `form:"limit,omitempty" json:"limit,omitempty"`

	// After A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Emails Filter by the email address of users.
	Emails *[]string `form:"emails,omitempty" json:"emails,omitempty"`
}

// AdminApiKeysCreateJSONRequestBody defines body for AdminApiKeysCreate for application/json ContentType.
type AdminApiKeysCreateJSONRequestBody AdminApiKeysCreateJSONBody

// UploadCertificateJSONRequestBody defines body for UploadCertificate for application/json ContentType.
type UploadCertificateJSONRequestBody = UploadCertificateRequest

// ActivateOrganizationCertificatesJSONRequestBody defines body for ActivateOrganizationCertificates for application/json ContentType.
type ActivateOrganizationCertificatesJSONRequestBody = ToggleCertificatesRequest

// DeactivateOrganizationCertificatesJSONRequestBody defines body for DeactivateOrganizationCertificates for application/json ContentType.
type DeactivateOrganizationCertificatesJSONRequestBody = ToggleCertificatesRequest

// ModifyCertificateJSONRequestBody defines body for ModifyCertificate for application/json ContentType.
type ModifyCertificateJSONRequestBody = ModifyCertificateRequest

// InviteUserJSONRequestBody defines body for InviteUser for application/json ContentType.
type InviteUserJSONRequestBody = InviteRequest

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = ProjectCreateRequest

// ModifyProjectJSONRequestBody defines body for ModifyProject for application/json ContentType.
type ModifyProjectJSONRequestBody = ProjectUpdateRequest

// ActivateProjectCertificatesJSONRequestBody defines body for ActivateProjectCertificates for application/json ContentType.
type ActivateProjectCertificatesJSONRequestBody = ToggleCertificatesRequest

// DeactivateProjectCertificatesJSONRequestBody defines body for DeactivateProjectCertificates for application/json ContentType.
type DeactivateProjectCertificatesJSONRequestBody = ToggleCertificatesRequest

// UpdateProjectRateLimitsJSONRequestBody defines body for UpdateProjectRateLimits for application/json ContentType.
type UpdateProjectRateLimitsJSONRequestBody = ProjectRateLimitUpdateRequest

// CreateProjectServiceAccountJSONRequestBody defines body for CreateProjectServiceAccount for application/json ContentType.
type CreateProjectServiceAccountJSONRequestBody = ProjectServiceAccountCreateRequest

// CreateProjectUserJSONRequestBody defines body for CreateProjectUser for application/json ContentType.
type CreateProjectUserJSONRequestBody = ProjectUserCreateRequest

// ModifyProjectUserJSONRequestBody defines body for ModifyProjectUser for application/json ContentType.
type ModifyProjectUserJSONRequestBody = ProjectUserUpdateRequest

// ModifyUserJSONRequestBody defines body for ModifyUser for application/json ContentType.
type ModifyUserJSONRequestBody = UserRoleUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminApiKeysList request
	AdminApiKeysList(ctx context.Context, params *AdminApiKeysListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminApiKeysCreateWithBody request with any body
	AdminApiKeysCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminApiKeysCreate(ctx context.Context, body AdminApiKeysCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminApiKeysDelete request
	AdminApiKeysDelete(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminApiKeysGet request
	AdminApiKeysGet(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganizationCertificates request
	ListOrganizationCertificates(ctx context.Context, params *ListOrganizationCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadCertificateWithBody request with any body
	UploadCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadCertificate(ctx context.Context, body UploadCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateOrganizationCertificatesWithBody request with any body
	ActivateOrganizationCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateOrganizationCertificates(ctx context.Context, body ActivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeactivateOrganizationCertificatesWithBody request with any body
	DeactivateOrganizationCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeactivateOrganizationCertificates(ctx context.Context, body DeactivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificate request
	DeleteCertificate(ctx context.Context, certificateId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificate request
	GetCertificate(ctx context.Context, certificateId string, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyCertificateWithBody request with any body
	ModifyCertificateWithBody(ctx context.Context, certificateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyCertificate(ctx context.Context, certificateId string, body ModifyCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvites request
	ListInvites(ctx context.Context, params *ListInvitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InviteUserWithBody request with any body
	InviteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InviteUser(ctx context.Context, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvite request
	DeleteInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveInvite request
	RetrieveInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjects request
	ListProjects(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveProject request
	RetrieveProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProjectWithBody request with any body
	ModifyProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProject(ctx context.Context, projectId string, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectApiKeys request
	ListProjectApiKeys(ctx context.Context, projectId string, params *ListProjectApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectApiKey request
	DeleteProjectApiKey(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveProjectApiKey request
	RetrieveProjectApiKey(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveProject request
	ArchiveProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectCertificates request
	ListProjectCertificates(ctx context.Context, projectId string, params *ListProjectCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateProjectCertificatesWithBody request with any body
	ActivateProjectCertificatesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateProjectCertificates(ctx context.Context, projectId string, body ActivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeactivateProjectCertificatesWithBody request with any body
	DeactivateProjectCertificatesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeactivateProjectCertificates(ctx context.Context, projectId string, body DeactivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectRateLimits request
	ListProjectRateLimits(ctx context.Context, projectId string, params *ListProjectRateLimitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectRateLimitsWithBody request with any body
	UpdateProjectRateLimitsWithBody(ctx context.Context, projectId string, rateLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectRateLimits(ctx context.Context, projectId string, rateLimitId string, body UpdateProjectRateLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectServiceAccounts request
	ListProjectServiceAccounts(ctx context.Context, projectId string, params *ListProjectServiceAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectServiceAccountWithBody request with any body
	CreateProjectServiceAccountWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectServiceAccount(ctx context.Context, projectId string, body CreateProjectServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectServiceAccount request
	DeleteProjectServiceAccount(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveProjectServiceAccount request
	RetrieveProjectServiceAccount(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectUsers request
	ListProjectUsers(ctx context.Context, projectId string, params *ListProjectUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectUserWithBody request with any body
	CreateProjectUserWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectUser(ctx context.Context, projectId string, body CreateProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectUser request
	DeleteProjectUser(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveProjectUser request
	RetrieveProjectUser(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyProjectUserWithBody request with any body
	ModifyProjectUserWithBody(ctx context.Context, projectId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyProjectUser(ctx context.Context, projectId string, userId string, body ModifyProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveUser request
	RetrieveUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ModifyUserWithBody request with any body
	ModifyUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ModifyUser(ctx context.Context, userId string, body ModifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminApiKeysList(ctx context.Context, params *AdminApiKeysListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminApiKeysListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminApiKeysCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminApiKeysCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminApiKeysCreate(ctx context.Context, body AdminApiKeysCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminApiKeysCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminApiKeysDelete(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminApiKeysDeleteRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminApiKeysGet(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminApiKeysGetRequest(c.Server, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganizationCertificates(ctx context.Context, params *ListOrganizationCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationCertificatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadCertificateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadCertificateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadCertificate(ctx context.Context, body UploadCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadCertificateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateOrganizationCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateOrganizationCertificatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateOrganizationCertificates(ctx context.Context, body ActivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateOrganizationCertificatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateOrganizationCertificatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateOrganizationCertificatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateOrganizationCertificates(ctx context.Context, body DeactivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateOrganizationCertificatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificate(ctx context.Context, certificateId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateRequest(c.Server, certificateId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificate(ctx context.Context, certificateId string, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificateRequest(c.Server, certificateId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyCertificateWithBody(ctx context.Context, certificateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyCertificateRequestWithBody(c.Server, certificateId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyCertificate(ctx context.Context, certificateId string, body ModifyCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyCertificateRequest(c.Server, certificateId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvites(ctx context.Context, params *ListInvitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InviteUser(ctx context.Context, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInviteUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInviteRequest(c.Server, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveInvite(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveInviteRequest(c.Server, inviteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjects(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProjectWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProject(ctx context.Context, projectId string, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectApiKeys(ctx context.Context, projectId string, params *ListProjectApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectApiKeysRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectApiKey(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectApiKeyRequest(c.Server, projectId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveProjectApiKey(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveProjectApiKeyRequest(c.Server, projectId, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveProject(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveProjectRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectCertificates(ctx context.Context, projectId string, params *ListProjectCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectCertificatesRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateProjectCertificatesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateProjectCertificatesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateProjectCertificates(ctx context.Context, projectId string, body ActivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateProjectCertificatesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateProjectCertificatesWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateProjectCertificatesRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateProjectCertificates(ctx context.Context, projectId string, body DeactivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateProjectCertificatesRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectRateLimits(ctx context.Context, projectId string, params *ListProjectRateLimitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectRateLimitsRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectRateLimitsWithBody(ctx context.Context, projectId string, rateLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRateLimitsRequestWithBody(c.Server, projectId, rateLimitId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectRateLimits(ctx context.Context, projectId string, rateLimitId string, body UpdateProjectRateLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectRateLimitsRequest(c.Server, projectId, rateLimitId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectServiceAccounts(ctx context.Context, projectId string, params *ListProjectServiceAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectServiceAccountsRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectServiceAccountWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectServiceAccountRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectServiceAccount(ctx context.Context, projectId string, body CreateProjectServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectServiceAccountRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectServiceAccount(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectServiceAccountRequest(c.Server, projectId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveProjectServiceAccount(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveProjectServiceAccountRequest(c.Server, projectId, serviceAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectUsers(ctx context.Context, projectId string, params *ListProjectUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectUsersRequest(c.Server, projectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectUserWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectUserRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectUser(ctx context.Context, projectId string, body CreateProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectUserRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectUser(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectUserRequest(c.Server, projectId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveProjectUser(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveProjectUserRequest(c.Server, projectId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProjectUserWithBody(ctx context.Context, projectId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectUserRequestWithBody(c.Server, projectId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyProjectUser(ctx context.Context, projectId string, userId string, body ModifyProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyProjectUserRequest(c.Server, projectId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ModifyUser(ctx context.Context, userId string, body ModifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewModifyUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminApiKeysListRequest generates requests for AdminApiKeysList
func NewAdminApiKeysListRequest(server string, params *AdminApiKeysListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/admin_api_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminApiKeysCreateRequest calls the generic AdminApiKeysCreate builder with application/json body
func NewAdminApiKeysCreateRequest(server string, body AdminApiKeysCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminApiKeysCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminApiKeysCreateRequestWithBody generates requests for AdminApiKeysCreate with any type of body
func NewAdminApiKeysCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/admin_api_keys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminApiKeysDeleteRequest generates requests for AdminApiKeysDelete
func NewAdminApiKeysDeleteRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/admin_api_keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminApiKeysGetRequest generates requests for AdminApiKeysGet
func NewAdminApiKeysGetRequest(server string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/admin_api_keys/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOrganizationCertificatesRequest generates requests for ListOrganizationCertificates
func NewListOrganizationCertificatesRequest(server string, params *ListOrganizationCertificatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadCertificateRequest calls the generic UploadCertificate builder with application/json body
func NewUploadCertificateRequest(server string, body UploadCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadCertificateRequestWithBody(server, "application/json", bodyReader)
}

// NewUploadCertificateRequestWithBody generates requests for UploadCertificate with any type of body
func NewUploadCertificateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewActivateOrganizationCertificatesRequest calls the generic ActivateOrganizationCertificates builder with application/json body
func NewActivateOrganizationCertificatesRequest(server string, body ActivateOrganizationCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateOrganizationCertificatesRequestWithBody(server, "application/json", bodyReader)
}

// NewActivateOrganizationCertificatesRequestWithBody generates requests for ActivateOrganizationCertificates with any type of body
func NewActivateOrganizationCertificatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates/activate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeactivateOrganizationCertificatesRequest calls the generic DeactivateOrganizationCertificates builder with application/json body
func NewDeactivateOrganizationCertificatesRequest(server string, body DeactivateOrganizationCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeactivateOrganizationCertificatesRequestWithBody(server, "application/json", bodyReader)
}

// NewDeactivateOrganizationCertificatesRequestWithBody generates requests for DeactivateOrganizationCertificates with any type of body
func NewDeactivateOrganizationCertificatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates/deactivate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCertificateRequest generates requests for DeleteCertificate
func NewDeleteCertificateRequest(server string, certificateId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate_id", runtime.ParamLocationPath, certificateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificateRequest generates requests for GetCertificate
func NewGetCertificateRequest(server string, certificateId string, params *GetCertificateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate_id", runtime.ParamLocationPath, certificateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyCertificateRequest calls the generic ModifyCertificate builder with application/json body
func NewModifyCertificateRequest(server string, certificateId string, body ModifyCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyCertificateRequestWithBody(server, certificateId, "application/json", bodyReader)
}

// NewModifyCertificateRequestWithBody generates requests for ModifyCertificate with any type of body
func NewModifyCertificateRequestWithBody(server string, certificateId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate_id", runtime.ParamLocationPath, certificateId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInvitesRequest generates requests for ListInvites
func NewListInvitesRequest(server string, params *ListInvitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInviteUserRequest calls the generic InviteUser builder with application/json body
func NewInviteUserRequest(server string, body InviteUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInviteUserRequestWithBody(server, "application/json", bodyReader)
}

// NewInviteUserRequestWithBody generates requests for InviteUser with any type of body
func NewInviteUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/invites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInviteRequest generates requests for DeleteInvite
func NewDeleteInviteRequest(server string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invite_id", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveInviteRequest generates requests for RetrieveInvite
func NewRetrieveInviteRequest(server string, inviteId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "invite_id", runtime.ParamLocationPath, inviteId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/invites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectsRequest generates requests for ListProjects
func NewListProjectsRequest(server string, params *ListProjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeArchived != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_archived", runtime.ParamLocationQuery, *params.IncludeArchived); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveProjectRequest generates requests for RetrieveProject
func NewRetrieveProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyProjectRequest calls the generic ModifyProject builder with application/json body
func NewModifyProjectRequest(server string, projectId string, body ModifyProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProjectRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewModifyProjectRequestWithBody generates requests for ModifyProject with any type of body
func NewModifyProjectRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListProjectApiKeysRequest generates requests for ListProjectApiKeys
func NewListProjectApiKeysRequest(server string, projectId string, params *ListProjectApiKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProjectApiKeyRequest generates requests for DeleteProjectApiKey
func NewDeleteProjectApiKeyRequest(server string, projectId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveProjectApiKeyRequest generates requests for RetrieveProjectApiKey
func NewRetrieveProjectApiKeyRequest(server string, projectId string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveProjectRequest generates requests for ArchiveProject
func NewArchiveProjectRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/archive", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectCertificatesRequest generates requests for ListProjectCertificates
func NewListProjectCertificatesRequest(server string, projectId string, params *ListProjectCertificatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/certificates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateProjectCertificatesRequest calls the generic ActivateProjectCertificates builder with application/json body
func NewActivateProjectCertificatesRequest(server string, projectId string, body ActivateProjectCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateProjectCertificatesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewActivateProjectCertificatesRequestWithBody generates requests for ActivateProjectCertificates with any type of body
func NewActivateProjectCertificatesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/certificates/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeactivateProjectCertificatesRequest calls the generic DeactivateProjectCertificates builder with application/json body
func NewDeactivateProjectCertificatesRequest(server string, projectId string, body DeactivateProjectCertificatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeactivateProjectCertificatesRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewDeactivateProjectCertificatesRequestWithBody generates requests for DeactivateProjectCertificates with any type of body
func NewDeactivateProjectCertificatesRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/certificates/deactivate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListProjectRateLimitsRequest generates requests for ListProjectRateLimits
func NewListProjectRateLimitsRequest(server string, projectId string, params *ListProjectRateLimitsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/rate_limits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectRateLimitsRequest calls the generic UpdateProjectRateLimits builder with application/json body
func NewUpdateProjectRateLimitsRequest(server string, projectId string, rateLimitId string, body UpdateProjectRateLimitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectRateLimitsRequestWithBody(server, projectId, rateLimitId, "application/json", bodyReader)
}

// NewUpdateProjectRateLimitsRequestWithBody generates requests for UpdateProjectRateLimits with any type of body
func NewUpdateProjectRateLimitsRequestWithBody(server string, projectId string, rateLimitId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "rate_limit_id", runtime.ParamLocationPath, rateLimitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/rate_limits/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListProjectServiceAccountsRequest generates requests for ListProjectServiceAccounts
func NewListProjectServiceAccountsRequest(server string, projectId string, params *ListProjectServiceAccountsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/service_accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectServiceAccountRequest calls the generic CreateProjectServiceAccount builder with application/json body
func NewCreateProjectServiceAccountRequest(server string, projectId string, body CreateProjectServiceAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectServiceAccountRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateProjectServiceAccountRequestWithBody generates requests for CreateProjectServiceAccount with any type of body
func NewCreateProjectServiceAccountRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/service_accounts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectServiceAccountRequest generates requests for DeleteProjectServiceAccount
func NewDeleteProjectServiceAccountRequest(server string, projectId string, serviceAccountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_account_id", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/service_accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveProjectServiceAccountRequest generates requests for RetrieveProjectServiceAccount
func NewRetrieveProjectServiceAccountRequest(server string, projectId string, serviceAccountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "service_account_id", runtime.ParamLocationPath, serviceAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/service_accounts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectUsersRequest generates requests for ListProjectUsers
func NewListProjectUsersRequest(server string, projectId string, params *ListProjectUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectUserRequest calls the generic CreateProjectUser builder with application/json body
func NewCreateProjectUserRequest(server string, projectId string, body CreateProjectUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectUserRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateProjectUserRequestWithBody generates requests for CreateProjectUser with any type of body
func NewCreateProjectUserRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectUserRequest generates requests for DeleteProjectUser
func NewDeleteProjectUserRequest(server string, projectId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveProjectUserRequest generates requests for RetrieveProjectUser
func NewRetrieveProjectUserRequest(server string, projectId string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyProjectUserRequest calls the generic ModifyProjectUser builder with application/json body
func NewModifyProjectUserRequest(server string, projectId string, userId string, body ModifyProjectUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyProjectUserRequestWithBody(server, projectId, userId, "application/json", bodyReader)
}

// NewModifyProjectUserRequestWithBody generates requests for ModifyProjectUser with any type of body
func NewModifyProjectUserRequestWithBody(server string, projectId string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/projects/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, params *ListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Emails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emails", runtime.ParamLocationQuery, *params.Emails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveUserRequest generates requests for RetrieveUser
func NewRetrieveUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewModifyUserRequest calls the generic ModifyUser builder with application/json body
func NewModifyUserRequest(server string, userId string, body ModifyUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewModifyUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewModifyUserRequestWithBody generates requests for ModifyUser with any type of body
func NewModifyUserRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminApiKeysListWithResponse request
	AdminApiKeysListWithResponse(ctx context.Context, params *AdminApiKeysListParams, reqEditors ...RequestEditorFn) (*AdminApiKeysListResp, error)

	// AdminApiKeysCreateWithBodyWithResponse request with any body
	AdminApiKeysCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminApiKeysCreateResp, error)

	AdminApiKeysCreateWithResponse(ctx context.Context, body AdminApiKeysCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminApiKeysCreateResp, error)

	// AdminApiKeysDeleteWithResponse request
	AdminApiKeysDeleteWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*AdminApiKeysDeleteResp, error)

	// AdminApiKeysGetWithResponse request
	AdminApiKeysGetWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*AdminApiKeysGetResp, error)

	// ListOrganizationCertificatesWithResponse request
	ListOrganizationCertificatesWithResponse(ctx context.Context, params *ListOrganizationCertificatesParams, reqEditors ...RequestEditorFn) (*ListOrganizationCertificatesResp, error)

	// UploadCertificateWithBodyWithResponse request with any body
	UploadCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCertificateResp, error)

	UploadCertificateWithResponse(ctx context.Context, body UploadCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadCertificateResp, error)

	// ActivateOrganizationCertificatesWithBodyWithResponse request with any body
	ActivateOrganizationCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateOrganizationCertificatesResp, error)

	ActivateOrganizationCertificatesWithResponse(ctx context.Context, body ActivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateOrganizationCertificatesResp, error)

	// DeactivateOrganizationCertificatesWithBodyWithResponse request with any body
	DeactivateOrganizationCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateOrganizationCertificatesResp, error)

	DeactivateOrganizationCertificatesWithResponse(ctx context.Context, body DeactivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateOrganizationCertificatesResp, error)

	// DeleteCertificateWithResponse request
	DeleteCertificateWithResponse(ctx context.Context, certificateId string, reqEditors ...RequestEditorFn) (*DeleteCertificateResp, error)

	// GetCertificateWithResponse request
	GetCertificateWithResponse(ctx context.Context, certificateId string, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResp, error)

	// ModifyCertificateWithBodyWithResponse request with any body
	ModifyCertificateWithBodyWithResponse(ctx context.Context, certificateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyCertificateResp, error)

	ModifyCertificateWithResponse(ctx context.Context, certificateId string, body ModifyCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyCertificateResp, error)

	// ListInvitesWithResponse request
	ListInvitesWithResponse(ctx context.Context, params *ListInvitesParams, reqEditors ...RequestEditorFn) (*ListInvitesResp, error)

	// InviteUserWithBodyWithResponse request with any body
	InviteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserResp, error)

	InviteUserWithResponse(ctx context.Context, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserResp, error)

	// DeleteInviteWithResponse request
	DeleteInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*DeleteInviteResp, error)

	// RetrieveInviteWithResponse request
	RetrieveInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*RetrieveInviteResp, error)

	// ListProjectsWithResponse request
	ListProjectsWithResponse(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResp, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResp, error)

	CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResp, error)

	// RetrieveProjectWithResponse request
	RetrieveProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*RetrieveProjectResp, error)

	// ModifyProjectWithBodyWithResponse request with any body
	ModifyProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectResp, error)

	ModifyProjectWithResponse(ctx context.Context, projectId string, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectResp, error)

	// ListProjectApiKeysWithResponse request
	ListProjectApiKeysWithResponse(ctx context.Context, projectId string, params *ListProjectApiKeysParams, reqEditors ...RequestEditorFn) (*ListProjectApiKeysResp, error)

	// DeleteProjectApiKeyWithResponse request
	DeleteProjectApiKeyWithResponse(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*DeleteProjectApiKeyResp, error)

	// RetrieveProjectApiKeyWithResponse request
	RetrieveProjectApiKeyWithResponse(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*RetrieveProjectApiKeyResp, error)

	// ArchiveProjectWithResponse request
	ArchiveProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ArchiveProjectResp, error)

	// ListProjectCertificatesWithResponse request
	ListProjectCertificatesWithResponse(ctx context.Context, projectId string, params *ListProjectCertificatesParams, reqEditors ...RequestEditorFn) (*ListProjectCertificatesResp, error)

	// ActivateProjectCertificatesWithBodyWithResponse request with any body
	ActivateProjectCertificatesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateProjectCertificatesResp, error)

	ActivateProjectCertificatesWithResponse(ctx context.Context, projectId string, body ActivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateProjectCertificatesResp, error)

	// DeactivateProjectCertificatesWithBodyWithResponse request with any body
	DeactivateProjectCertificatesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateProjectCertificatesResp, error)

	DeactivateProjectCertificatesWithResponse(ctx context.Context, projectId string, body DeactivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateProjectCertificatesResp, error)

	// ListProjectRateLimitsWithResponse request
	ListProjectRateLimitsWithResponse(ctx context.Context, projectId string, params *ListProjectRateLimitsParams, reqEditors ...RequestEditorFn) (*ListProjectRateLimitsResp, error)

	// UpdateProjectRateLimitsWithBodyWithResponse request with any body
	UpdateProjectRateLimitsWithBodyWithResponse(ctx context.Context, projectId string, rateLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectRateLimitsResp, error)

	UpdateProjectRateLimitsWithResponse(ctx context.Context, projectId string, rateLimitId string, body UpdateProjectRateLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectRateLimitsResp, error)

	// ListProjectServiceAccountsWithResponse request
	ListProjectServiceAccountsWithResponse(ctx context.Context, projectId string, params *ListProjectServiceAccountsParams, reqEditors ...RequestEditorFn) (*ListProjectServiceAccountsResp, error)

	// CreateProjectServiceAccountWithBodyWithResponse request with any body
	CreateProjectServiceAccountWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectServiceAccountResp, error)

	CreateProjectServiceAccountWithResponse(ctx context.Context, projectId string, body CreateProjectServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectServiceAccountResp, error)

	// DeleteProjectServiceAccountWithResponse request
	DeleteProjectServiceAccountWithResponse(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*DeleteProjectServiceAccountResp, error)

	// RetrieveProjectServiceAccountWithResponse request
	RetrieveProjectServiceAccountWithResponse(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*RetrieveProjectServiceAccountResp, error)

	// ListProjectUsersWithResponse request
	ListProjectUsersWithResponse(ctx context.Context, projectId string, params *ListProjectUsersParams, reqEditors ...RequestEditorFn) (*ListProjectUsersResp, error)

	// CreateProjectUserWithBodyWithResponse request with any body
	CreateProjectUserWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectUserResp, error)

	CreateProjectUserWithResponse(ctx context.Context, projectId string, body CreateProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectUserResp, error)

	// DeleteProjectUserWithResponse request
	DeleteProjectUserWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*DeleteProjectUserResp, error)

	// RetrieveProjectUserWithResponse request
	RetrieveProjectUserWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*RetrieveProjectUserResp, error)

	// ModifyProjectUserWithBodyWithResponse request with any body
	ModifyProjectUserWithBodyWithResponse(ctx context.Context, projectId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectUserResp, error)

	ModifyProjectUserWithResponse(ctx context.Context, projectId string, userId string, body ModifyProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectUserResp, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResp, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResp, error)

	// RetrieveUserWithResponse request
	RetrieveUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*RetrieveUserResp, error)

	// ModifyUserWithBodyWithResponse request with any body
	ModifyUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserResp, error)

	ModifyUserWithResponse(ctx context.Context, userId string, body ModifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserResp, error)
}

type AdminApiKeysListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyList
}

// Status returns HTTPResponse.Status
func (r AdminApiKeysListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminApiKeysListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminApiKeysCreateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminApiKey
}

// Status returns HTTPResponse.Status
func (r AdminApiKeysCreateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminApiKeysCreateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminApiKeysDeleteResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Deleted *bool   `json:"deleted,omitempty"`
		Id      *string `json:"id,omitempty"`
		Object  *string `json:"object,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminApiKeysDeleteResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminApiKeysDeleteResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminApiKeysGetResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminApiKey
}

// Status returns HTTPResponse.Status
func (r AdminApiKeysGetResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminApiKeysGetResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganizationCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadCertificateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r UploadCertificateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadCertificateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateOrganizationCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r ActivateOrganizationCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateOrganizationCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeactivateOrganizationCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r DeactivateOrganizationCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeactivateOrganizationCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCertificateResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r GetCertificateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyCertificateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Certificate
}

// Status returns HTTPResponse.Status
func (r ModifyCertificateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyCertificateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvitesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteListResponse
}

// Status returns HTTPResponse.Status
func (r ListInvitesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvitesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InviteUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Invite
}

// Status returns HTTPResponse.Status
func (r InviteUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InviteUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInviteResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InviteDeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInviteResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInviteResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveInviteResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invite
}

// Status returns HTTPResponse.Status
func (r RetrieveInviteResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveInviteResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectListResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
}

// Status returns HTTPResponse.Status
func (r CreateProjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveProjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r RetrieveProjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveProjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ModifyProjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectApiKeysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectApiKeyListResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectApiKeysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectApiKeysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectApiKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectApiKeyDeleteResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectApiKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectApiKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveProjectApiKeyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectApiKey
}

// Status returns HTTPResponse.Status
func (r RetrieveProjectApiKeyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveProjectApiKeyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveProjectResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
}

// Status returns HTTPResponse.Status
func (r ArchiveProjectResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveProjectResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateProjectCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r ActivateProjectCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateProjectCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeactivateProjectCertificatesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListCertificatesResponse
}

// Status returns HTTPResponse.Status
func (r DeactivateProjectCertificatesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeactivateProjectCertificatesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectRateLimitsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectRateLimitListResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectRateLimitsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectRateLimitsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectRateLimitsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectRateLimit
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProjectRateLimitsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectRateLimitsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectServiceAccountsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectServiceAccountListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectServiceAccountsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectServiceAccountsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectServiceAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProjectServiceAccountCreateResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectServiceAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectServiceAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectServiceAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectServiceAccountDeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectServiceAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectServiceAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveProjectServiceAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectServiceAccount
}

// Status returns HTTPResponse.Status
func (r RetrieveProjectServiceAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveProjectServiceAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectUsersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUserListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListProjectUsersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectUsersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProjectUser
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUserDeleteResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveProjectUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
}

// Status returns HTTPResponse.Status
func (r RetrieveProjectUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveProjectUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyProjectUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUser
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ModifyProjectUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyProjectUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserListResponse
}

// Status returns HTTPResponse.Status
func (r ListUsersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDeleteResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r RetrieveUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ModifyUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r ModifyUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ModifyUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminApiKeysListWithResponse request returning *AdminApiKeysListResp
func (c *ClientWithResponses) AdminApiKeysListWithResponse(ctx context.Context, params *AdminApiKeysListParams, reqEditors ...RequestEditorFn) (*AdminApiKeysListResp, error) {
	rsp, err := c.AdminApiKeysList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminApiKeysListResp(rsp)
}

// AdminApiKeysCreateWithBodyWithResponse request with arbitrary body returning *AdminApiKeysCreateResp
func (c *ClientWithResponses) AdminApiKeysCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminApiKeysCreateResp, error) {
	rsp, err := c.AdminApiKeysCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminApiKeysCreateResp(rsp)
}

func (c *ClientWithResponses) AdminApiKeysCreateWithResponse(ctx context.Context, body AdminApiKeysCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminApiKeysCreateResp, error) {
	rsp, err := c.AdminApiKeysCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminApiKeysCreateResp(rsp)
}

// AdminApiKeysDeleteWithResponse request returning *AdminApiKeysDeleteResp
func (c *ClientWithResponses) AdminApiKeysDeleteWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*AdminApiKeysDeleteResp, error) {
	rsp, err := c.AdminApiKeysDelete(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminApiKeysDeleteResp(rsp)
}

// AdminApiKeysGetWithResponse request returning *AdminApiKeysGetResp
func (c *ClientWithResponses) AdminApiKeysGetWithResponse(ctx context.Context, keyId string, reqEditors ...RequestEditorFn) (*AdminApiKeysGetResp, error) {
	rsp, err := c.AdminApiKeysGet(ctx, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminApiKeysGetResp(rsp)
}

// ListOrganizationCertificatesWithResponse request returning *ListOrganizationCertificatesResp
func (c *ClientWithResponses) ListOrganizationCertificatesWithResponse(ctx context.Context, params *ListOrganizationCertificatesParams, reqEditors ...RequestEditorFn) (*ListOrganizationCertificatesResp, error) {
	rsp, err := c.ListOrganizationCertificates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganizationCertificatesResp(rsp)
}

// UploadCertificateWithBodyWithResponse request with arbitrary body returning *UploadCertificateResp
func (c *ClientWithResponses) UploadCertificateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadCertificateResp, error) {
	rsp, err := c.UploadCertificateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadCertificateResp(rsp)
}

func (c *ClientWithResponses) UploadCertificateWithResponse(ctx context.Context, body UploadCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadCertificateResp, error) {
	rsp, err := c.UploadCertificate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadCertificateResp(rsp)
}

// ActivateOrganizationCertificatesWithBodyWithResponse request with arbitrary body returning *ActivateOrganizationCertificatesResp
func (c *ClientWithResponses) ActivateOrganizationCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateOrganizationCertificatesResp, error) {
	rsp, err := c.ActivateOrganizationCertificatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateOrganizationCertificatesResp(rsp)
}

func (c *ClientWithResponses) ActivateOrganizationCertificatesWithResponse(ctx context.Context, body ActivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateOrganizationCertificatesResp, error) {
	rsp, err := c.ActivateOrganizationCertificates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateOrganizationCertificatesResp(rsp)
}

// DeactivateOrganizationCertificatesWithBodyWithResponse request with arbitrary body returning *DeactivateOrganizationCertificatesResp
func (c *ClientWithResponses) DeactivateOrganizationCertificatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateOrganizationCertificatesResp, error) {
	rsp, err := c.DeactivateOrganizationCertificatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateOrganizationCertificatesResp(rsp)
}

func (c *ClientWithResponses) DeactivateOrganizationCertificatesWithResponse(ctx context.Context, body DeactivateOrganizationCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateOrganizationCertificatesResp, error) {
	rsp, err := c.DeactivateOrganizationCertificates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateOrganizationCertificatesResp(rsp)
}

// DeleteCertificateWithResponse request returning *DeleteCertificateResp
func (c *ClientWithResponses) DeleteCertificateWithResponse(ctx context.Context, certificateId string, reqEditors ...RequestEditorFn) (*DeleteCertificateResp, error) {
	rsp, err := c.DeleteCertificate(ctx, certificateId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateResp(rsp)
}

// GetCertificateWithResponse request returning *GetCertificateResp
func (c *ClientWithResponses) GetCertificateWithResponse(ctx context.Context, certificateId string, params *GetCertificateParams, reqEditors ...RequestEditorFn) (*GetCertificateResp, error) {
	rsp, err := c.GetCertificate(ctx, certificateId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificateResp(rsp)
}

// ModifyCertificateWithBodyWithResponse request with arbitrary body returning *ModifyCertificateResp
func (c *ClientWithResponses) ModifyCertificateWithBodyWithResponse(ctx context.Context, certificateId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyCertificateResp, error) {
	rsp, err := c.ModifyCertificateWithBody(ctx, certificateId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyCertificateResp(rsp)
}

func (c *ClientWithResponses) ModifyCertificateWithResponse(ctx context.Context, certificateId string, body ModifyCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyCertificateResp, error) {
	rsp, err := c.ModifyCertificate(ctx, certificateId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyCertificateResp(rsp)
}

// ListInvitesWithResponse request returning *ListInvitesResp
func (c *ClientWithResponses) ListInvitesWithResponse(ctx context.Context, params *ListInvitesParams, reqEditors ...RequestEditorFn) (*ListInvitesResp, error) {
	rsp, err := c.ListInvites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvitesResp(rsp)
}

// InviteUserWithBodyWithResponse request with arbitrary body returning *InviteUserResp
func (c *ClientWithResponses) InviteUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InviteUserResp, error) {
	rsp, err := c.InviteUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserResp(rsp)
}

func (c *ClientWithResponses) InviteUserWithResponse(ctx context.Context, body InviteUserJSONRequestBody, reqEditors ...RequestEditorFn) (*InviteUserResp, error) {
	rsp, err := c.InviteUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInviteUserResp(rsp)
}

// DeleteInviteWithResponse request returning *DeleteInviteResp
func (c *ClientWithResponses) DeleteInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*DeleteInviteResp, error) {
	rsp, err := c.DeleteInvite(ctx, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInviteResp(rsp)
}

// RetrieveInviteWithResponse request returning *RetrieveInviteResp
func (c *ClientWithResponses) RetrieveInviteWithResponse(ctx context.Context, inviteId string, reqEditors ...RequestEditorFn) (*RetrieveInviteResp, error) {
	rsp, err := c.RetrieveInvite(ctx, inviteId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveInviteResp(rsp)
}

// ListProjectsWithResponse request returning *ListProjectsResp
func (c *ClientWithResponses) ListProjectsWithResponse(ctx context.Context, params *ListProjectsParams, reqEditors ...RequestEditorFn) (*ListProjectsResp, error) {
	rsp, err := c.ListProjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsResp(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResp
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResp, error) {
	rsp, err := c.CreateProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResp(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResp, error) {
	rsp, err := c.CreateProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResp(rsp)
}

// RetrieveProjectWithResponse request returning *RetrieveProjectResp
func (c *ClientWithResponses) RetrieveProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*RetrieveProjectResp, error) {
	rsp, err := c.RetrieveProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveProjectResp(rsp)
}

// ModifyProjectWithBodyWithResponse request with arbitrary body returning *ModifyProjectResp
func (c *ClientWithResponses) ModifyProjectWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectResp, error) {
	rsp, err := c.ModifyProjectWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectResp(rsp)
}

func (c *ClientWithResponses) ModifyProjectWithResponse(ctx context.Context, projectId string, body ModifyProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectResp, error) {
	rsp, err := c.ModifyProject(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectResp(rsp)
}

// ListProjectApiKeysWithResponse request returning *ListProjectApiKeysResp
func (c *ClientWithResponses) ListProjectApiKeysWithResponse(ctx context.Context, projectId string, params *ListProjectApiKeysParams, reqEditors ...RequestEditorFn) (*ListProjectApiKeysResp, error) {
	rsp, err := c.ListProjectApiKeys(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectApiKeysResp(rsp)
}

// DeleteProjectApiKeyWithResponse request returning *DeleteProjectApiKeyResp
func (c *ClientWithResponses) DeleteProjectApiKeyWithResponse(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*DeleteProjectApiKeyResp, error) {
	rsp, err := c.DeleteProjectApiKey(ctx, projectId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectApiKeyResp(rsp)
}

// RetrieveProjectApiKeyWithResponse request returning *RetrieveProjectApiKeyResp
func (c *ClientWithResponses) RetrieveProjectApiKeyWithResponse(ctx context.Context, projectId string, keyId string, reqEditors ...RequestEditorFn) (*RetrieveProjectApiKeyResp, error) {
	rsp, err := c.RetrieveProjectApiKey(ctx, projectId, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveProjectApiKeyResp(rsp)
}

// ArchiveProjectWithResponse request returning *ArchiveProjectResp
func (c *ClientWithResponses) ArchiveProjectWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ArchiveProjectResp, error) {
	rsp, err := c.ArchiveProject(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveProjectResp(rsp)
}

// ListProjectCertificatesWithResponse request returning *ListProjectCertificatesResp
func (c *ClientWithResponses) ListProjectCertificatesWithResponse(ctx context.Context, projectId string, params *ListProjectCertificatesParams, reqEditors ...RequestEditorFn) (*ListProjectCertificatesResp, error) {
	rsp, err := c.ListProjectCertificates(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectCertificatesResp(rsp)
}

// ActivateProjectCertificatesWithBodyWithResponse request with arbitrary body returning *ActivateProjectCertificatesResp
func (c *ClientWithResponses) ActivateProjectCertificatesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateProjectCertificatesResp, error) {
	rsp, err := c.ActivateProjectCertificatesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateProjectCertificatesResp(rsp)
}

func (c *ClientWithResponses) ActivateProjectCertificatesWithResponse(ctx context.Context, projectId string, body ActivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateProjectCertificatesResp, error) {
	rsp, err := c.ActivateProjectCertificates(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateProjectCertificatesResp(rsp)
}

// DeactivateProjectCertificatesWithBodyWithResponse request with arbitrary body returning *DeactivateProjectCertificatesResp
func (c *ClientWithResponses) DeactivateProjectCertificatesWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeactivateProjectCertificatesResp, error) {
	rsp, err := c.DeactivateProjectCertificatesWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateProjectCertificatesResp(rsp)
}

func (c *ClientWithResponses) DeactivateProjectCertificatesWithResponse(ctx context.Context, projectId string, body DeactivateProjectCertificatesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeactivateProjectCertificatesResp, error) {
	rsp, err := c.DeactivateProjectCertificates(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateProjectCertificatesResp(rsp)
}

// ListProjectRateLimitsWithResponse request returning *ListProjectRateLimitsResp
func (c *ClientWithResponses) ListProjectRateLimitsWithResponse(ctx context.Context, projectId string, params *ListProjectRateLimitsParams, reqEditors ...RequestEditorFn) (*ListProjectRateLimitsResp, error) {
	rsp, err := c.ListProjectRateLimits(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectRateLimitsResp(rsp)
}

// UpdateProjectRateLimitsWithBodyWithResponse request with arbitrary body returning *UpdateProjectRateLimitsResp
func (c *ClientWithResponses) UpdateProjectRateLimitsWithBodyWithResponse(ctx context.Context, projectId string, rateLimitId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectRateLimitsResp, error) {
	rsp, err := c.UpdateProjectRateLimitsWithBody(ctx, projectId, rateLimitId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectRateLimitsResp(rsp)
}

func (c *ClientWithResponses) UpdateProjectRateLimitsWithResponse(ctx context.Context, projectId string, rateLimitId string, body UpdateProjectRateLimitsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectRateLimitsResp, error) {
	rsp, err := c.UpdateProjectRateLimits(ctx, projectId, rateLimitId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectRateLimitsResp(rsp)
}

// ListProjectServiceAccountsWithResponse request returning *ListProjectServiceAccountsResp
func (c *ClientWithResponses) ListProjectServiceAccountsWithResponse(ctx context.Context, projectId string, params *ListProjectServiceAccountsParams, reqEditors ...RequestEditorFn) (*ListProjectServiceAccountsResp, error) {
	rsp, err := c.ListProjectServiceAccounts(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectServiceAccountsResp(rsp)
}

// CreateProjectServiceAccountWithBodyWithResponse request with arbitrary body returning *CreateProjectServiceAccountResp
func (c *ClientWithResponses) CreateProjectServiceAccountWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectServiceAccountResp, error) {
	rsp, err := c.CreateProjectServiceAccountWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectServiceAccountResp(rsp)
}

func (c *ClientWithResponses) CreateProjectServiceAccountWithResponse(ctx context.Context, projectId string, body CreateProjectServiceAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectServiceAccountResp, error) {
	rsp, err := c.CreateProjectServiceAccount(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectServiceAccountResp(rsp)
}

// DeleteProjectServiceAccountWithResponse request returning *DeleteProjectServiceAccountResp
func (c *ClientWithResponses) DeleteProjectServiceAccountWithResponse(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*DeleteProjectServiceAccountResp, error) {
	rsp, err := c.DeleteProjectServiceAccount(ctx, projectId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectServiceAccountResp(rsp)
}

// RetrieveProjectServiceAccountWithResponse request returning *RetrieveProjectServiceAccountResp
func (c *ClientWithResponses) RetrieveProjectServiceAccountWithResponse(ctx context.Context, projectId string, serviceAccountId string, reqEditors ...RequestEditorFn) (*RetrieveProjectServiceAccountResp, error) {
	rsp, err := c.RetrieveProjectServiceAccount(ctx, projectId, serviceAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveProjectServiceAccountResp(rsp)
}

// ListProjectUsersWithResponse request returning *ListProjectUsersResp
func (c *ClientWithResponses) ListProjectUsersWithResponse(ctx context.Context, projectId string, params *ListProjectUsersParams, reqEditors ...RequestEditorFn) (*ListProjectUsersResp, error) {
	rsp, err := c.ListProjectUsers(ctx, projectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectUsersResp(rsp)
}

// CreateProjectUserWithBodyWithResponse request with arbitrary body returning *CreateProjectUserResp
func (c *ClientWithResponses) CreateProjectUserWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectUserResp, error) {
	rsp, err := c.CreateProjectUserWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectUserResp(rsp)
}

func (c *ClientWithResponses) CreateProjectUserWithResponse(ctx context.Context, projectId string, body CreateProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectUserResp, error) {
	rsp, err := c.CreateProjectUser(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectUserResp(rsp)
}

// DeleteProjectUserWithResponse request returning *DeleteProjectUserResp
func (c *ClientWithResponses) DeleteProjectUserWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*DeleteProjectUserResp, error) {
	rsp, err := c.DeleteProjectUser(ctx, projectId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectUserResp(rsp)
}

// RetrieveProjectUserWithResponse request returning *RetrieveProjectUserResp
func (c *ClientWithResponses) RetrieveProjectUserWithResponse(ctx context.Context, projectId string, userId string, reqEditors ...RequestEditorFn) (*RetrieveProjectUserResp, error) {
	rsp, err := c.RetrieveProjectUser(ctx, projectId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveProjectUserResp(rsp)
}

// ModifyProjectUserWithBodyWithResponse request with arbitrary body returning *ModifyProjectUserResp
func (c *ClientWithResponses) ModifyProjectUserWithBodyWithResponse(ctx context.Context, projectId string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyProjectUserResp, error) {
	rsp, err := c.ModifyProjectUserWithBody(ctx, projectId, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectUserResp(rsp)
}

func (c *ClientWithResponses) ModifyProjectUserWithResponse(ctx context.Context, projectId string, userId string, body ModifyProjectUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyProjectUserResp, error) {
	rsp, err := c.ModifyProjectUser(ctx, projectId, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyProjectUserResp(rsp)
}

// ListUsersWithResponse request returning *ListUsersResp
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResp, error) {
	rsp, err := c.ListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResp(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResp
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*DeleteUserResp, error) {
	rsp, err := c.DeleteUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResp(rsp)
}

// RetrieveUserWithResponse request returning *RetrieveUserResp
func (c *ClientWithResponses) RetrieveUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*RetrieveUserResp, error) {
	rsp, err := c.RetrieveUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveUserResp(rsp)
}

// ModifyUserWithBodyWithResponse request with arbitrary body returning *ModifyUserResp
func (c *ClientWithResponses) ModifyUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ModifyUserResp, error) {
	rsp, err := c.ModifyUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserResp(rsp)
}

func (c *ClientWithResponses) ModifyUserWithResponse(ctx context.Context, userId string, body ModifyUserJSONRequestBody, reqEditors ...RequestEditorFn) (*ModifyUserResp, error) {
	rsp, err := c.ModifyUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseModifyUserResp(rsp)
}

// ParseAdminApiKeysListResp parses an HTTP response from a AdminApiKeysListWithResponse call
func ParseAdminApiKeysListResp(rsp *http.Response) (*AdminApiKeysListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminApiKeysListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminApiKeysCreateResp parses an HTTP response from a AdminApiKeysCreateWithResponse call
func ParseAdminApiKeysCreateResp(rsp *http.Response) (*AdminApiKeysCreateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminApiKeysCreateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminApiKeysDeleteResp parses an HTTP response from a AdminApiKeysDeleteWithResponse call
func ParseAdminApiKeysDeleteResp(rsp *http.Response) (*AdminApiKeysDeleteResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminApiKeysDeleteResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Deleted *bool   `json:"deleted,omitempty"`
			Id      *string `json:"id,omitempty"`
			Object  *string `json:"object,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminApiKeysGetResp parses an HTTP response from a AdminApiKeysGetWithResponse call
func ParseAdminApiKeysGetResp(rsp *http.Response) (*AdminApiKeysGetResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminApiKeysGetResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganizationCertificatesResp parses an HTTP response from a ListOrganizationCertificatesWithResponse call
func ParseListOrganizationCertificatesResp(rsp *http.Response) (*ListOrganizationCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUploadCertificateResp parses an HTTP response from a UploadCertificateWithResponse call
func ParseUploadCertificateResp(rsp *http.Response) (*UploadCertificateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadCertificateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActivateOrganizationCertificatesResp parses an HTTP response from a ActivateOrganizationCertificatesWithResponse call
func ParseActivateOrganizationCertificatesResp(rsp *http.Response) (*ActivateOrganizationCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateOrganizationCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeactivateOrganizationCertificatesResp parses an HTTP response from a DeactivateOrganizationCertificatesWithResponse call
func ParseDeactivateOrganizationCertificatesResp(rsp *http.Response) (*DeactivateOrganizationCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeactivateOrganizationCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCertificateResp parses an HTTP response from a DeleteCertificateWithResponse call
func ParseDeleteCertificateResp(rsp *http.Response) (*DeleteCertificateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCertificateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCertificateResp parses an HTTP response from a GetCertificateWithResponse call
func ParseGetCertificateResp(rsp *http.Response) (*GetCertificateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyCertificateResp parses an HTTP response from a ModifyCertificateWithResponse call
func ParseModifyCertificateResp(rsp *http.Response) (*ModifyCertificateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyCertificateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Certificate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListInvitesResp parses an HTTP response from a ListInvitesWithResponse call
func ParseListInvitesResp(rsp *http.Response) (*ListInvitesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvitesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInviteUserResp parses an HTTP response from a InviteUserWithResponse call
func ParseInviteUserResp(rsp *http.Response) (*InviteUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InviteUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteInviteResp parses an HTTP response from a DeleteInviteWithResponse call
func ParseDeleteInviteResp(rsp *http.Response) (*DeleteInviteResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInviteResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InviteDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveInviteResp parses an HTTP response from a RetrieveInviteWithResponse call
func ParseRetrieveInviteResp(rsp *http.Response) (*RetrieveInviteResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveInviteResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invite
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectsResp parses an HTTP response from a ListProjectsWithResponse call
func ParseListProjectsResp(rsp *http.Response) (*ListProjectsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProjectResp parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResp(rsp *http.Response) (*CreateProjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRetrieveProjectResp parses an HTTP response from a RetrieveProjectWithResponse call
func ParseRetrieveProjectResp(rsp *http.Response) (*RetrieveProjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveProjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyProjectResp parses an HTTP response from a ModifyProjectWithResponse call
func ParseModifyProjectResp(rsp *http.Response) (*ModifyProjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListProjectApiKeysResp parses an HTTP response from a ListProjectApiKeysWithResponse call
func ParseListProjectApiKeysResp(rsp *http.Response) (*ListProjectApiKeysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectApiKeysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectApiKeyListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteProjectApiKeyResp parses an HTTP response from a DeleteProjectApiKeyWithResponse call
func ParseDeleteProjectApiKeyResp(rsp *http.Response) (*DeleteProjectApiKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectApiKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectApiKeyDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRetrieveProjectApiKeyResp parses an HTTP response from a RetrieveProjectApiKeyWithResponse call
func ParseRetrieveProjectApiKeyResp(rsp *http.Response) (*RetrieveProjectApiKeyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveProjectApiKeyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArchiveProjectResp parses an HTTP response from a ArchiveProjectWithResponse call
func ParseArchiveProjectResp(rsp *http.Response) (*ArchiveProjectResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveProjectResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectCertificatesResp parses an HTTP response from a ListProjectCertificatesWithResponse call
func ParseListProjectCertificatesResp(rsp *http.Response) (*ListProjectCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActivateProjectCertificatesResp parses an HTTP response from a ActivateProjectCertificatesWithResponse call
func ParseActivateProjectCertificatesResp(rsp *http.Response) (*ActivateProjectCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateProjectCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeactivateProjectCertificatesResp parses an HTTP response from a DeactivateProjectCertificatesWithResponse call
func ParseDeactivateProjectCertificatesResp(rsp *http.Response) (*DeactivateProjectCertificatesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeactivateProjectCertificatesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListCertificatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectRateLimitsResp parses an HTTP response from a ListProjectRateLimitsWithResponse call
func ParseListProjectRateLimitsResp(rsp *http.Response) (*ListProjectRateLimitsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectRateLimitsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectRateLimitListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProjectRateLimitsResp parses an HTTP response from a UpdateProjectRateLimitsWithResponse call
func ParseUpdateProjectRateLimitsResp(rsp *http.Response) (*UpdateProjectRateLimitsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectRateLimitsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectRateLimit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListProjectServiceAccountsResp parses an HTTP response from a ListProjectServiceAccountsWithResponse call
func ParseListProjectServiceAccountsResp(rsp *http.Response) (*ListProjectServiceAccountsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectServiceAccountsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectServiceAccountListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateProjectServiceAccountResp parses an HTTP response from a CreateProjectServiceAccountWithResponse call
func ParseCreateProjectServiceAccountResp(rsp *http.Response) (*CreateProjectServiceAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectServiceAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectServiceAccountCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteProjectServiceAccountResp parses an HTTP response from a DeleteProjectServiceAccountWithResponse call
func ParseDeleteProjectServiceAccountResp(rsp *http.Response) (*DeleteProjectServiceAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectServiceAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectServiceAccountDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveProjectServiceAccountResp parses an HTTP response from a RetrieveProjectServiceAccountWithResponse call
func ParseRetrieveProjectServiceAccountResp(rsp *http.Response) (*RetrieveProjectServiceAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveProjectServiceAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectServiceAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListProjectUsersResp parses an HTTP response from a ListProjectUsersWithResponse call
func ParseListProjectUsersResp(rsp *http.Response) (*ListProjectUsersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectUsersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUserListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateProjectUserResp parses an HTTP response from a CreateProjectUserWithResponse call
func ParseCreateProjectUserResp(rsp *http.Response) (*CreateProjectUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteProjectUserResp parses an HTTP response from a DeleteProjectUserWithResponse call
func ParseDeleteProjectUserResp(rsp *http.Response) (*DeleteProjectUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUserDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRetrieveProjectUserResp parses an HTTP response from a RetrieveProjectUserWithResponse call
func ParseRetrieveProjectUserResp(rsp *http.Response) (*RetrieveProjectUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveProjectUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyProjectUserResp parses an HTTP response from a ModifyProjectUserWithResponse call
func ParseModifyProjectUserResp(rsp *http.Response) (*ModifyProjectUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyProjectUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseListUsersResp parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResp(rsp *http.Response) (*ListUsersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResp parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResp(rsp *http.Response) (*DeleteUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveUserResp parses an HTTP response from a RetrieveUserWithResponse call
func ParseRetrieveUserResp(rsp *http.Response) (*RetrieveUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseModifyUserResp parses an HTTP response from a ModifyUserWithResponse call
func ParseModifyUserResp(rsp *http.Response) (*ModifyUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ModifyUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
